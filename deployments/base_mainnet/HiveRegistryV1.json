{
  "address": "0x9D30e52C1290Ee3348be1487127156a1136A57C7",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "hiveId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "category",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "AssetLinked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "hiveId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "category",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "AssetUnlinked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "categoryIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "category",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "allowedCollection",
          "type": "address"
        }
      ],
      "name": "CategoryAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "dptAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "dptId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "DPTRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "hiveId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "HiveCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "hiveId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "HiveTokenUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "hiveId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "hiveURI",
          "type": "string"
        }
      ],
      "name": "HiveUriUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "name": "NonceUsed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "podId",
          "type": "uint256"
        }
      ],
      "name": "PodDelisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "podId",
          "type": "uint256"
        }
      ],
      "name": "PodWhitelisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requested",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assigned",
          "type": "uint256"
        }
      ],
      "name": "RoleUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FEATURE_ALLOW_ASSET_LINKING",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEATURE_ALLOW_ASSET_UNLINKING",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEATURE_ALLOW_HIVE_CREATION",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROLE_ACCESS_MANAGER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROLE_CATEGORY_MANAGER",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROLE_DPT_REGISTRAR",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROLE_HIVE_TOKEN_MANAGER",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROLE_POD_WHITELIST_MANAGER",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROLE_UPGRADE_MANAGER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_categoryName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_allowedCollection",
          "type": "address"
        }
      ],
      "name": "addCategory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "assetCatalogue",
      "outputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_podId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_hiveURI",
          "type": "string"
        }
      ],
      "name": "createHive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_pods",
          "type": "uint256[]"
        }
      ],
      "name": "delistPods",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "internalType": "struct TradeableShares.SharesSubject",
              "name": "asset",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "dptOwner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "validFromTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiresAtTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            }
          ],
          "internalType": "struct HiveRegistry.RegisterAsDPTRequest",
          "name": "_req",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "eip712RegisterAsDPT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_issuer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        }
      ],
      "name": "fastForwardTheNonce",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "features",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_category",
          "type": "string"
        }
      ],
      "name": "getCategoryIndex",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "categoryId",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_hiveId",
          "type": "uint256"
        }
      ],
      "name": "getHiveCreatorPod",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "internalType": "struct TradeableShares.SharesSubject",
          "name": "pod",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_hiveId",
          "type": "uint16"
        }
      ],
      "name": "getHiveDetails",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "internalType": "struct TradeableShares.SharesSubject",
          "name": "pod",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "hiveOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "hiveTokenAddr",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "hiveUri",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_podId",
          "type": "uint256"
        }
      ],
      "name": "getHiveId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "hiveId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_hiveId",
          "type": "uint256"
        }
      ],
      "name": "getHiveToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "tokenAddr",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_hiveId",
          "type": "uint16"
        }
      ],
      "name": "getHiveURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "hiveUri",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "internalType": "struct TradeableShares.SharesSubject",
          "name": "_asset",
          "type": "tuple"
        }
      ],
      "name": "getLinkedAssetDetails",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "hiveId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "categoryId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "category",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "clientAddress",
          "type": "address"
        }
      ],
      "name": "getNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_hiveId",
          "type": "uint16"
        }
      ],
      "name": "getNumOfAssetsLinkedWithHive",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "numOfAssets",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_hiveId",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_category",
          "type": "uint16"
        }
      ],
      "name": "getNumOfAssetsLinkedWithHive",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "numOfAssets",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumOfGlobalCategories",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "noOfCategories",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumOfHives",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "noOfHives",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "getRole",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "globalCategories",
      "outputs": [
        {
          "internalType": "string",
          "name": "category",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "allowedCollection",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "iNftContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "internalType": "struct TradeableShares.SharesSubject",
          "name": "_asset",
          "type": "tuple"
        }
      ],
      "name": "isAssetLinked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "internalType": "struct TradeableShares.SharesSubject",
          "name": "_dpt",
          "type": "tuple"
        }
      ],
      "name": "isDPTRegistered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "required",
          "type": "uint256"
        }
      ],
      "name": "isFeatureEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "required",
          "type": "uint256"
        }
      ],
      "name": "isOperatorInRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_podId",
          "type": "uint256"
        }
      ],
      "name": "isPodWhitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "required",
          "type": "uint256"
        }
      ],
      "name": "isSenderInRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "internalType": "struct TradeableShares.SharesSubject",
          "name": "_asset",
          "type": "tuple"
        },
        {
          "internalType": "uint16",
          "name": "_hiveId",
          "type": "uint16"
        },
        {
          "internalType": "string",
          "name": "_categoryName",
          "type": "string"
        }
      ],
      "name": "linkAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "internalType": "struct TradeableShares.SharesSubject",
          "name": "_asset",
          "type": "tuple"
        },
        {
          "internalType": "uint16",
          "name": "_hiveId",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_categoryId",
          "type": "uint16"
        }
      ],
      "name": "linkAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "personalityContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "podStakingContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_personalityContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_iNftContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_podStakingContract",
          "type": "address"
        }
      ],
      "name": "postConstruct",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "internalType": "struct TradeableShares.SharesSubject",
          "name": "_dpt",
          "type": "tuple"
        }
      ],
      "name": "registerAsDPT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_hiveId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        }
      ],
      "name": "setHiveTokenAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalNumOfAssetsLinked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "internalType": "struct TradeableShares.SharesSubject",
          "name": "_asset",
          "type": "tuple"
        }
      ],
      "name": "unlinkAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mask",
          "type": "uint256"
        }
      ],
      "name": "updateFeatures",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_hiveId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_hiveURI",
          "type": "string"
        }
      ],
      "name": "updateHiveURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "role",
          "type": "uint256"
        }
      ],
      "name": "updateRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_pods",
          "type": "uint256[]"
        }
      ],
      "name": "whitelistPods",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x52bb9d9e1c5a538a0cfb3d52a01803710be06944ed2809f683e588bb70291107",
  "receipt": {
    "to": null,
    "from": "0x03BfCeBa2A7a2e2c195Cc55515457990565f24Ba",
    "contractAddress": "0x9D30e52C1290Ee3348be1487127156a1136A57C7",
    "transactionIndex": 6,
    "gasUsed": "3991829",
    "logsBloom": "0x
    "blockHash": "0x87c970a45ce587e23c476e7a600fee79eca1fb1911fe11ca9867c78a8452909f",
    "transactionHash": "0x52bb9d9e1c5a538a0cfb3d52a01803710be06944ed2809f683e588bb70291107",
    "logs": [],
    "blockNumber": 10917186,
    "cumulativeGasUsed": "5291562",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "650f31576ff89dd751dbf507fd3152ca",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"hiveId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"category\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"AssetLinked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"hiveId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"category\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"AssetUnlinked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"categoryIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"allowedCollection\",\"type\":\"address\"}],\"name\":\"CategoryAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dptAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dptId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"DPTRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"hiveId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"HiveCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"hiveId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"HiveTokenUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"hiveId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"hiveURI\",\"type\":\"string\"}],\"name\":\"HiveUriUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"NonceUsed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"podId\",\"type\":\"uint256\"}],\"name\":\"PodDelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"podId\",\"type\":\"uint256\"}],\"name\":\"PodWhitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requested\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assigned\",\"type\":\"uint256\"}],\"name\":\"RoleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FEATURE_ALLOW_ASSET_LINKING\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEATURE_ALLOW_ASSET_UNLINKING\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEATURE_ALLOW_HIVE_CREATION\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROLE_ACCESS_MANAGER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROLE_CATEGORY_MANAGER\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROLE_DPT_REGISTRAR\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROLE_HIVE_TOKEN_MANAGER\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROLE_POD_WHITELIST_MANAGER\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROLE_UPGRADE_MANAGER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_categoryName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_allowedCollection\",\"type\":\"address\"}],\"name\":\"addCategory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"assetCatalogue\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_podId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_hiveURI\",\"type\":\"string\"}],\"name\":\"createHive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_pods\",\"type\":\"uint256[]\"}],\"name\":\"delistPods\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct TradeableShares.SharesSubject\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"dptOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"validFromTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiresAtTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"struct HiveRegistry.RegisterAsDPTRequest\",\"name\":\"_req\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"eip712RegisterAsDPT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_issuer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"fastForwardTheNonce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"features\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_category\",\"type\":\"string\"}],\"name\":\"getCategoryIndex\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"categoryId\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_hiveId\",\"type\":\"uint256\"}],\"name\":\"getHiveCreatorPod\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct TradeableShares.SharesSubject\",\"name\":\"pod\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_hiveId\",\"type\":\"uint16\"}],\"name\":\"getHiveDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct TradeableShares.SharesSubject\",\"name\":\"pod\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"hiveOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"hiveTokenAddr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"hiveUri\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_podId\",\"type\":\"uint256\"}],\"name\":\"getHiveId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"hiveId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_hiveId\",\"type\":\"uint256\"}],\"name\":\"getHiveToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_hiveId\",\"type\":\"uint16\"}],\"name\":\"getHiveURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"hiveUri\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct TradeableShares.SharesSubject\",\"name\":\"_asset\",\"type\":\"tuple\"}],\"name\":\"getLinkedAssetDetails\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"hiveId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"categoryId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"clientAddress\",\"type\":\"address\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_hiveId\",\"type\":\"uint16\"}],\"name\":\"getNumOfAssetsLinkedWithHive\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"numOfAssets\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_hiveId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_category\",\"type\":\"uint16\"}],\"name\":\"getNumOfAssetsLinkedWithHive\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"numOfAssets\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumOfGlobalCategories\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"noOfCategories\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumOfHives\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"noOfHives\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"getRole\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"globalCategories\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"allowedCollection\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"iNftContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct TradeableShares.SharesSubject\",\"name\":\"_asset\",\"type\":\"tuple\"}],\"name\":\"isAssetLinked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct TradeableShares.SharesSubject\",\"name\":\"_dpt\",\"type\":\"tuple\"}],\"name\":\"isDPTRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"isFeatureEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"isOperatorInRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_podId\",\"type\":\"uint256\"}],\"name\":\"isPodWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"isSenderInRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct TradeableShares.SharesSubject\",\"name\":\"_asset\",\"type\":\"tuple\"},{\"internalType\":\"uint16\",\"name\":\"_hiveId\",\"type\":\"uint16\"},{\"internalType\":\"string\",\"name\":\"_categoryName\",\"type\":\"string\"}],\"name\":\"linkAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct TradeableShares.SharesSubject\",\"name\":\"_asset\",\"type\":\"tuple\"},{\"internalType\":\"uint16\",\"name\":\"_hiveId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_categoryId\",\"type\":\"uint16\"}],\"name\":\"linkAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"personalityContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"podStakingContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_personalityContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_iNftContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_podStakingContract\",\"type\":\"address\"}],\"name\":\"postConstruct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct TradeableShares.SharesSubject\",\"name\":\"_dpt\",\"type\":\"tuple\"}],\"name\":\"registerAsDPT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_hiveId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"setHiveTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalNumOfAssetsLinked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct TradeableShares.SharesSubject\",\"name\":\"_asset\",\"type\":\"tuple\"}],\"name\":\"unlinkAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mask\",\"type\":\"uint256\"}],\"name\":\"updateFeatures\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_hiveId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_hiveURI\",\"type\":\"string\"}],\"name\":\"updateHiveURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"role\",\"type\":\"uint256\"}],\"name\":\"updateRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_pods\",\"type\":\"uint256[]\"}],\"name\":\"whitelistPods\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addCategory(string,address)\":{\"params\":{\"allowedCollection\":\"nft collection linking permitted within specific category.      If allowedCollection is ZERO_ADDRESS, any NFT collection may      link within that category.\",\"categoryName\":\"category name\"}},\"createHive(uint256,string)\":{\"params\":{\"hiveURI\":\"hive URI pointing to some off-chain resource\",\"podId\":\"Level 5 AI PodId\"}},\"delistPods(uint256[])\":{\"params\":{\"podIds\":\"array of AI Pod IDs do delist\"}},\"eip712RegisterAsDPT(((address,uint256),address,uint256,uint256,uint256),bytes)\":{\"params\":{\"req\":\"The RegisterAssetRequest struct containing request details.\",\"signature\":\"The signature of the request.\"}},\"fastForwardTheNonce(address,uint256)\":{\"details\":\"Implementation must not allow to decrease the nonce, only increasing (rewinding)      must be possible\",\"params\":{\"_issuer\":\"the issuer address to rewind the nonce for\",\"_nonce\":\"the nonce value to rewind to\"}},\"features()\":{\"details\":\"Effectively reads userRoles role for the contract itself\",\"returns\":{\"_0\":\"256-bit bitmask of the features enabled\"}},\"getCategoryIndex(string)\":{\"params\":{\"categoryName\":\"category name\"},\"returns\":{\"categoryId\":\"category ID (index)\"}},\"getHiveCreatorPod(uint256)\":{\"params\":{\"hiveId\":\"ID of the Hive to query for\"},\"returns\":{\"pod\":\"AI-pod (ERC721 address, ERC721 ID)\"}},\"getHiveDetails(uint16)\":{\"params\":{\"hiveId\":\"ID of the Hive to query for\"},\"returns\":{\"hiveOwner\":\"owner of AI-Pod cum hive\",\"hiveTokenAddr\":\"address of the ERC20 token representing the economy of the Hive\",\"hiveUri\":\"Hive metadata URL\",\"pod\":\"AI-Pod details asossiated with hive\"}},\"getHiveId(uint256)\":{\"params\":{\"podId\":\"AI Pod ID\"},\"returns\":{\"hiveId\":\"Hive ID\"}},\"getHiveToken(uint256)\":{\"params\":{\"hiveId\":\"ID of the Hive to query for\"},\"returns\":{\"tokenAddr\":\"address of the ERC20 token representing the economy of the Hive\"}},\"getHiveURI(uint16)\":{\"params\":{\"hiveId\":\"ID of the Hive to query for\"},\"returns\":{\"hiveUri\":\"Hive URL\"}},\"getImplementation()\":{\"returns\":{\"_0\":\"the current implementation address\"}},\"getLinkedAssetDetails((address,uint256))\":{\"details\":\"Zero return values indicate the asset is not linked\",\"params\":{\"asset\":\"an NFT (ERC721 address, ERC721 ID)\"},\"returns\":{\"category\":\"category where the asset is registered within a Hive in string value\",\"categoryId\":\"category ID where the asset is registered within a Hive, or zero if not linked\",\"hiveId\":\"Hive ID where asset is linked to, zero if it is not linked\"}},\"getNonce(address)\":{\"params\":{\"client\":\"the client address to get the nonce for\"},\"returns\":{\"nonce\":\"current (unused) nonce; incremented by one after      each successful execution of the `registerDPTRequest` function\"}},\"getNumOfAssetsLinkedWithHive(uint16)\":{\"params\":{\"hiveId\":\"Hive ID to query\"},\"returns\":{\"numOfAssets\":\"number of assets linked with the Hive\"}},\"getNumOfAssetsLinkedWithHive(uint16,uint16)\":{\"params\":{\"categoryId\":\"category ID (index)\",\"hiveId\":\"Hive ID to query\"},\"returns\":{\"numOfAssets\":\"number of assets linked with the Hive\"}},\"getNumOfGlobalCategories()\":{\"returns\":{\"noOfCategories\":\"Total number of categories\"}},\"getNumOfHives()\":{\"returns\":{\"noOfHives\":\"Total number of Hives\"}},\"getRole(address)\":{\"details\":\"Having a simple getter instead of making the mapping public      allows enforcing the encapsulation of the mapping and protects from      writing to it directly in the inheriting smart contracts\",\"params\":{\"operator\":\"address of a user to read permissions for,      or self address to read global features of the smart contract\"}},\"isAssetLinked((address,uint256))\":{\"params\":{\"asset\":\"an NFT (ERC721 address, ERC721 ID)\"},\"returns\":{\"status\":\"true if asset is linked, false otherwise\"}},\"isDPTRegistered((address,uint256))\":{\"params\":{\"_dpt\":\"The TradeableShares.SharesSubject struct representing the DPT.\"},\"returns\":{\"status\":\"True if the DPT is registered, false otherwise.\"}},\"isFeatureEnabled(uint256)\":{\"params\":{\"required\":\"set of features to check against\"},\"returns\":{\"_0\":\"true if all the features requested are enabled, false otherwise\"}},\"isOperatorInRole(address,uint256)\":{\"params\":{\"operator\":\"address of the user to check role for\",\"required\":\"set of permissions (role) to check\"},\"returns\":{\"_0\":\"true if all the permissions requested are enabled, false otherwise\"}},\"isPodWhitelisted(uint256)\":{\"params\":{\"podId\":\"AI Pod ID to query\"}},\"isSenderInRole(uint256)\":{\"details\":\"Used in smart contracts only. Off-chain clients should use `isOperatorInRole`.\",\"params\":{\"required\":\"set of permissions (role) to check against\"},\"returns\":{\"_0\":\"true if all the permissions requested are enabled, false otherwise\"}},\"linkAsset((address,uint256),uint16,string)\":{\"params\":{\"asset\":\"an NFT (ERC721 address, ERC721 ID)\",\"categoryName\":\"asset category name within the Hive\",\"hiveId\":\"ID of the hive to join\"}},\"linkAsset((address,uint256),uint16,uint16)\":{\"params\":{\"asset\":\"an NFT (ERC721 address, ERC721 ID)\",\"categoryId\":\"asset category ID within the Hive\",\"hiveId\":\"ID of the hive to join\"}},\"postConstruct(address,address,address)\":{\"details\":\"\\\"Constructor replacement\\\" for upgradeable, must be execute immediately after proxy deployment      see https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable#initializers\"},\"registerAsDPT((address,uint256))\":{\"params\":{\"_dpt\":\"The TradeableShares.SharesSubject struct representing the DPT.\"}},\"setHiveTokenAddress(uint256,address)\":{\"params\":{\"hiveId\":\"Hive ID\",\"tokenAddress\":\"ERC20 token address to set\"}},\"unlinkAsset((address,uint256))\":{\"params\":{\"asset\":\"an NFT (ERC721 address, ERC721 ID)\"}},\"updateFeatures(uint256)\":{\"details\":\"Requires transaction sender to have `ROLE_ACCESS_MANAGER` permissionFunction is left for backward compatibility with older versions\",\"params\":{\"_mask\":\"bitmask representing a set of features to enable/disable\"}},\"updateHiveURI(uint256,string)\":{\"params\":{\"hiveId\":\"Hive ID\",\"hiveURI\":\"Hive URI\"}},\"updateRole(address,uint256)\":{\"details\":\"Setting role to zero is equivalent to removing an all permissionsSetting role to `FULL_PRIVILEGES_MASK` is equivalent to      copying senders' permissions (role) to the userRequires transaction sender to have `ROLE_ACCESS_MANAGER` permission\",\"params\":{\"operator\":\"address of a user to alter permissions for,       or self address to alter global features of the smart contract\",\"role\":\"bitmask representing a set of permissions to      enable/disable for a user specified\"}},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"whitelistPods(uint256[])\":{\"params\":{\"podIds\":\"array of level 5 AI Pod IDs\"}}},\"stateVariables\":{\"FEATURE_ALLOW_ASSET_LINKING\":{\"details\":\"Feature FEATURE_ALLOW_ASSET_LINKING must be enabled      as a prerequisite for `linkAsset()` function to succeed\"},\"FEATURE_ALLOW_ASSET_UNLINKING\":{\"details\":\"Feature FEATURE_ALLOW_ASSET_UNLINKING must be enabled      as a prerequisite for `unlinkAsset()` function to succeed\"},\"FEATURE_ALLOW_HIVE_CREATION\":{\"details\":\"Feature FEATURE_ALLOW_HIVE_CREATION must be enabled      as a prerequisite for `launchHive()` function to succeed\"},\"ROLE_CATEGORY_MANAGER\":{\"details\":\"Role ROLE_CATEGORY_MANAGER is required to execute `addCategory` functions\"},\"ROLE_DPT_REGISTRAR\":{\"details\":\"Role ROLE_SHARES_REGISTRAR is required to execute `registerDPTRequest` functions\"},\"ROLE_HIVE_TOKEN_MANAGER\":{\"details\":\"Role ROLE_HIVE_TOKEN_MANAGER is required to execute `updateHiveToken` functions\"},\"ROLE_POD_WHITELIST_MANAGER\":{\"details\":\"Role ROLE_POD_WHITELIST_MANAGER is required to execute `whitelistPods` & 'delistPods' functions\"},\"assetCatalogue\":{\"details\":\"Keeps track of the bound assets to the Hive as a categories catalog      Maps Hive ID => Category ID => Enumerable of the linked assets\"},\"categoryIndex\":{\"details\":\"Keeps track of the linked assets categories      Maps Category Name => category ID / Index\"},\"dptLinkStatus\":{\"details\":\"Mapping to store the linking status of DPTs identified by their bytes32 representation.\"},\"globalCategories\":{\"details\":\"Enumerable of all categories. Category index in the array is a Category ID\"},\"hiveIndex\":{\"details\":\"Keeps track of which AI Pods created which Hives      Maps keccak256(AI Pod address, ID) => Hive ID\"},\"hiveToken\":{\"details\":\"Keeps track of the Hives' ERC20 economy tokens      Maps Hive ID => Hive economy ERC20 token address\"},\"hiveURI\":{\"details\":\"Keeps track of the Hive URIs      Maps Hive ID => Hive URI\"},\"hives\":{\"details\":\"Enumerable of all the Hives. Hive index in the array is a Hive ID.\"},\"iNftContract\":{\"details\":\"iNFT Linker contract defined by `iNftContract` (effectively immutable)\"},\"linkedAssets\":{\"details\":\"Keeps track of the assets linked to the Hive      Maps an asset keccak256(ERC721 address, ID) => (Hive ID, Category ID, asset Index in `assetBindings`)\"},\"nonces\":{\"details\":\"Keeps track of the used nonces for every possible issuer      Maps address => number of used nonces\"},\"personalityContract\":{\"details\":\"AI Personality contract defined by `personalityContract` (effectively immutable)\"},\"podStakingContract\":{\"details\":\"AI Personality staking contract defined by `podStakingContract` (effectively immutable)\"},\"whitelistedPods\":{\"details\":\"Keeps track of Level 5 AI Pods      maps AI Pod ID => is Level 5?\"}},\"title\":\"Hive Registry (Implementation, V1)\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"FEATURE_ALLOW_ASSET_LINKING()\":{\"notice\":\"Enables asset linking with hives\"},\"FEATURE_ALLOW_ASSET_UNLINKING()\":{\"notice\":\"Enables asset unlink from hives\"},\"FEATURE_ALLOW_HIVE_CREATION()\":{\"notice\":\"Enables hive creation\"},\"ROLE_ACCESS_MANAGER()\":{\"notice\":\"Access manager is responsible for assigning the roles to users,      enabling/disabling global features of the smart contractAccess manager can add, remove and update user roles,      remove and update global features\"},\"ROLE_CATEGORY_MANAGER()\":{\"notice\":\"allows to add new asset global category to hive registry\"},\"ROLE_DPT_REGISTRAR()\":{\"notice\":\"registers DPTs with Hive registry on other behalf using meta-tx\"},\"ROLE_HIVE_TOKEN_MANAGER()\":{\"notice\":\"allows to set ERC20 token address associated with particular hive\"},\"ROLE_POD_WHITELIST_MANAGER()\":{\"notice\":\"allows to update pods of whitelisted list which are allowed to create hive\"},\"ROLE_UPGRADE_MANAGER()\":{\"notice\":\"Upgrade manager is responsible for smart contract upgrades,      see https://docs.openzeppelin.com/contracts/4.x/api/proxy#UUPSUpgradeable      see https://docs.openzeppelin.com/contracts/4.x/upgradeable\"},\"addCategory(string,address)\":{\"notice\":\"Add global category and assign it an index\"},\"createHive(uint256,string)\":{\"notice\":\"Creates a Hive. Available only for level 5 AI Pods\"},\"delistPods(uint256[])\":{\"notice\":\"Blacklists the AI Pods\"},\"eip712RegisterAsDPT(((address,uint256),address,uint256,uint256,uint256),bytes)\":{\"notice\":\"Registers an NFT as DPT by the request with a valid signature.\"},\"fastForwardTheNonce(address,uint256)\":{\"notice\":\"Fast forward the nonce for the issuer specified, used to      discard one or more signed requests to `registerDPTRequest`\"},\"features()\":{\"notice\":\"Retrieves globally set of features enabled\"},\"getCategoryIndex(string)\":{\"notice\":\"Resolve category ID (index) by its name\"},\"getHiveCreatorPod(uint256)\":{\"notice\":\"Finds which AI Pod created the Hive\"},\"getHiveDetails(uint16)\":{\"notice\":\"Finds the all details associated with Hive\"},\"getHiveId(uint256)\":{\"notice\":\"Resolve Hive ID where the given asset is linked; an asset can also be an AI Pod      which created the Hive\"},\"getHiveToken(uint256)\":{\"notice\":\"Finds the economy ERC20 token address assigned to the Hive\"},\"getHiveURI(uint16)\":{\"notice\":\"Finds the URI of the given Hive\"},\"getImplementation()\":{\"notice\":\"Returns an address of the implementation smart contract,      see ERC1967Upgrade._getImplementation()\"},\"getLinkedAssetDetails((address,uint256))\":{\"notice\":\"Gets the info of the linked asset, the hiveID and categoryId where it is linked to\"},\"getNonce(address)\":{\"notice\":\"Gets current (unused) nonce for the given client address;      unused nonce is required to build the RegisterDPTRequest and sign it      nonces increment by one after each use\"},\"getNumOfAssetsLinkedWithHive(uint16)\":{\"notice\":\"How many assets are linked with the given Hive\"},\"getNumOfAssetsLinkedWithHive(uint16,uint16)\":{\"notice\":\"How many assets are linked with the given Hive in the give category\"},\"getNumOfGlobalCategories()\":{\"notice\":\"Total number of asset categories known to the Hives\"},\"getNumOfHives()\":{\"notice\":\"Total number of Hives registered within the registry\"},\"getRole(address)\":{\"notice\":\"Reads the permissions (role) for a given user from the `userRoles` mapping      (privileged addresses with defined roles/permissions)In the context of ERC20/ERC721 tokens these can be permissions to      allow minting or burning tokens, transferring on behalf and so on\"},\"isAssetLinked((address,uint256))\":{\"notice\":\"Checks whether asset is linked to any Hive\"},\"isDPTRegistered((address,uint256))\":{\"notice\":\"Checks whether a DPT is already registered.\"},\"isFeatureEnabled(uint256)\":{\"notice\":\"Checks if requested set of features is enabled globally on the contract\"},\"isOperatorInRole(address,uint256)\":{\"notice\":\"Checks if operator has all the permissions (role) required\"},\"isPodWhitelisted(uint256)\":{\"notice\":\"Checks whether the give AI Pod is whitelisted, that is a Level 5      pod capable of creating a Hive (or already having a Hive)\"},\"isSenderInRole(uint256)\":{\"notice\":\"Checks if transaction sender `msg.sender` has all the permissions required\"},\"linkAsset((address,uint256),uint16,string)\":{\"notice\":\"Links an asset (NFT) to the Hive under certain category\"},\"linkAsset((address,uint256),uint16,uint16)\":{\"notice\":\"Links an asset (NFT) to the Hive under certain category\"},\"registerAsDPT((address,uint256))\":{\"notice\":\"Registers an NFT as DPT directly by the authorizer.\"},\"setHiveTokenAddress(uint256,address)\":{\"notice\":\"Sets ERC20 Hive economy token address; can be done only once\"},\"totalNumOfAssetsLinked()\":{\"notice\":\"Total number of assets linked (counter)\"},\"unlinkAsset((address,uint256))\":{\"notice\":\"Unlinks an asset (NFT) from the Hive\"},\"updateFeatures(uint256)\":{\"notice\":\"Updates set of the globally enabled features (`features`),      taking into account sender's permissions\"},\"updateHiveURI(uint256,string)\":{\"notice\":\"Updates Hive URI\"},\"updateRole(address,uint256)\":{\"notice\":\"Updates set of permissions (role) for a given user,      taking into account sender's permissions.\"},\"whitelistPods(uint256[])\":{\"notice\":\"Whitelists the AI Pods, that is marks podIds as level 5 pods,      meaning these pods become capable of launching Hives\"}},\"notice\":\"see HiveRegistry\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/bonding_curves/HiveRegistryV1.sol\":\"HiveRegistryV1\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n        __ERC1967Upgrade_init_unchained();\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlotUpgradeable.BooleanSlot storage rollbackTesting = StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            _functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\\"upgradeTo(address)\\\", oldImplementation)\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _upgradeTo(newImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xba3e051005a0b7f77c465dbcfe6366ce6a72e3845028277e1f794e5e8864e017\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n        __ERC1967Upgrade_init_unchained();\\n        __UUPSUpgradeable_init_unchained();\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xed65883d4af8d00c76ff9f1b7758c5d8ac4ab82da60f9743c74d31b754b06bc0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x422c3d27d0d5681cea93acbb0dcb175fa5b461b5b7731da7ff77e51f0f0174c7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x1762ac67d230279d7fb183567ce22bbe202054ce08f94224d8794f9d19546d51\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSAUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712Upgradeable is Initializable {\\n    /* solhint-disable var-name-mixedcase */\\n    bytes32 private _HASHED_NAME;\\n    bytes32 private _HASHED_VERSION;\\n    bytes32 private constant _TYPE_HASH = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\\n        return _HASHED_NAME;\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\\n        return _HASHED_VERSION;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x92e61d8dd5ba90b513769c06da820e0a8f5d93810a9c6d5207308af345815011\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/bonding_curves/BondingCurve.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title Bonding Curve\\n *\\n * @notice A friend.tech-like bonding curve definition\\n *\\n * @notice Bonding curve defines the price of the smallest unit of the asset as a function\\n *      of the asset supply\\n */\\ninterface BondingCurve {\\n\\t/**\\n\\t * @notice Bonding curve function definition. The function calculating the price\\n\\t *      of the `amount` of shares given the current total supply `supply`\\n\\t *\\n\\t * @param supply total shares supply\\n\\t * @param amount number of shares to buy/sell\\n\\t * @return the price of the shares (all `amount` amount)\\n\\t */\\n\\tfunction getPrice(uint256 supply, uint256 amount) external pure returns(uint256);\\n}\\n\",\"keccak256\":\"0x5c8602275460cf842e4804ce37f8b847857b32414cd535736857bced13c2cbe2\",\"license\":\"MIT\"},\"contracts/bonding_curves/HiveRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./TradeableShares.sol\\\";\\n\\n/**\\n * @title Hive Registry (Interface)\\n *\\n * @notice Hive Registry keeps track of and manages the Hives\\n *\\n * @notice The Hive is a record in the `HiveRegistry` smart contract; the Hive:\\n *      1) is bound to one (and only one) AI Pod,\\n *      2) has one (and only one) ERC20 token enabling the Hive economy,\\n *      3) has one and only one hiveURI pointing to some off-chain resource with the information about the Hive\\n *         (possibly a website),\\n *      4) has any number of NFTs (assets) bound to it (pre-sorted by category), and each NFT asset\\n *         * has one (and only one) category within the Hive;\\n *           * category examples: GPU Provider, Dataset Provider, AI Model Provider, etc.\\n *         * cannot join other hives (can only join 1 Hive at a time)\\n *         * NFT which created a Hive cannot join the same Hive, or any other Hive\\n *\\n * @dev Hive Registry provides functions to register Hive, register DPTs within the Hive, etc.\\n */\\ninterface HiveRegistry {\\n\\t/**\\n\\t * @dev RegisterAsDPTRequest represents a EIP712 signed request to to register an NFT as DPT within a Hive\\n\\t * @dev See `registerAsDPT()`\\n\\t */\\n\\tstruct RegisterAsDPTRequest {\\n\\t\\t/// @dev NFT/DPT details (ERC721 address, ERC721 ID)\\n\\t\\tTradeableShares.SharesSubject asset;\\n\\t\\t// @dev NFT/DPT owner address\\n\\t\\taddress dptOwner;\\n\\t\\t/// @dev unix timestamp when the request becomes valid\\n\\t\\tuint256 validFromTimestamp;\\n\\t\\t/// @dev unix timestamp when the request expires (becomes invalid)\\n\\t\\tuint256 expiresAtTimestamp;\\n\\t\\t/// @dev nonce of the request (sequential number, increased by one)\\n\\t\\tuint256 nonce;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Where an asset is linked:\\n\\t *      - which hive (ID)\\n\\t *      - under what category (ID)\\n\\t *      - for enumeration support - asset index in the collections\\n\\t */\\n\\tstruct AssetLinkDetails {\\n\\t\\t/// @dev Hive Id to which asset is linked\\n\\t\\tuint16 hiveId;\\n\\t\\t/// @dev category under which asset is linked\\n\\t\\tuint16 categoryId;\\n\\t\\t/// @dev Index of an asset within the linked asset array\\n\\t\\tuint224 assetIndex;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Category Info:\\n\\t *      - category type in string value\\n\\t *      - nft collection address which are allowed to link under\\n\\t *        particular category, if set as ZERO address then any nft\\n\\t *        collection can link.\\n\\t */\\n\\tstruct CategoryInfo {\\n\\t\\t/// @dev categoryType in string format\\n\\t\\tstring category;\\n\\t\\t/// @dev nft collection allowed to link under particular category\\n\\t\\taddress allowedCollection;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Fired in register()\\n\\t *\\n\\t * @param by an address requested for DPT registration\\n\\t * @param dptAddress DPT token address\\n\\t * @param dptId DPT token ID\\n\\t * @param timestamp time at which DTP is registered\\n\\t */\\n\\tevent DPTRegistered(address indexed by, address indexed dptAddress, uint256 indexed dptId, uint256 timestamp);\\n\\n\\t/**\\n\\t * @dev Fired in `register()` and in `fastForward()`\\n\\t */\\n\\tevent NonceUsed(address indexed issuer, uint256 nonce);\\n\\n\\t/**\\n\\t * @dev Fired in whitelistPods()\\n\\t *\\n\\t * @param by an address who execute transaction\\n\\t * @param podId POD token ID\\n\\t */\\n\\tevent PodWhitelisted(address indexed by, uint256 podId);\\n\\n\\t/**\\n\\t * @dev Fired in delistPods()\\n\\t *\\n\\t * @param by an address who execute transaction\\n\\t * @param podId POD token ID\\n\\t */\\n\\tevent PodDelisted(address indexed by, uint256 podId);\\n\\n\\t/**\\n\\t * @dev Fired in createHive()\\n\\t *\\n\\t * @param by an address who execute transaction\\n\\t * @param hiveId an new created hive ID\\n\\t * @param tokenAddress pod token address\\n\\t * @param tokenId pod token ID\\n\\t * @param timestamp time at which hive is created\\n\\t */\\n\\tevent HiveCreated(address indexed by, uint256 indexed hiveId, address tokenAddress, uint256 indexed tokenId, uint256 timestamp);\\n\\n\\t/**\\n\\t * @dev Fired in setHiveTokenAddress()\\n\\t *\\n\\t * @param by an address who execute transaction\\n\\t * @param hiveId an hive ID\\n\\t * @param tokenAddress ERC20 token against hive\\n\\t */\\n\\tevent HiveTokenUpdated(address indexed by, uint256 indexed hiveId, address indexed tokenAddress);\\n\\n\\t/**\\n\\t * @dev Fired in updateHiveURI()\\n\\t *\\n\\t * @param by an address who execute transaction\\n\\t * @param hiveId an hive ID\\n\\t * @param hiveURI hive metadata URI\\n\\t */\\n\\tevent HiveUriUpdated(address indexed by, uint256 indexed hiveId, string hiveURI);\\n\\n\\t/**\\n\\t * @dev Fired in addCategory()\\n\\t *\\n\\t * @param by an address who execute transaction\\n\\t * @param categoryIndex an global category index\\n\\t * @param category category in string\\n\\t * @param allowedCollection nft collection address\\n\\t */\\n\\tevent CategoryAdded(address indexed by, uint256 indexed categoryIndex, string category, address allowedCollection);\\n\\n\\t/**\\n\\t * @dev Fired in linkAsset()\\n\\t *\\n\\t * @param by an address who execute transaction\\n\\t * @param tokenAddress asset token address\\n\\t * @param tokenId asset token ID\\n\\t * @param hiveId hive ID\\n\\t * @param category category index\\n\\t * @param timestamp time at which asset is linked\\n\\t */\\n\\tevent AssetLinked(address by, address indexed tokenAddress, uint256 indexed tokenId, uint16 indexed hiveId, uint16 category, uint256 timestamp);\\n\\n\\t/**\\n\\t * @dev Fired in unlinkAsset()\\n\\t *\\n\\t * @param by an address who execute transaction\\n\\t * @param tokenAddress asset token address\\n\\t * @param tokenId asset token ID\\n\\t * @param hiveId hive ID\\n\\t * @param category category index\\n\\t * @param timestamp time at which asset is unlinked\\n\\t */\\n\\tevent AssetUnlinked(address by, address indexed tokenAddress, uint256 indexed tokenId, uint16 indexed hiveId, uint16 category, uint256 timestamp);\\n\\n\\t/**\\n\\t * @notice Registers an NFT as DPT by the request with a valid signature.\\n\\t *\\n\\t * @param req The RegisterAssetRequest struct containing request details.\\n\\t * @param signature The signature of the request.\\n\\t */\\n\\tfunction eip712RegisterAsDPT(RegisterAsDPTRequest calldata req, bytes calldata signature) external;\\n\\n\\t/**\\n\\t * @notice Registers an NFT as DPT directly by the authorizer.\\n\\t *\\n\\t * @param _dpt The TradeableShares.SharesSubject struct representing the DPT.\\n\\t */\\n\\tfunction registerAsDPT(TradeableShares.SharesSubject calldata _dpt) external;\\n\\n\\t/**\\n\\t * @notice Fast forward the nonce for the issuer specified, used to\\n\\t *      discard one or more signed requests to `registerDPTRequest`\\n\\t *\\n\\t * @dev Implementation must not allow to decrease the nonce, only increasing (rewinding)\\n\\t *      must be possible\\n\\t *\\n\\t * @param _issuer the issuer address to rewind the nonce for\\n\\t * @param _nonce the nonce value to rewind to\\n\\t */\\n\\tfunction fastForwardTheNonce(address _issuer, uint256 _nonce) external;\\n\\n\\t/**\\n\\t * @notice Creates a Hive. Available only for level 5 AI Pods\\n\\t *\\n\\t * @param podId Level 5 AI PodId\\n\\t * @param hiveURI hive URI pointing to some off-chain resource\\n\\t */\\n\\tfunction createHive(uint256 podId, string calldata hiveURI) external;\\n\\n\\t/**\\n\\t * @notice Links an asset (NFT) to the Hive under certain category\\n\\t *\\n\\t * @param asset an NFT (ERC721 address, ERC721 ID)\\n\\t * @param hiveId ID of the hive to join\\n\\t * @param categoryName asset category name within the Hive\\n\\t */\\n\\tfunction linkAsset(TradeableShares.SharesSubject calldata asset, uint16 hiveId, string calldata categoryName) external;\\n\\n\\t/**\\n\\t * @notice Links an asset (NFT) to the Hive under certain category\\n\\t *\\n\\t * @param asset an NFT (ERC721 address, ERC721 ID)\\n\\t * @param hiveId ID of the hive to join\\n\\t * @param categoryId asset category ID within the Hive\\n\\t */\\n\\tfunction linkAsset(TradeableShares.SharesSubject calldata asset, uint16 hiveId, uint16 categoryId) external;\\n\\n\\t/**\\n\\t * @notice Unlinks an asset (NFT) from the Hive\\n\\t *\\n\\t * @param asset an NFT (ERC721 address, ERC721 ID)\\n\\t */\\n\\tfunction unlinkAsset(TradeableShares.SharesSubject calldata asset) external;\\n\\n\\t/**\\n\\t * @notice Sets ERC20 Hive economy token address; can be done only once\\n\\t *\\n\\t * @param hiveId Hive ID\\n\\t * @param tokenAddress ERC20 token address to set\\n\\t */\\n\\tfunction setHiveTokenAddress(uint256 hiveId, address tokenAddress) external;\\n\\n\\t/**\\n\\t * @notice Updates Hive URI\\n\\t *\\n\\t * @param hiveId Hive ID\\n\\t * @param hiveURI Hive URI\\n\\t */\\n\\tfunction updateHiveURI(uint256 hiveId, string calldata hiveURI) external;\\n\\n\\t/**\\n\\t * @notice Add global category and assign it an index\\n\\t *\\n\\t * @param categoryName category name\\n\\t * @param allowedCollection nft collection linking permitted within specific category.\\n\\t *      If allowedCollection is ZERO_ADDRESS, any NFT collection may\\n\\t *      link within that category.\\n\\t */\\n\\tfunction addCategory(string calldata categoryName, address allowedCollection) external;\\n\\n\\t/**\\n\\t * @notice Whitelists the AI Pods, that is marks podIds as level 5 pods,\\n\\t *      meaning these pods become capable of launching Hives\\n\\t *\\n\\t * @param podIds array of level 5 AI Pod IDs\\n\\t */\\n\\tfunction whitelistPods(uint256[] calldata podIds) external;\\n\\n\\t/**\\n\\t * @notice Blacklists the AI Pods\\n\\t *\\n\\t * @param podIds array of AI Pod IDs do delist\\n\\t */\\n\\tfunction delistPods(uint256[] calldata podIds) external;\\n\\n\\t/**\\n\\t * @notice Checks whether the give AI Pod is whitelisted, that is a Level 5\\n\\t *      pod capable of creating a Hive (or already having a Hive)\\n\\t *\\n\\t * @param podId AI Pod ID to query\\n\\t */\\n\\tfunction isPodWhitelisted(uint256 podId) external view returns (bool);\\n\\n\\t/**\\n\\t * @notice Gets the info of the linked asset, the hiveID and categoryId where it is linked to\\n\\t *\\n\\t * @dev Zero return values indicate the asset is not linked\\n\\t *\\n\\t * @param asset an NFT (ERC721 address, ERC721 ID)\\n\\t * @return hiveId Hive ID where asset is linked to, zero if it is not linked\\n\\t * @return categoryId category ID where the asset is registered within a Hive, or zero if not linked\\n\\t * @return categoryName category where the asset is registered within a Hive in string value\\n\\t */\\n\\tfunction getLinkedAssetDetails(TradeableShares.SharesSubject calldata asset) external view returns (\\n\\t\\tuint256 hiveId,\\n\\t\\tuint256 categoryId,\\n\\t\\tstring memory categoryName\\n\\t);\\n\\n\\t/**\\n\\t * @notice Checks whether asset is linked to any Hive\\n\\t *\\n\\t * @param asset an NFT (ERC721 address, ERC721 ID)\\n\\t * @return true if asset is linked, false otherwise\\n\\t */\\n\\tfunction isAssetLinked(TradeableShares.SharesSubject calldata asset) external view returns (bool);\\n\\n\\t/**\\n\\t * @notice How many assets are linked with the given Hive\\n\\t *\\n\\t * @param hiveId Hive ID to query\\n\\t * @return number of assets linked with the Hive\\n\\t */\\n\\tfunction getNumOfAssetsLinkedWithHive(uint16 hiveId) external view returns (uint256);\\n\\n\\t/**\\n\\t * @notice How many assets are linked with the given Hive in the give category\\n\\t *\\n\\t * @param hiveId Hive ID to query\\n\\t * @param categoryId category ID (index)\\n\\t * @return number of assets linked with the Hive\\n\\t */\\n\\tfunction getNumOfAssetsLinkedWithHive(uint16 hiveId, uint16 categoryId) external view returns (uint256);\\n\\n\\t/**\\n\\t * @notice Resolve category ID (index) by its name\\n\\t *\\n\\t * @param categoryName category name\\n\\t * @return category ID (index)\\n\\t */\\n\\tfunction getCategoryIndex(string calldata categoryName) external view returns (uint16);\\n\\n\\t/**\\n\\t * @notice Resolve Hive ID where the given asset is linked; an asset can also be an AI Pod\\n\\t *      which created the Hive\\n\\t *\\n\\t * @param podId AI Pod ID\\n\\t * @return Hive ID\\n\\t */\\n\\tfunction getHiveId(uint256 podId) external view returns (uint256);\\n\\n\\t/**\\n\\t * @notice Finds which AI Pod created the Hive\\n\\t *\\n\\t * @param hiveId ID of the Hive to query for\\n\\t * @return AI-pod (ERC721 address, ERC721 ID)\\n\\t */\\n\\tfunction getHiveCreatorPod(uint256 hiveId) external view returns (TradeableShares.SharesSubject memory);\\n\\n\\t/**\\n\\t * @notice Finds the URI of the given Hive\\n\\t *\\n\\t * @param hiveId ID of the Hive to query for\\n\\t * @return Hive URL\\n\\t */\\n\\tfunction getHiveURI(uint16 hiveId) external view returns (string memory);\\n\\n\\t/**\\n\\t * @notice Finds the economy ERC20 token address assigned to the Hive\\n\\t *\\n\\t * @param hiveId ID of the Hive to query for\\n\\t * @return address of the ERC20 token representing the economy of the Hive\\n\\t */\\n\\tfunction getHiveToken(uint256 hiveId) external view returns (address);\\n\\n\\t/**\\n\\t * @notice Finds the all details associated with Hive\\n\\t *\\n\\t * @param hiveId ID of the Hive to query for\\n\\t * @return pod AI-Pod details asossiated with hive\\n\\t * @return hiveOwner owner of AI-Pod cum hive\\n\\t * @return hiveToken address of the ERC20 token representing the economy of the Hive\\n\\t * @return hiveUri Hive metadata URL\\n\\t */\\n\\tfunction getHiveDetails(uint16 hiveId) external view returns (TradeableShares.SharesSubject memory pod, address hiveOwner, address hiveToken, string memory hiveUri);\\n\\n\\t/**\\n\\t * @notice Total number of Hives registered within the registry\\n\\t *\\n\\t * @return Total number of Hives\\n\\t */\\n\\tfunction getNumOfHives() external view returns (uint256);\\n\\n\\t/**\\n\\t * @notice Total number of asset categories known to the Hives\\n\\t *\\n\\t * @return Total number of categories\\n\\t */\\n\\tfunction getNumOfGlobalCategories() external view returns (uint256);\\n\\n\\t/**\\n\\t * @notice Gets current (unused) nonce for the given client address;\\n\\t *      unused nonce is required to build the RegisterDPTRequest and sign it\\n\\t *      nonces increment by one after each use\\n\\t *\\n\\t * @param client the client address to get the nonce for\\n\\t * @return current (unused) nonce; incremented by one after\\n\\t *      each successful execution of the `registerDPTRequest` function\\n\\t */\\n\\tfunction getNonce(address client) external view returns(uint256);\\n\\n\\t/**\\n\\t * @notice Checks whether a DPT is already registered.\\n\\t *\\n\\t * @param _dpt The TradeableShares.SharesSubject struct representing the DPT.\\n\\t * @return True if the DPT is registered, false otherwise.\\n\\t */\\n\\tfunction isDPTRegistered(TradeableShares.SharesSubject calldata _dpt) external view returns(bool);\\n}\\n\",\"keccak256\":\"0xa40161f50e5fce909f822135925c7903979da6a1e4fda91f6d31fd4e049b202d\",\"license\":\"MIT\"},\"contracts/bonding_curves/HiveRegistryV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../interfaces/ERC721Spec.sol\\\";\\nimport \\\"../utils/UpgradeableAccessControl.sol\\\";\\nimport \\\"./SharesSubjectLib.sol\\\";\\nimport \\\"./TypedStructLib.sol\\\";\\nimport \\\"../protocol/IntelligentNFTv2.sol\\\";\\nimport \\\"../protocol/NFTStaking.sol\\\";\\nimport \\\"./HiveRegistry.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol\\\";\\n\\n/**\\n * @title Hive Registry (Implementation, V1)\\n *\\n * @notice see HiveRegistry\\n */\\ncontract HiveRegistryV1 is HiveRegistry, UpgradeableAccessControl, EIP712Upgradeable {\\n\\t// libraries in use\\n\\tusing ECDSAUpgradeable for bytes32;\\n\\tusing SharesSubjectLib for TradeableShares.SharesSubject;\\n\\n\\t/**\\n\\t * @dev AI Personality contract defined by `personalityContract` (effectively immutable)\\n\\t */\\n\\taddress public personalityContract;\\n\\n\\t/**\\n\\t * @dev iNFT Linker contract defined by `iNftContract` (effectively immutable)\\n\\t */\\n\\taddress public iNftContract;\\n\\n\\t/**\\n\\t * @dev AI Personality staking contract defined by `podStakingContract` (effectively immutable)\\n\\t */\\n\\taddress public podStakingContract;\\n\\n\\t/**\\n\\t * @notice DPT registry storage, stores binding information for each existing registered DPTs\\n\\t *\\n\\t * @dev Mapping to store the linking status of DPTs identified by their bytes32 representation.\\n\\t */\\n\\tmapping(bytes32 => bool) private dptLinkStatus;\\n\\n\\t/**\\n\\t * @dev Keeps track of the used nonces for every possible issuer\\n\\t *      Maps address => number of used nonces\\n\\t */\\n\\tmapping(address => uint256) private nonces;\\n\\n\\t/**\\n\\t * @dev Keeps track of Level 5 AI Pods\\n\\t *      maps AI Pod ID => is Level 5?\\n\\t */\\n\\tmapping(uint256 => bool) private whitelistedPods;\\n\\n\\t/**\\n\\t * @dev Enumerable of all the Hives. Hive index in the array is a Hive ID.\\n\\t */\\n\\tTradeableShares.SharesSubject[] private hives;\\n\\n\\t/**\\n\\t * @dev Keeps track of the Hives' ERC20 economy tokens\\n\\t *      Maps Hive ID => Hive economy ERC20 token address\\n\\t */\\n\\tmapping(uint256 => address) private hiveToken;\\n\\n\\t/**\\n\\t * @dev Keeps track of which AI Pods created which Hives\\n\\t *      Maps keccak256(AI Pod address, ID) => Hive ID\\n\\t */\\n\\tmapping(bytes32 => uint256) private hiveIndex;\\n\\n\\t/**\\n\\t * @dev Keeps track of the Hive URIs\\n\\t *      Maps Hive ID => Hive URI\\n\\t */\\n\\tmapping(uint256 => string) private hiveURI;\\n\\n\\t/**\\n\\t * @dev Enumerable of all categories. Category index in the array is a Category ID\\n\\t */\\n\\tCategoryInfo[] public globalCategories;\\n\\n\\t/**\\n\\t * @dev Keeps track of the linked assets categories\\n\\t *      Maps Category Name => category ID / Index\\n\\t */\\n\\tmapping(string => uint16) private categoryIndex;\\n\\n\\t/**\\n\\t * @dev Keeps track of the bound assets to the Hive as a categories catalog\\n\\t *      Maps Hive ID => Category ID => Enumerable of the linked assets\\n\\t */\\n\\tmapping(uint256 => mapping(uint16 => TradeableShares.SharesSubject[])) public assetCatalogue;\\n\\n\\t/**\\n\\t * @dev Keeps track of the assets linked to the Hive\\n\\t *      Maps an asset keccak256(ERC721 address, ID) => (Hive ID, Category ID, asset Index in `assetBindings`)\\n\\t */\\n\\tmapping(bytes32 => AssetLinkDetails) private linkedAssets;\\n\\n\\t/**\\n\\t * @notice Total number of assets linked (counter)\\n\\t */\\n\\tuint256 public totalNumOfAssetsLinked;\\n\\n\\t/**\\n\\t * @notice Enables hive creation\\n\\t *\\n\\t * @dev Feature FEATURE_ALLOW_HIVE_CREATION must be enabled\\n\\t *      as a prerequisite for `launchHive()` function to succeed\\n\\t */\\n\\tuint32 public constant FEATURE_ALLOW_HIVE_CREATION = 0x0000_0001;\\n\\n\\t/**\\n\\t * @notice Enables asset linking with hives\\n\\t *\\n\\t * @dev Feature FEATURE_ALLOW_ASSET_LINKING must be enabled\\n\\t *      as a prerequisite for `linkAsset()` function to succeed\\n\\t */\\n\\tuint32 public constant FEATURE_ALLOW_ASSET_LINKING = 0x0000_0002;\\n\\n\\t/**\\n\\t * @notice Enables asset unlink from hives\\n\\t *\\n\\t * @dev Feature FEATURE_ALLOW_ASSET_UNLINKING must be enabled\\n\\t *      as a prerequisite for `unlinkAsset()` function to succeed\\n\\t */\\n\\tuint32 public constant FEATURE_ALLOW_ASSET_UNLINKING = 0x0000_0004;\\n\\n\\t/**\\n\\t * @notice registers DPTs with Hive registry on other behalf using meta-tx\\n\\t *\\n\\t * @dev Role ROLE_SHARES_REGISTRAR is required to execute `registerDPTRequest` functions\\n\\t *\\n\\t */\\n\\tuint32 public constant ROLE_DPT_REGISTRAR = 0x0001_0000;\\n\\n\\t/**\\n\\t * @notice allows to update pods of whitelisted list which are allowed to create hive\\n\\t *\\n\\t * @dev Role ROLE_POD_WHITELIST_MANAGER is required to execute `whitelistPods` & 'delistPods' functions\\n\\t *\\n\\t */\\n\\tuint32 public constant ROLE_POD_WHITELIST_MANAGER = 0x0002_0000;\\n\\n\\t/**\\n\\t * @notice allows to add new asset global category to hive registry\\n\\t *\\n\\t * @dev Role ROLE_CATEGORY_MANAGER is required to execute `addCategory` functions\\n\\t *\\n\\t */\\n\\tuint32 public constant ROLE_CATEGORY_MANAGER = 0x0004_0000;\\n\\n\\t/**\\n\\t * @notice allows to set ERC20 token address associated with particular hive\\n\\t *\\n\\t * @dev Role ROLE_HIVE_TOKEN_MANAGER is required to execute `updateHiveToken` functions\\n\\t *\\n\\t */\\n\\tuint32 public constant ROLE_HIVE_TOKEN_MANAGER = 0x0008_0000;\\n\\n\\t/**\\n\\t * @dev \\\"Constructor replacement\\\" for upgradeable, must be execute immediately after proxy deployment\\n\\t *      see https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable#initializers\\n\\t *\\n\\t */\\n\\tfunction postConstruct(address _personalityContract, address _iNftContract, address _podStakingContract) public initializer {\\n\\t\\t// execute parent initializer(s)\\n\\t\\t__EIP712_init_unchained(\\\"HiveRegistry\\\", \\\"1\\\");\\n\\t\\t_postConstruct(msg.sender);\\n\\n\\t\\t// initialize immutables\\n\\t\\tiNftContract = _iNftContract;\\n\\t\\tpodStakingContract = _podStakingContract;\\n\\t\\tpersonalityContract = _personalityContract;\\n\\n\\t\\t// we have pushed first place as dummy, to start indexing from 1 onwards\\n\\t\\thives.push();\\n\\t\\tglobalCategories.push();\\n\\n\\t\\t// add default global categories\\n\\t\\tglobalCategories.push(CategoryInfo({\\n\\t\\t\\tcategory: \\\"Intelligence_POD\\\",\\n\\t\\t\\tallowedCollection: _personalityContract\\n\\t\\t}));\\n\\t\\tcategoryIndex[\\\"Intelligence_POD\\\"] = uint16(globalCategories.length - 1);\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc HiveRegistry\\n\\t */\\n\\tfunction eip712RegisterAsDPT(RegisterAsDPTRequest calldata _req, bytes calldata _signature) external virtual {\\n\\t\\t// verify the request validity\\n\\t\\trequire(_req.validFromTimestamp <= block.timestamp, \\\"not yet valid\\\");\\n\\t\\trequire(_req.expiresAtTimestamp > block.timestamp, \\\"expired\\\");\\n\\n\\t\\t// verify and use nonce\\n\\t\\t__useNonce(_req.dptOwner, _req.nonce);\\n\\n\\t\\t// derive the request signer\\n\\t\\t// this also verifies that the signature is valid\\n\\t\\taddress signer = _hashTypedDataV4(__hashStruct(_req)).recover(_signature);\\n\\n\\t\\t// Register the DPT\\n\\t\\t__registerDPT(_req.asset, signer);\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc HiveRegistry\\n\\t */\\n\\tfunction registerAsDPT(TradeableShares.SharesSubject calldata _dpt) external virtual {\\n\\t\\t// Register the DPT with the sender as the authorized party\\n\\t\\t__registerDPT(_dpt, msg.sender);\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc HiveRegistry\\n\\t */\\n\\tfunction fastForwardTheNonce(address _issuer, uint256 _nonce) external {\\n\\t\\t// verify the access permission\\n\\t\\trequire(isSenderInRole(ROLE_DPT_REGISTRAR), \\\"access denied\\\");\\n\\n\\t\\t// make sure nonce is not decreasing\\n\\t\\trequire(nonces[_issuer] < _nonce, \\\"new nonce must be bigger than the current one\\\");\\n\\n\\t\\t// rewind the nonce to the value requested\\n\\t\\tnonces[_issuer] = _nonce;\\n\\n\\t\\t// emit an event\\n\\t\\temit NonceUsed(_issuer, _nonce - 1);\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc HiveRegistry\\n\\t */\\n\\tfunction createHive(uint256 _podId, string calldata _hiveURI) external {\\n\\t\\t// make sure hive creation is allowed\\n\\t\\trequire(isFeatureEnabled(FEATURE_ALLOW_HIVE_CREATION), \\\"hive creation disabled\\\");\\n\\n\\t\\t// make sure supplied podId is whitelisted and personalityContract is set\\n\\t\\trequire(personalityContract != address(0) && whitelistedPods[_podId], \\\"not allowed\\\");\\n\\n\\t\\t// wrap the inputs into SharesSubject struct\\n\\t\\tTradeableShares.SharesSubject memory pod = TradeableShares.SharesSubject({\\n\\t\\t\\ttokenAddress: personalityContract,\\n\\t\\t\\ttokenId: _podId\\n\\t\\t});\\n\\t\\t// verify pod ownership\\n\\t\\trequire(\\n\\t\\t\\tERC721(personalityContract).ownerOf(_podId) == msg.sender || __isPodStaked(pod) || __isPodLinkedWithINFT(pod),\\n\\t\\t\\t\\\"not authorized\\\"\\n\\t\\t);\\n\\n\\t\\t// calculate the key\\n\\t\\tbytes32 podKey = SharesSubjectLib.getSharesKey(personalityContract, _podId);\\n\\t\\t// make sure hive is not exist against particular pod\\n\\t\\trequire(hiveIndex[podKey] == 0, \\\"already exists\\\");\\n\\n\\t\\t// make sure pod is not liked as asset\\n\\t\\trequire(linkedAssets[podKey].hiveId == 0, \\\"pod linked as an asset\\\");\\n\\n\\t\\t// update state variables\\n\\t\\thives.push(pod);\\n\\t\\thiveIndex[podKey] = hives.length - 1;\\n\\t\\thiveURI[hives.length - 1] = _hiveURI;\\n\\n\\t\\t// emit an event\\n\\t\\temit HiveCreated(msg.sender, hives.length - 1, pod.tokenAddress, pod.tokenId, block.timestamp);\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc HiveRegistry\\n\\t */\\n\\tfunction linkAsset(\\n\\t\\tTradeableShares.SharesSubject calldata _asset,\\n\\t\\tuint16 _hiveId,\\n\\t\\tstring calldata _categoryName\\n\\t) external {\\n\\t\\t// delegate to linkAsset (with categoryId)\\n\\t\\tlinkAsset(_asset, _hiveId, categoryIndex[_categoryName]);\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc HiveRegistry\\n\\t */\\n\\tfunction linkAsset(\\n\\t\\tTradeableShares.SharesSubject calldata _asset,\\n\\t\\tuint16 _hiveId,\\n\\t\\tuint16 _categoryId\\n\\t) public {\\n\\t\\t// make sure asset linking is allowed\\n\\t\\trequire(isFeatureEnabled(FEATURE_ALLOW_ASSET_LINKING), \\\"asset linking is disabled\\\");\\n\\n\\t\\t// verify asset ownership\\n\\t\\trequire(\\n\\t\\t\\tERC721(_asset.tokenAddress).ownerOf(_asset.tokenId) == msg.sender\\n\\t\\t\\t|| (_asset.tokenAddress == personalityContract && (__isPodStaked(_asset) || __isPodLinkedWithINFT(_asset))),\\n\\t\\t\\t\\\"not authorized\\\"\\n\\t\\t);\\n\\n\\t\\t// validate hive ID\\n\\t\\trequire(_hiveId > 0, \\\"invalid hiveId\\\");\\n\\n\\t\\t// validate category ID\\n\\t\\trequire(_categoryId > 0 && _categoryId < globalCategories.length, \\\"invalid category\\\");\\n\\n\\t\\t// make sure asset linked under allowed category only\\n\\t\\trequire(\\n\\t\\t\\tglobalCategories[_categoryId].allowedCollection == address(0)\\n\\t\\t\\t|| globalCategories[_categoryId].allowedCollection == _asset.tokenAddress,\\n\\t\\t\\t\\\"asset linking restricted for supplied category\\\"\\n\\t\\t);\\n\\n\\t\\tbytes32 assetKey = SharesSubjectLib.getSharesKey(_asset.tokenAddress, _asset.tokenId);\\n\\t\\t// make sure asset is not already linked with other hive\\n\\t\\trequire(linkedAssets[assetKey].hiveId == 0, \\\"asset already linked\\\");\\n\\n\\t\\t// make sure hive is not been create again requested asset\\n\\t\\trequire(hiveIndex[assetKey] == 0, \\\"asset is associated with hive\\\");\\n\\n\\t\\t// increase total number of asset linked with hive registry\\n\\t\\ttotalNumOfAssetsLinked++;\\n\\t\\t// update state variable\\n\\t\\tassetCatalogue[_hiveId][_categoryId].push(_asset);\\n\\t\\tlinkedAssets[assetKey] = AssetLinkDetails({\\n\\t\\t\\thiveId: _hiveId,\\n\\t\\t\\tcategoryId: _categoryId,\\n\\t\\t\\tassetIndex: uint16(assetCatalogue[_hiveId][_categoryId].length - 1)\\n\\t\\t});\\n\\n\\t\\t// emit an event\\n\\t\\temit AssetLinked(msg.sender, _asset.tokenAddress, _asset.tokenId, _hiveId, _categoryId, block.timestamp);\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc HiveRegistry\\n\\t */\\n\\tfunction unlinkAsset(TradeableShares.SharesSubject calldata _asset) external {\\n\\t\\t// make sure asset unlinking is allowed\\n\\t\\trequire(isFeatureEnabled(FEATURE_ALLOW_ASSET_UNLINKING), \\\"asset unlinking is disabled\\\");\\n\\n\\t\\tbytes32 assetKey = SharesSubjectLib.getSharesKey(_asset.tokenAddress, _asset.tokenId);\\n\\t\\t// make sure asset is linked with any hive\\n\\t\\trequire(linkedAssets[assetKey].hiveId != 0, \\\"unlinked asset\\\");\\n\\n\\t\\t// verify ownership of asset\\n\\t\\trequire(\\n\\t\\t\\tERC721(_asset.tokenAddress).ownerOf(_asset.tokenId) == msg.sender\\n\\t\\t\\t|| (_asset.tokenAddress == personalityContract && (__isPodStaked(_asset) || __isPodLinkedWithINFT(_asset))),\\n\\t\\t\\t\\\"not authorized\\\"\\n\\t\\t);\\n\\n\\t\\t// get linked asset details\\n\\t\\tAssetLinkDetails memory assetLinkDetails = linkedAssets[assetKey];\\n\\t\\tuint256 linkedAssetsLength = assetCatalogue[assetLinkDetails.hiveId][assetLinkDetails.categoryId].length;\\n\\n\\t\\t// if more then 1 asset is been linked with hive under particular category,\\n\\t\\t// then we need to swap indexing of last connected asset with requested asset index\\n\\t\\tif(linkedAssetsLength > 1) {\\n\\t\\t\\tTradeableShares.SharesSubject memory lastAsset = assetCatalogue[assetLinkDetails.hiveId][assetLinkDetails.categoryId][linkedAssetsLength - 1];\\n\\t\\t\\tbytes32 lastAssetKey = SharesSubjectLib.getSharesKey(lastAsset.tokenAddress, lastAsset.tokenId);\\n\\n\\t\\t\\t// swap indexing of asset\\n\\t\\t\\tassetCatalogue[assetLinkDetails.hiveId][assetLinkDetails.categoryId][assetLinkDetails.assetIndex] = lastAsset;\\n\\t\\t\\tlinkedAssets[lastAssetKey].assetIndex = assetLinkDetails.assetIndex;\\n\\t\\t}\\n\\n\\t\\t// delete request asset details\\n\\t\\tassetCatalogue[assetLinkDetails.hiveId][assetLinkDetails.categoryId].pop();\\n\\t\\tdelete linkedAssets[assetKey];\\n\\t\\t// update total number of asset linked with hive registry\\n\\t\\ttotalNumOfAssetsLinked--;\\n\\n\\t\\t// emit an event\\n\\t\\temit AssetUnlinked(\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\t_asset.tokenAddress,\\n\\t\\t\\t_asset.tokenId,\\n\\t\\t\\tassetLinkDetails.hiveId,\\n\\t\\t\\tassetLinkDetails.categoryId,\\n\\t\\t\\tblock.timestamp\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc HiveRegistry\\n\\t */\\n\\tfunction setHiveTokenAddress(uint256 _hiveId, address _tokenAddress) external {\\n\\t\\t// verify the access permission\\n\\t\\trequire(isSenderInRole(ROLE_HIVE_TOKEN_MANAGER), \\\"access denied\\\");\\n\\n\\t\\t// valid hive ID\\n\\t\\trequire(_hiveId > 0 && _hiveId < hives.length, \\\"invalid hiveId\\\");\\n\\n\\t\\t// make sure token is not address been set for particular hive\\n\\t\\trequire(hiveToken[_hiveId] == address(0), \\\"token address is already set\\\");\\n\\n\\t\\t// update hive token address\\n\\t\\thiveToken[_hiveId] = _tokenAddress;\\n\\n\\t\\t// emit an event\\n\\t\\temit HiveTokenUpdated(msg.sender, _hiveId, _tokenAddress);\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc HiveRegistry\\n\\t */\\n\\tfunction updateHiveURI(uint256 _hiveId, string calldata _hiveURI) external {\\n\\t\\t// validate supplied hive ID\\n\\t\\trequire(_hiveId > 0 && _hiveId < hives.length, \\\"invalid hiveId\\\");\\n\\n\\t\\tTradeableShares.SharesSubject memory nftDetail = hives[_hiveId];\\n\\t\\t// verify hive ownership\\n\\t\\trequire(\\n\\t\\t\\tERC721(nftDetail.tokenAddress).ownerOf(nftDetail.tokenId) == msg.sender\\n\\t\\t\\t|| __isPodStaked(nftDetail)\\n\\t\\t\\t|| __isPodLinkedWithINFT(nftDetail),\\n\\t\\t\\t\\\"not authorized\\\"\\n\\t\\t);\\n\\n\\t\\t// update hive metadata URI\\n\\t\\thiveURI[_hiveId] = _hiveURI;\\n\\n\\t\\t// emit an event\\n\\t\\temit HiveUriUpdated(msg.sender, _hiveId, _hiveURI);\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc HiveRegistry\\n\\t */\\n\\tfunction addCategory(string calldata _categoryName, address _allowedCollection) external {\\n\\t\\t// verify the access permission\\n\\t\\trequire(isSenderInRole(ROLE_CATEGORY_MANAGER), \\\"access denied\\\");\\n\\n\\t\\t// make sure request category hasn't already been added\\n\\t\\trequire(categoryIndex[_categoryName] == 0, \\\"category exists!\\\");\\n\\n\\t\\t// add category to global category catalogue\\n\\t\\tglobalCategories.push(CategoryInfo({\\n\\t\\t\\tcategory: _categoryName,\\n\\t\\t\\tallowedCollection: _allowedCollection\\n\\t\\t}));\\n\\n\\t\\t// update new category index\\n\\t\\tcategoryIndex[_categoryName] = uint16(globalCategories.length - 1);\\n\\n\\t\\t// emit an event\\n\\t\\temit CategoryAdded(msg.sender, globalCategories.length - 1, _categoryName, _allowedCollection);\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc HiveRegistry\\n\\t */\\n\\tfunction whitelistPods(uint256[] calldata _pods) external {\\n\\t\\t// verify the access permission\\n\\t\\trequire(isSenderInRole(ROLE_POD_WHITELIST_MANAGER), \\\"access denied\\\");\\n\\n\\t\\tuint256 length = _pods.length;\\n\\t\\tfor(uint256 i = 0; i < length; i++) {\\n\\t\\t\\t// whitelist pods if not already whitelisted\\n\\t\\t\\tif(whitelistedPods[_pods[i]] == false) {\\n\\t\\t\\t\\t// whitelist pod\\n\\t\\t\\t\\twhitelistedPods[_pods[i]] = true;\\n\\n\\t\\t\\t\\t// emit an event\\n\\t\\t\\t\\temit PodWhitelisted(msg.sender, _pods[i]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc HiveRegistry\\n\\t */\\n\\tfunction delistPods(uint256[] calldata _pods) external {\\n\\t\\t// verify the access permission\\n\\t\\trequire(isSenderInRole(ROLE_POD_WHITELIST_MANAGER), \\\"access denied\\\");\\n\\n\\t\\tuint256 length = _pods.length;\\n\\t\\tfor(uint256 i = 0; i < length; i++) {\\n\\t\\t\\t// delist pods if whitelisted\\n\\t\\t\\tif(whitelistedPods[_pods[i]] == true) {\\n\\t\\t\\t\\t//delist pod\\n\\t\\t\\t\\twhitelistedPods[_pods[i]] = false;\\n\\n\\t\\t\\t\\t// emit an event\\n\\t\\t\\t\\temit PodDelisted(msg.sender, _pods[i]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc HiveRegistry\\n\\t */\\n\\tfunction getLinkedAssetDetails(TradeableShares.SharesSubject calldata _asset) external view returns(\\n\\t\\tuint256 hiveId,\\n\\t\\tuint256 categoryId,\\n\\t\\tstring memory category\\n\\t) {\\n\\t\\tbytes32 assetKey = SharesSubjectLib.getSharesKey(_asset.tokenAddress, _asset.tokenId);\\n\\n\\t\\t// throw expection if asset is not linked\\n\\t\\trequire(linkedAssets[assetKey].hiveId !=0, \\\"not linked\\\");\\n\\n\\t\\treturn (\\n\\t\\t\\tlinkedAssets[assetKey].hiveId,\\n\\t\\t\\tlinkedAssets[assetKey].categoryId,\\n\\t\\t\\tglobalCategories[linkedAssets[assetKey].categoryId].category\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc HiveRegistry\\n\\t */\\n\\tfunction isAssetLinked(TradeableShares.SharesSubject calldata _asset) external view returns (bool status) {\\n\\t\\tbytes32 assetKey = SharesSubjectLib.getSharesKey(_asset.tokenAddress, _asset.tokenId);\\n\\n\\t\\treturn (linkedAssets[assetKey].hiveId != 0);\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc HiveRegistry\\n\\t */\\n\\tfunction getNumOfAssetsLinkedWithHive(uint16 _hiveId) external view returns (uint256 numOfAssets) {\\n\\t\\tuint256 length = globalCategories.length;\\n\\t\\t// returns total number of Asset linked to hive\\n\\t\\tfor(uint16 i = 1; i < length; i++) {\\n\\t\\t\\tnumOfAssets += assetCatalogue[_hiveId][i].length;\\n\\t\\t}\\n\\n\\t\\treturn numOfAssets;\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc HiveRegistry\\n\\t */\\n\\tfunction getNumOfAssetsLinkedWithHive(uint16 _hiveId, uint16 _category) external view returns (uint256 numOfAssets) {\\n\\t\\t// returns number of Asset linked to hive under particular category\\n\\t\\treturn assetCatalogue[_hiveId][_category].length;\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc HiveRegistry\\n\\t */\\n\\tfunction getCategoryIndex(string memory _category) external view returns (uint16 categoryId) {\\n\\t\\treturn categoryIndex[_category];\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc HiveRegistry\\n\\t */\\n\\tfunction getHiveId(uint256 _podId) external view returns (uint256 hiveId) {\\n\\t\\treturn hiveIndex[SharesSubjectLib.getSharesKey(personalityContract, _podId)];\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc HiveRegistry\\n\\t */\\n\\tfunction getHiveCreatorPod(uint256 _hiveId) external view returns (TradeableShares.SharesSubject memory pod) {\\n\\t\\t// throw expection if hiveId is invalid\\n\\t\\trequire(_hiveId != 0 && _hiveId < hives.length, \\\"invalid hiveId\\\");\\n\\n\\t\\treturn hives[_hiveId];\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc HiveRegistry\\n\\t */\\n\\tfunction getHiveToken(uint256 _hiveId) external view returns (address tokenAddr) {\\n\\t\\treturn hiveToken[_hiveId];\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc HiveRegistry\\n\\t */\\n\\tfunction getHiveURI(uint16 _hiveId) external view returns (string memory hiveUri) {\\n\\t\\treturn hiveURI[_hiveId];\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc HiveRegistry\\n\\t */\\n\\tfunction getHiveDetails(\\n\\t\\tuint16 _hiveId\\n\\t) external view returns (\\n\\t\\tTradeableShares.SharesSubject memory pod,\\n\\t\\taddress hiveOwner,\\n\\t\\taddress hiveTokenAddr,\\n\\t\\tstring memory hiveUri\\n\\t) {\\n\\t\\t// throw expection if hiveId is invalid\\n\\t\\trequire(_hiveId != 0 && _hiveId < hives.length, \\\"invalid hiveId\\\");\\n\\n\\t\\treturn (\\n\\t\\t\\thives[_hiveId],\\n\\t\\t\\tERC721(hives[_hiveId].tokenAddress).ownerOf(hives[_hiveId].tokenId),\\n\\t\\t\\thiveToken[_hiveId],\\n\\t\\t\\thiveURI[_hiveId]\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc HiveRegistry\\n\\t */\\n\\tfunction isPodWhitelisted(uint256 _podId) external view returns (bool status) {\\n\\t\\treturn whitelistedPods[_podId];\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc HiveRegistry\\n\\t */\\n\\tfunction getNumOfHives() external view returns (uint256 noOfHives) {\\n\\t\\treturn hives.length - 1;\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc HiveRegistry\\n\\t */\\n\\tfunction getNumOfGlobalCategories() external view returns (uint256 noOfCategories) {\\n\\t\\treturn globalCategories.length - 1;\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc HiveRegistry\\n\\t */\\n\\tfunction isDPTRegistered(TradeableShares.SharesSubject calldata _dpt) external view returns (bool status) {\\n\\t\\treturn dptLinkStatus[SharesSubjectLib.getSharesKey(_dpt.tokenAddress, _dpt.tokenId)];\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc HiveRegistry\\n\\t */\\n\\tfunction getNonce(address clientAddress) external view returns (uint256 nonce) {\\n\\t\\t// read the nonce from the storage\\n\\t\\treturn nonces[clientAddress];\\n\\t}\\n\\n\\t/**\\n\\t * @dev Internal function to check pod stake state\\n\\t *\\n\\t * @param _pod The TradeableShares.SharesSubject struct representing the pod.\\n\\t * @return status true if pod is staked and owned by requested user, otherwise false\\n\\t */\\n\\tfunction __isPodStaked(TradeableShares.SharesSubject memory _pod) internal view returns (bool status) {\\n\\t\\t// if podStakingContract is not set, no need to process further\\n\\t\\tif(podStakingContract == address(0)) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\t// get number of stake been created for particular pod\\n\\t\\tuint256 numStakes = NFTStaking(podStakingContract).numStakes(uint32(_pod.tokenId));\\n\\t\\t// if number of stake is zero means pod is not stacked\\n\\t\\tif(numStakes == 0) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\t// retrieve owner and unstaked time of latest stake\\n\\t\\t(address owner, , uint32 unstakedOn) = NFTStaking(podStakingContract).tokenStakes(uint32(_pod.tokenId), numStakes - 1);\\n\\n\\t\\t// if unstake time is non-zero indicate pod is already be unstaked.\\n\\t\\treturn (unstakedOn == 0 && owner == msg.sender);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Internal function to check pod iNft fuse state\\n\\t *\\n\\t * @param _pod The TradeableShares.SharesSubject struct representing the pod.\\n\\t * @return status true if pod is been fused and owned by requested user, otherwise false\\n\\t */\\n\\tfunction __isPodLinkedWithINFT(TradeableShares.SharesSubject memory _pod) internal view returns (bool status) {\\n\\t\\t// if iNftContract is not set, no need to process further\\n\\t\\tif(iNftContract == address(0)) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\t// retrieve record ID of fused Pod\\n\\t\\tuint256 recordId = IntelligentNFTv2(iNftContract).personalityBindings(_pod.tokenAddress, _pod.tokenId);\\n\\t\\t// if recordId is zero, indicate pod is not fused here\\n\\t\\treturn (recordId != 0 && IntelligentNFTv2(iNftContract).ownerOf(recordId) == msg.sender);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Internal function to register a DPT.\\n\\t *\\n\\t * @param _dpt The TradeableShares.SharesSubject struct representing the DPT.\\n\\t * @param _authorizedBy The address authorizing the registration.\\n\\t */\\n\\tfunction __registerDPT(TradeableShares.SharesSubject calldata _dpt, address _authorizedBy) internal {\\n\\t\\t// Ensure the sender is authorized to register the DPT\\n\\t\\trequire(\\n\\t\\t\\t// allow REGISTRAR to register\\n\\t\\t\\tisSenderInRole(ROLE_DPT_REGISTRAR)\\n\\t\\t\\t// allow REGISTRAR to register via EIP712\\n\\t\\t\\t|| isOperatorInRole(_authorizedBy, ROLE_DPT_REGISTRAR),\\n\\t\\t\\t\\\"not authorized\\\"\\n\\t\\t);\\n\\n\\t\\t// derive the DPT key\\n\\t\\tbytes32 dptKey = SharesSubjectLib.getSharesKey(_dpt.tokenAddress, _dpt.tokenId);\\n\\t\\t// verify DPT register state\\n\\t\\trequire(!dptLinkStatus[dptKey], \\\"DPT is already registered!\\\");\\n\\n\\t\\t// update DPT register state\\n\\t\\tdptLinkStatus[dptKey] = true;\\n\\n\\t\\t// emit an event\\n\\t\\temit DPTRegistered(_authorizedBy, _dpt.tokenAddress, _dpt.tokenId, block.timestamp);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Verifies the nonce is valid and marks it as used\\n\\t *      Throws if nonce is already used or if it is invalid\\n\\t *\\n\\t * @param _issuer the owner of the nonce\\n\\t * @param _nonce the nonce to be used\\n\\t */\\n\\tfunction __useNonce(address _issuer, uint256 _nonce) internal {\\n\\t\\t// verify the nonce wasn't yet used and use it\\n\\t\\trequire(nonces[_issuer]++ == _nonce, \\\"invalid nonce\\\");\\n\\n\\t\\t// emit an event\\n\\t\\temit NonceUsed(_issuer, _nonce);\\n\\t}\\n\\n\\t/**\\n\\t * @notice RegisterAsDPTRequest typeHash\\n\\t */\\n\\tfunction __hashType(RegisterAsDPTRequest calldata) internal pure returns (bytes32) {\\n\\t\\t// hashType(RegisterAsDPTRequest) = keccak256(\\\"RegisterAsDPTRequest(TradeableShares.SharesSubject dpt,address dptHolder,uint256 validFromTimestamp,uint256 expiresAtTimestamp,uint256 nonce)\\\")\\n\\t\\treturn 0x5e5980812e14d500287e9b3d75ae309eac0fb0d30f0d40d19ea443de698eef00;\\n\\t}\\n\\n\\t/**\\n\\t * @notice RegisterDPTRequest hashStruct\\n\\t */\\n\\tfunction __hashStruct(RegisterAsDPTRequest calldata _request) internal pure returns (bytes32) {\\n\\t\\treturn keccak256(abi.encode(\\n\\t\\t\\t__hashType(_request),\\n\\t\\t\\tTypedStructLib.hashStruct(_request.asset),\\n\\t\\t\\t_request.dptOwner,\\n\\t\\t\\t_request.validFromTimestamp,\\n\\t\\t\\t_request.expiresAtTimestamp,\\n\\t\\t\\t_request.nonce\\n\\t\\t));\\n\\t}\\n}\\n\",\"keccak256\":\"0xe338a3d3781e5359c5899ac6eb9318e9d206dfa132a55b4a23004d7138d92f2e\",\"license\":\"MIT\"},\"contracts/bonding_curves/HoldersRewardsDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../interfaces/ERC1363Spec.sol\\\";\\n\\n/**\\n * @title Bonding Curve Holder Reward Distributor\\n *\\n * @notice Holder reward distributor keeps track of every trade event happening in the curve,\\n *      and based on the amount of shares the holder has, alters the holders' reward weight,\\n *      which directly affects the amount of the distributed rewards between the holders\\n *\\n * @notice Holder reward distributor accepts the fees from the curve and distributes these fees\\n *      across shares holders proportionally to their weights\\n *\\n * @dev Apart from the `accept(uint256,address)` function designed to accept the fees from the\\n *      curve contract, the implementation must implement receive(), fallback(), and onTransferReceived()\\n *      functions to accept direct payments in both ETH and/or ERC20 payment token\\n *\\n * @dev receive() and onTransferReceived() with an empty data field must accept the fee in the same way\\n *      as an accept() function would do, but in a passive way (without ERC20 transfer)\\n *\\n * @dev The fallback() and onTransferReceived() with non-empty data field must accept the fee and the trading event;\\n *      trading event encoded in the bytes data field contains the information\\n *      on the trade which resulted in the fee being sent:\\n *\\n *      - address trader - shares holder/trader\\n *      - bool isBuy - true if shares were bought, false if shares were sold\\n *      - uint256 sharesAmount - amount of shares bought or sold\\n *\\n *      the values above are packed as data = abi.encode(trader, isBuy, sharesAmount)\\n *      and can be unpacked as (trader, isBuy, sharesAmount) = abi.decode(data, (address, bool, uint256))\\n *\\n *      if specified, the data field must be parsed by the implementation and its containing data applied;\\n *      standard logic applies, if the data is malformed implementation should throw\\n *\\n */\\ninterface HoldersRewardsDistributor is ERC1363Receiver {\\n\\t/**\\n\\t * @dev Fired in `sharesBought` and `sharesSold`\\n\\t *\\n\\t * @param trader is a buyer or a seller, depending on the operation type\\n\\t * @param isBuy true if the event comes from the `sharesBought` and represents the buy operation,\\n\\t *      false if the event comes from the `sharesSold` and represents the sell operation\\n\\t * @param sharesAmount amount of the shares bought or sold (see `isBuy`)\\n\\t */\\n\\tevent SharesTraded(address indexed trader, bool indexed isBuy, uint256 sharesAmount);\\n\\n\\t/**\\n\\t * @dev Fired when the fee for the distribution is received\\n\\t *\\n\\t * @param feeAmount amount of the fee to distribute between the holders\\n\\t */\\n\\tevent FeeReceived(uint256 feeAmount);\\n\\n\\t/**\\n\\t * @dev Fired in `claimReward`\\n\\t *\\n\\t * @param holder address of the trader (and shares holder) who received the reward\\n\\t * @param rewardAmount amount of the reward sent\\n\\t */\\n\\tevent RewardClaimed(address indexed holder, uint256 rewardAmount);\\n\\n\\t/**\\n\\t * @notice ERC20 payment token distributor is bound to\\n\\t *\\n\\t * @return paymentToken ERC20 payment token address the contract is bound to,\\n\\t *      or zero zero address if it operates with the plain ETH\\n\\t */\\n\\tfunction getPaymentToken() external view returns(address paymentToken);\\n\\n/*\\n\\t*/\\n/**\\n\\t * @notice Notifies the distributor about the trade event\\n\\t *\\n\\t * @dev Trade amount specified affects holder's (buyer's) weight when calculating the reward\\n\\t *\\n\\t * @param buyer shares buyer (becomes shares holder if not yet), a.k.a trader\\n\\t * @param amountBought amount of the shares bought\\n\\t *//*\\n\\n\\tfunction sharesBought(address buyer, uint256 amountBought) external;\\n\\n\\t*/\\n/**\\n\\t * @notice Notifies the distributor about the trade event\\n\\t *\\n\\t * @dev Trade amount specified affects holder's (seller's) weight when calculating the reward\\n\\t *\\n\\t * @param seller shares seller (shares holder), a.k.a trader\\n\\t * @param amountSold amount of the shares sold\\n\\t *//*\\n\\n\\tfunction sharesSold(address seller, uint256 amountSold) external;\\n\\n\\t*/\\n/**\\n\\t * @notice Executed by the fee sender to send the fee; in case of the ERC20 payment,\\n\\t *      this is the ask to take the specified amount of the ERC20 token of the specified type;\\n\\t *      in case of the ETH payment, the amount must be supplied with the transaction itself\\n\\t *\\n\\t * @dev When paying with an ERC20 payment token, sender must approve the contract for\\n\\t *      at least the amount specified before executing this function\\n\\t *\\n\\t * @dev Updates the accumulated reward per share\\n\\t *\\n\\t * @param feeAmount amount of the fee sent,\\n\\t *      in the case of ETH payment must be equal to msg.value\\n\\t *//*\\n\\n\\tfunction accept(uint256 feeAmount) external payable;\\n*/\\n\\n\\t/**\\n\\t * @notice Executed by the holder to claim entire pending reward\\n\\t *\\n\\t * @dev Holder can verify pending reward amount with the `pendingReward` function\\n\\t */\\n\\tfunction claimTheReward() external;\\n\\n\\t/**\\n\\t * @notice Pending (claimable) reward. This is the amount which can be claimed using `claimTheReward`\\n\\t *\\n\\t * @param holder the holder address to query the reward for\\n\\t * @return rewardAmount pending reward amount\\\\\\n\\t */\\n\\tfunction pendingReward(address holder) external view returns(uint256 rewardAmount);\\n}\\n\",\"keccak256\":\"0xc1749ddf31e8338a0e72081b19a792c4496699cd0bfff442f88281a0a32d5699\",\"license\":\"MIT\"},\"contracts/bonding_curves/SharesFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./TradeableShares.sol\\\";\\n\\n/**\\n * @title Shares Factory\\n *\\n * @notice Creates/deploys TradeableShares contracts\\n *\\n * @notice The factory manages protocol fees of the deployed TradeableShares contract:\\n *      deployed contracts usually follow the protocol fees set on the factory\\n *\\n * @dev Based on the friend.tech FriendtechSharesV1.sol\\n */\\ninterface SharesFactory {\\n\\t/**\\n\\t * @dev Enum of all possible TradeableShares implementations the factory can deploy\\n\\t */\\n\\tenum ImplementationType {\\n\\t\\t/// @dev ETHShares implementation\\n\\t\\tETH,\\n\\t\\t/// @dev ERC20Shares implementation bound to the ERC20 payment token\\n\\t\\tERC20\\n\\t}\\n\\n\\t/**\\n\\t * @dev Shares deployment request is used to enable the TradeableShares\\n\\t *      deployment with meta-transactions\\n\\t * @dev See `executeDeploymentRequest()`\\n\\t */\\n\\tstruct SharesDeploymentRequest {\\n\\t\\t/// @dev TradeableShares implementation type\\n\\t\\tImplementationType implementationType;\\n\\t\\t/// @dev shares subject, owner of the curve\\n\\t\\tTradeableShares.SharesSubject sharesSubject;\\n\\t\\t/// @dev an address to mint the NFT defined by the subject if it doesn't exist\\n\\t\\taddress issuer;\\n\\t\\t/// @dev how many shares to buy immediately after the deployment\\n\\t\\tuint256 amount;\\n\\t\\t/// @dev unix timestamp when the request becomes valid\\n\\t\\tuint256 validFromTimestamp;\\n\\t\\t/// @dev unix timestamp when the request expires (becomes invalid)\\n\\t\\tuint256 expiresAtTimestamp;\\n\\t\\t/// @dev nonce of the request (sequential number, increased by one)\\n\\t\\tuint256 nonce;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Fired in\\n\\t *      `setProtocolFeeDestination`\\n\\t *      `setProtocolFeePercent`\\n\\t *      `setHoldersFeePercent`\\n\\t *      `setSubjectFeePercent`\\n\\t *      `setProtocolFee`\\n\\t *\\n\\t * @param protocolFeeDestination address where the protocol fee is sent\\n\\t * @param protocolFeePercent protocol fee percent, value 10^18 corresponds to 100%\\n\\t * @param holdersFeePercent shares holders fee percent, value 10^18 corresponds to 100%\\n\\t * @param subjectFeePercent subject fee percent, value 10^18 corresponds to 100%\\n\\t */\\n\\tevent ProtocolFeeUpdated(\\n\\t\\taddress protocolFeeDestination,\\n\\t\\tuint64 protocolFeePercent,\\n\\t\\tuint64 holdersFeePercent,\\n\\t\\tuint64 subjectFeePercent\\n\\t);\\n\\n\\t/**\\n\\t * @dev Fired in `deploySharesContract` and `registerSharesContract`\\n\\t *\\n\\t * @param creator shares creator, a.k.a. shares issuer, or current owner\\n\\t * @param implementationContract newly deployed or registered TradeableShares contract\\n\\t * @param holdersRewardsDistributor the shares holders fee destination, HoldersRewardsDistributor contract,\\n\\t *      this can be zero if shares contract is deployed without the shares holders fee distribution\\n\\t * @param implementationType type of the TradeableShares, see ImplementationType\\n\\t * @param sharesSubject current shares subject\\n\\t * @param newDeployment true if the factory deployed this TradeableShares contract,\\n\\t *      false if TradeableShares contract was already deployed and factory just registered it\\n\\t */\\n\\tevent SharesContractRegistered(\\n\\t\\taddress indexed creator,\\n\\t\\tTradeableShares indexed implementationContract,\\n\\t\\tHoldersRewardsDistributor indexed holdersRewardsDistributor,\\n\\t\\tImplementationType implementationType,\\n\\t\\tTradeableShares.SharesSubject sharesSubject,\\n\\t\\tbool newDeployment\\n\\t);\\n\\n\\t/**\\n\\t * @dev Fired in `executeDeploymentRequest` and in `rewind`\\n\\t */\\n\\tevent NonceUsed(address indexed issuer, uint256 nonce);\\n\\n\\t/**\\n\\t * @notice Address of the already deployed TradeableShares implementation\\n\\t *      to be used by the factory to deploy the TradeableShares contracts EIP-1167 clones\\n\\t *\\n\\t * @param _implementationType TradeableShares implementation type\\n\\t * @return the address of the already deployed TradeableShares implementation corresponding\\n\\t *      to the given implementation type\\n\\t */\\n\\tfunction getSharesImplAddress(ImplementationType _implementationType) external view returns(address);\\n\\n\\t/**\\n\\t * @notice Address of the already deployed HoldersRewardsDistributor implementation\\n\\t *      to be used by the factory to deploy the HoldersRewardsDistributor contracts EIP-1167 clones\\n\\t *\\n\\t * @dev If the HoldersRewardsDistributor implementation is missing, the TradeableShares contract\\n\\t *      can still be deployed, not being attached to the HoldersRewardsDistributor\\n\\t *\\n\\t * @param _implementationType TradeableShares implementation type\\n\\t * @return the address of the already deployed HoldersRewardsDistributor implementation corresponding\\n\\t *      to the given implementation type\\n\\t */\\n\\tfunction getDistributorImplAddress(ImplementationType _implementationType) external view returns(address);\\n\\n\\t/**\\n\\t * @notice Protocol fee destination is the address receiving the protocol fee\\n\\t *\\n\\t * @return feeDestination protocol fee destination, address\\n\\t */\\n\\tfunction getProtocolFeeDestination() external view returns(address feeDestination);\\n\\n\\t/**\\n\\t * @notice Protocol fee percent is the percentage of the buy/sell transaction volume\\n\\t *      sent to the protocol fee destination\\n\\t *\\n\\t * @dev The value has 18 decimals, 100% is represented as 10^18\\n\\t *\\n\\t * @return feePercent protocol fee percent\\n\\t */\\n\\tfunction getProtocolFeePercent() external view returns(uint256 feePercent);\\n\\n\\t/**\\n\\t * @notice Shares holders fee percent is the percentage of the buy/sell transaction volume\\n\\t *      sent to the shares holders rewards distributor contract\\n\\t *\\n\\t * @dev The value has 18 decimals, 100% is represented as 10^18\\n\\t *\\n\\t * @return feePercent shares holders fee percent\\n\\t */\\n\\tfunction getHoldersFeePercent() external view returns(uint256 feePercent);\\n\\n\\t/**\\n\\t * @notice Subject fee percent is the percentage of the buy/sell transaction volume\\n\\t *      sent to the subject issuer\\n\\t *\\n\\t * @dev The value has 18 decimals, 100% is represented as 10^18\\n\\t *\\n\\t * @dev Implementation may return different values for different callers,\\n\\t *      for example it can read SharesSubject from the caller TradeableShares contract\\n\\t *      and dynamically determine the subject fee\\n\\t *\\n\\t * @return feePercent subject fee percent\\n\\t */\\n\\tfunction getSubjectFeePercent() external view returns(uint256 feePercent);\\n\\n\\t/**\\n\\t * @notice Sets the protocol fee destination\\n\\t *\\n\\t * @dev Implementation must check the consistency of the protocol fee destination and percent\\n\\t *      set by this and `setProtocolFeePercent` functions\\n\\t *\\n\\t * @param feeDestination protocol fee destination to set\\n\\t */\\n\\tfunction setProtocolFeeDestination(address feeDestination) external;\\n\\n\\t/**\\n\\t * @notice Sets the protocol fee percent\\n\\t *\\n\\t * @dev Implementation must check the consistency of the protocol fee destination and percent\\n\\t *      set by this and `setProtocolFeeDestination` functions\\n\\t *\\n\\t * @param feePercent protocol fee percent to set, examples: 10^18 is 100%, 10^17 is 10%\\n\\t */\\n\\tfunction setProtocolFeePercent(uint64 feePercent) external;\\n\\n\\t/**\\n\\t * @notice Sets the shares holders fee percent\\n\\t *\\n\\t * @param feePercent shares holders fee percent to set, examples: 10^18 is 100%, 10^17 is 10%\\n\\t */\\n\\tfunction setHoldersFeePercent(uint64 feePercent) external;\\n\\n\\t/**\\n\\t * @notice Sets the subject fee percent\\n\\t *\\n\\t * @param feePercent subject fee percent to set, examples: 10^18 is 100%, 10^17 is 10%\\n\\t */\\n\\tfunction setSubjectFeePercent(uint64 feePercent) external;\\n\\n\\t/**\\n\\t * @notice Sets all the fees at once:\\n\\t *      protocolFeeDestination\\n\\t *      protocolFeePercent\\n\\t *      holdersFeePercent\\n\\t *      subjectFeePercent\\n\\t *\\n\\t * @param protocolFeeDestination protocol fee destination to set\\n\\t * @param protocolFeePercent protocol fee percent to set, examples: 10^18 is 100%, 10^17 is 10%\\n\\t * @param holdersFeePercent shares holders fee percent to set, examples: 10^18 is 100%, 10^17 is 10%\\n\\t * @param subjectFeePercent subject fee percent to set, examples: 10^18 is 100%, 10^17 is 10%\\n\\t */\\n\\tfunction setProtocolFee(\\n\\t\\taddress protocolFeeDestination,\\n\\t\\tuint64 protocolFeePercent,\\n\\t\\tuint64 holdersFeePercent,\\n\\t\\tuint64 subjectFeePercent\\n\\t) external;\\n\\n\\t/**\\n\\t * @notice Deploys the TradeableShares implementation for the specified subject;\\n\\t *      the curve remains paused, no shares are being bought immediately\\n\\t *\\n\\t * @notice Tries minting the NFT defined by the subject if it doesn't exist\\n\\t *\\n\\t * @dev Implementation must guarantee only one TradeableShares contract per subject\\n\\t *\\n\\t * @param implementationType TradeableShares implementation type\\n\\t * @param sharesSubject shares subject, owner of the curve\\n\\t * @return deployed TradeableShares contract\\n\\t */\\n\\tfunction deploySharesContractPaused(\\n\\t\\tImplementationType implementationType,\\n\\t\\tTradeableShares.SharesSubject calldata sharesSubject\\n\\t) external returns(TradeableShares);\\n\\n\\t/**\\n\\t * @notice Deploys the TradeableShares implementation for the specified subject;\\n\\t *      the curve launches immediately, the first share is issued to the subject issuer (NFT owner)\\n\\t *\\n\\t * @notice Tries minting the NFT defined by the subject if it doesn't exist\\n\\t *\\n\\t * @dev Implementation must guarantee only one TradeableShares contract per subject\\n\\t *\\n\\t * @param implementationType TradeableShares implementation type\\n\\t * @param sharesSubject shares subject, owner of the curve\\n\\t * @return deployed TradeableShares contract\\n\\t */\\n\\tfunction deploySharesContract(\\n\\t\\tImplementationType implementationType,\\n\\t\\tTradeableShares.SharesSubject calldata sharesSubject\\n\\t) external returns(TradeableShares);\\n\\n\\t/**\\n\\t * @notice Deploys the TradeableShares implementation for the specified subject;\\n\\t *      allows to immediately buy any amount of shares (including zero)\\n\\t *\\n\\t * @notice Tries minting the NFT defined by the subject if it doesn't exist\\n\\t *\\n\\t * @dev Implementation must guarantee only one TradeableShares contract per subject\\n\\t *\\n\\t * @param implementationType TradeableShares implementation type\\n\\t * @param sharesSubject shares subject, owner of the curve\\n\\t * @param amount how many shares to buy immediately after the deployment\\n\\t * @return deployed TradeableShares contract\\n\\t */\\n\\tfunction deploySharesContractAndBuy(\\n\\t\\tImplementationType implementationType,\\n\\t\\tTradeableShares.SharesSubject calldata sharesSubject,\\n\\t\\tuint256 amount\\n\\t) external payable returns(TradeableShares);\\n\\n\\t/**\\n\\t * @notice Deploys the TradeableShares implementation for the specified subject;\\n\\t *      allows to immediately buy any amount of shares (including zero)\\n\\t *\\n\\t * @notice Tries minting the NFT defined by the subject if it doesn't exist\\n\\t *\\n\\t * @dev Implementation must guarantee only one TradeableShares contract per subject\\n\\t *\\n\\t * @param implementationType TradeableShares implementation type\\n\\t * @param sharesSubject shares subject, owner of the curve\\n\\t * @param issuer an address to mint the NFT defined by the subject if it doesn't exist\\n\\t * @param amount how many shares to buy immediately after the deployment\\n\\t * @return deployed TradeableShares contract\\n\\t */\\n\\tfunction mintSubjectAndDeployShares(\\n\\t\\tImplementationType implementationType,\\n\\t\\tTradeableShares.SharesSubject calldata sharesSubject,\\n\\t\\taddress issuer,\\n\\t\\tuint256 amount\\n\\t) external payable returns(TradeableShares);\\n\\n\\t/**\\n\\t * @notice Executes signed SharesDeploymentRequest; this is identical to executing `mintSubjectAndDeployShares`\\n\\t *      on behalf of the signer and allows the transaction to be relayed so that the gas is payed by the\\n\\t *      relayer\\n\\t *\\n\\t * @param req the deployment request to fulfill, containing same data as in `mintSubjectAndDeployShares`\\n\\t * @param signature the deployment request EIP712 signature issued by the address allowed to execute\\n\\t *      the request\\n\\t * @return deployed TradeableShares contract\\n\\t */\\n\\tfunction executeDeploymentRequest(\\n\\t\\tSharesDeploymentRequest calldata req,\\n\\t\\tbytes calldata signature\\n\\t) external payable returns(TradeableShares);\\n\\n\\t/**\\n\\t * @notice Gets current (unused) nonce for the given issuer address;\\n\\t *      unused nonce is required to build the SharesDeploymentRequest and sign it\\n\\t *      nonces increment by one after each use\\n\\t *\\n\\t * @param issuer the issuer address to get the nonce for\\n\\t * @return current (unused) nonce; incremented by one after\\n\\t *      each successful execution of the `executeDeploymentRequest` function\\n\\t */\\n\\tfunction getNonce(address issuer) external view returns(uint256);\\n\\n\\t/**\\n\\t * @notice Rewinds forward the nonce for the issuer specified, used to\\n\\t *      discard one or more signed requests to `executeDeploymentRequest`\\n\\t *\\n\\t * @dev Implementation must not allow to decrease the nonce, only increasing (rewinding)\\n\\t *      must be possible\\n\\t *\\n\\t * @param issuer the issuer address to rewind the nonce for\\n\\t * @param nonce the nonce value to rewind to\\n\\t */\\n\\tfunction rewindNonce(address issuer, uint256 nonce) external;\\n\\n\\t/**\\n\\t * @notice Gets the already deployed TradeableShares contract\\n\\t *\\n\\t * @param sharesSubject shares subject, owner of the curve\\n\\t * @return deployed TradeableShares contract\\n\\t */\\n\\tfunction lookupSharesContract(\\n\\t\\tTradeableShares.SharesSubject calldata sharesSubject\\n\\t) external view returns(TradeableShares);\\n\\n\\t/**\\n\\t * @notice Registers or re-registers the already deployed TradeableShares contract\\n\\t *\\n\\t * @dev Initial registration is usually done manually by authorized address,\\n\\t *      Re-registration is usually done by the shares contract itself\\n\\t *      and implementations must keep the access to this function open for\\n\\t *      the already registered contracts\\n\\t *\\n\\t * @param shares already deployed TradeableShares contract\\n\\t */\\n\\tfunction registerSharesContract(TradeableShares shares) external;\\n\\n\\t/**\\n\\t * @notice Executed only by the previously registered TradeableShares contracts\\n\\t *      to notify the factory about the subject change.\\n\\t *\\n\\t * @dev The factory may throw if the subject is already taken by another contract\\n\\t */\\n\\tfunction notifySubjectUpdated() external;\\n}\\n\\n\",\"keccak256\":\"0xaa4be2c4212a8f755009135c3b4f69fa7de18a03ccc087f44b0b01cfc1c4fe70\",\"license\":\"MIT\"},\"contracts/bonding_curves/SharesSubjectLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../interfaces/ERC721Spec.sol\\\";\\nimport \\\"../interfaces/ERC721SpecExt.sol\\\";\\nimport \\\"./TradeableShares.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title Shares Subject Library\\n *\\n * @notice Auxiliary functions to work with SharesSubject struct\\n */\\nlibrary SharesSubjectLib {\\n\\t/**\\n\\t * @notice Determines current owner of the shares subject, which is a corresponding NFT owner\\n\\t *\\n\\t * @dev This function returns zero address if NFT doesn't exist, or even if NFT contract doesn't exist\\n\\t *\\n\\t * @param sharesSubject shares subject, owner of the curve\\n\\t * @return address of the issuer, underlying NFT owner; or zero address\\n\\t */\\n\\tfunction getSharesIssuer(TradeableShares.SharesSubject memory sharesSubject) internal view returns(address) {\\n\\t\\t// we have to check if the address is callable, otherwise staticall would throw\\n\\t\\tif(isCallable(sharesSubject.tokenAddress)) {\\n\\t\\t\\t// try to avoid an exception / failed call in the ownerOf function by checking NFT existence first\\n\\t\\t\\t// this is required *only* to avoid \\\"partially failed\\\" transaction display on etherscan\\n\\t\\t\\t{\\n\\t\\t\\t\\t// we use staticcall instead of ABI function call to guaranty immutable call\\n\\t\\t\\t\\t(bool success, bytes memory data) = sharesSubject.tokenAddress.staticcall{gas: 4900}(\\n\\t\\t\\t\\t\\t// MintableERC721 interface: function exists(uint256) external view returns(bool)\\n\\t\\t\\t\\t\\tabi.encodeWithSelector(MintableERC721.exists.selector, sharesSubject.tokenId)\\n\\t\\t\\t\\t);\\n\\t\\t\\t\\t// only if the call was successful\\n\\t\\t\\t\\tif(success) {\\n\\t\\t\\t\\t\\t// try to decode the result as a bool,\\n\\t\\t\\t\\t\\t// and if we know for sure token doesn't exist,\\n\\t\\t\\t\\t\\tif(!abi.decode(data, (bool))) {\\n\\t\\t\\t\\t\\t\\t// just return zero address as a default result in case of any error\\n\\t\\t\\t\\t\\t\\treturn address(0);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\t// try to get the ERC721 owner of the underlying NFT\\n\\t\\t\\t{\\n\\t\\t\\t\\t// we use staticcall instead of ABI function call to guaranty immutable call\\n\\t\\t\\t\\t(bool success, bytes memory data) = sharesSubject.tokenAddress.staticcall{gas: 4900}(\\n\\t\\t\\t\\t\\t// ERC721 interface: function ownerOf(uint256) external view returns(address)\\n\\t\\t\\t\\t\\tabi.encodeWithSelector(ERC721.ownerOf.selector, sharesSubject.tokenId)\\n\\t\\t\\t\\t);\\n\\t\\t\\t\\t// only if the call was successful\\n\\t\\t\\t\\tif(success) {\\n\\t\\t\\t\\t\\t// try to decode the result as an address and return\\n\\t\\t\\t\\t\\treturn abi.decode(data, (address));\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// return the default zero address value in case of any errors\\n\\t\\treturn address(0);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Determines the owner of the shares subject's underlying NFT collection\\n\\t *\\n\\t * @dev This function returns zero address if the underlying ERC721 contract is not OZ ownable\\n\\t *      (doesn't have `owner()` function), doesn't exist, or if any other error occurs\\n\\t *\\n\\t * @param sharesSubject shares subject, owner of the curve\\n\\t * @return address of the NFT collection owner (OZ ownable); or zero address\\n\\t */\\n\\tfunction getCollectionOwner(TradeableShares.SharesSubject memory sharesSubject) internal view returns(address) {\\n\\t\\t// we have to check if the address is callable, otherwise staticall would throw\\n\\t\\tif(isCallable(sharesSubject.tokenAddress)) {\\n\\t\\t\\t// try to derive the owner via the OZ Ownable interface owner()\\n\\t\\t\\t// we use staticcall instead of ABI function call to guaranty immutable call\\n\\t\\t\\t(bool success, bytes memory data) = sharesSubject.tokenAddress.staticcall{gas: 4900}(\\n\\t\\t\\t\\t// OZ Ownable interface: function owner() external view returns(address)\\n\\t\\t\\t\\tabi.encodeWithSelector(Ownable.owner.selector)\\n\\t\\t\\t);\\n\\n\\t\\t\\t// only if the call was successful\\n\\t\\t\\tif(success) {\\n\\t\\t\\t\\t// try to decode the result as an address and return\\n\\t\\t\\t\\treturn abi.decode(data, (address));\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// return the default zero address value in case of any errors\\n\\t\\treturn address(0);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Calculates the keccak256 bytes32 key for the shares subject to be used in the mappings\\n\\t *\\n\\t * @param sharesSubject shares subject, owner of the curve\\n\\t * @return keccak256 of the shares subject\\n\\t */\\n\\tfunction getSharesKey(TradeableShares.SharesSubject memory sharesSubject) internal pure returns(bytes32) {\\n\\t\\t// delegate to `getSharesKey`\\n\\t\\treturn getSharesKey(sharesSubject.tokenAddress, sharesSubject.tokenId);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Calculates the keccak256 bytes32 key for the shares subject to be used in the mappings\\n\\t *\\n\\t * @param tokenAddress shares subject token address (NFT address)\\n\\t * @param tokenId shares subject token ID (NFT ID)\\n\\t * @return keccak256 of the shares subject\\n\\t */\\n\\tfunction getSharesKey(address tokenAddress, uint256 tokenId) internal pure returns(bytes32) {\\n\\t\\t// calculate the keccak256 from the concatenated internals of the SharesSubject struct\\n\\t\\treturn keccak256(abi.encode(tokenAddress, tokenId));\\n\\t}\\n\\n\\t/**\\n\\t * @notice Checks if two subjects - subject 1 and subject 2 - are equal\\n\\t *      Returns false if any of the subjects is not initialized (have zero ERC721 address)\\n\\t *\\n\\t * @param sharesSubject1 subject 1\\n\\t * @param sharesSubject2 subject 2\\n\\t * @return true if subject 1 and subject 2 are equal\\n\\t */\\n\\tfunction equals(\\n\\t\\tTradeableShares.SharesSubject memory sharesSubject1,\\n\\t\\tTradeableShares.SharesSubject memory sharesSubject2\\n\\t) internal pure returns(bool) {\\n\\t\\treturn sharesSubject1.tokenAddress != address(0)\\n\\t\\t\\t&& sharesSubject1.tokenAddress == sharesSubject2.tokenAddress\\n\\t\\t\\t&& sharesSubject1.tokenId == sharesSubject2.tokenId;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Verifies if the shares subject contains a value; this function is useful\\n\\t *      to check if the value in storage (mapping) was initialized\\n\\t *\\n\\t * @param sharesSubject the shares subject to check\\n\\t * @return true if the subject has a value, false otherwise (zero value)\\n\\t */\\n\\tfunction isZero(TradeableShares.SharesSubject memory sharesSubject) internal pure returns(bool) {\\n\\t\\treturn sharesSubject.tokenAddress == address(0) && sharesSubject.tokenId == 0;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Checks if account can be called (is callable, already deployed contract)\\n\\t *\\n\\t * @dev Verifies if the bytecode on the specified address is present\\n\\t *\\n\\t * @param account an address to check\\n\\t * @return true if address denotes already deployed callable contract\\n\\t */\\n\\tfunction isCallable(address account) internal view returns(bool) {\\n\\t\\t// This method relies on extcodesize, which returns 0 for contracts in\\n\\t\\t// construction, since the code is only stored at the end of the\\n\\t\\t// constructor execution.\\n\\n\\t\\tuint256 size;\\n\\t\\tassembly {\\n\\t\\t\\tsize := extcodesize(account)\\n\\t\\t}\\n\\t\\treturn size > 0;\\n\\t}\\n}\\n\",\"keccak256\":\"0xc8e53dcf66c187678a41e9ae001dca89f83200c342cad08b93c6877a8fdf6416\",\"license\":\"MIT\"},\"contracts/bonding_curves/TradeableShares.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./BondingCurve.sol\\\";\\nimport \\\"./HoldersRewardsDistributor.sol\\\";\\n\\n/**\\n * @title Tradeable Shares\\n *\\n * @notice Tradeable shares is a non-transferable, but buyable/sellable fungible token-like asset,\\n *      which is sold/bought solely by the shares contract at the predefined by\\n *      the bonding curve function price\\n *\\n * @notice The shares is bound to its \\\"subject\\\" \\u2013 an NFT; the NFT owner gets the subject fee\\n *      emerging in every buy/sell operation\\n *\\n * @dev Based on the friend.tech FriendtechSharesV1.sol\\n */\\ninterface TradeableShares is BondingCurve {\\n\\t/**\\n\\t * @notice Shares subject is an NFT defined by its ERC721 contract address and NFT ID\\n\\t *       Note: this is different from the original FriendTech implementation where\\n\\t *       shares subject is always equal to the issuer address\\n\\t */\\n\\tstruct SharesSubject {\\n\\t\\t/// @dev ERC721 contract address\\n\\t\\taddress tokenAddress;\\n\\n\\t\\t/// @dev NFT ID\\n\\t\\tuint256 tokenId;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Fired in `buyShares` and `sellShares` functions, this event logs\\n\\t *      the entire trading activity happening on the curve\\n\\t *\\n\\t * @dev Trader, that is the buyer or seller, depending on the operation type is the transaction sender\\n\\t *\\n\\t * @param beneficiary the address which receives shares or funds, usually this is the trader itself\\n\\t * @param issuer subject issuer, usually an owner of the NFT defined by the subject\\n\\t * @param isBuy true if the event comes from the `buyShares` and represents the buy operation,\\n\\t *      false if the event comes from the `sellShares` and represents the sell operation\\n\\t * @param sharesAmount amount of the shares bought or sold (see `isBuy`)\\n\\t * @param paidAmount amount of ETH spent or gained by the buyer or seller;\\n\\t *      this is implementation dependent and can represent an amount of ERC20 payment token\\n\\t * @param protocolFeeAmount amount of fees paid to the protocol\\n\\t * @param holdersFeeAmount amount of fees paid to the shares holders\\n\\t * @param subjectFeeAmount amount of fees paid to the subject (issuer)\\n\\t * @param supply total shares supply after the operation\\n\\t */\\n\\tevent Trade(\\n\\t\\taddress indexed beneficiary,\\n\\t\\taddress indexed issuer,\\n\\t\\tbool indexed isBuy,\\n\\t\\tuint256 sharesAmount,\\n\\t\\tuint256 paidAmount,\\n\\t\\tuint256 protocolFeeAmount,\\n\\t\\tuint256 holdersFeeAmount,\\n\\t\\tuint256 subjectFeeAmount,\\n\\t\\tuint256 supply\\n\\t);\\n\\n\\t/**\\n\\t * @notice Shares subject, usually defined as NFT (ERC721 contract address + NFT ID)\\n\\t *\\n\\t * @dev Immutable, client applications may cache this value\\n\\t *\\n\\t * @return Shares subject as a SharesSubject struct, this is an NFT if all currently known implementations\\n\\t */\\n\\tfunction getSharesSubject() external view returns(SharesSubject calldata);\\n\\n\\t/**\\n\\t * @notice Protocol fee destination, the address protocol fee is sent to\\n\\t *\\n\\t * @dev Mutable, can be changed by the protocol fee manager\\n\\t *\\n\\t * @return the address where the protocol fee is sent to\\n\\t */\\n\\tfunction getProtocolFeeDestination() external view returns(address);\\n\\n\\t/**\\n\\t * @notice Protocol fee percent, applied to all the buy and sell operations;\\n\\t *      the fee percent is defined with the 18 decimals, 10^18 corresponds to 100%\\n\\t *\\n\\t * @notice Protocol fee is sent to the protocol fee destination (see `getProtocolFeeDestination`)\\n\\t *\\n\\t * @dev Immutable, client applications may cache this value\\n\\t *\\n\\t * @return protocol fee percent with the 18 decimals (10^18 is 100%)\\n\\t */\\n\\tfunction getProtocolFeePercent() external view returns(uint256);\\n\\n\\t/**\\n\\t * @notice Protocol fee destination and protocol fee percent as a tuple;\\n\\t *      the fee percent is defined with the 18 decimals, 10^18 corresponds to 100%\\n\\t *\\n\\t * @dev Implementation must always return zero fee percent if fee destination is zero address\\n\\t *\\n\\t * @return feeDestination protocol fee destination\\n\\t * @return feePercent protocol fee percent, zero if protocol fee destination is zero\\n\\t */\\n\\tfunction getProtocolFeeInfo() external view returns(address feeDestination, uint256 feePercent);\\n\\n\\t/**\\n\\t * @notice Shares holders reward distributor contract attached to the shares contract\\n\\t *      in order to receive its portion of the fees to be distributed among the shares holders\\n\\t *\\n\\t * @dev Immutable, client applications may cache this value; holders fee destination is not\\n\\t *      an arbitrary address capable of receiving ETH or ERC20, but a HoldersRewardsDistributor\\n\\t *      smart contract, which not only receives the fees but also receives updated on the\\n\\t *      trading activity in the shares contract\\n\\t *\\n\\t * @return the contract where the holders fee is sent to\\n\\t */\\n\\tfunction getHoldersFeeDestination() external view returns(HoldersRewardsDistributor);\\n\\n\\t/**\\n\\t * @notice Shares holders fee percent, applied to all the buy and sell operations;\\n\\t *      the fee percent is defined with the 18 decimals, 10^18 corresponds to 100%\\n\\t *\\n\\t * @notice Shares holders fee is sent to the holders fee destination (see `getHoldersFeeDestination`)\\n\\t *\\n\\t * @dev Immutable, client applications may cache this value\\n\\t *\\n\\t * @return shares holders fee percent with the 18 decimals (10^18 is 100%)\\n\\t */\\n\\tfunction getHoldersFeePercent() external view returns(uint256);\\n\\n\\t/**\\n\\t * @notice Shares holders fee destination and shares holders fee percent as a tuple;\\n\\t *      the fee percent is defined with the 18 decimals, 10^18 corresponds to 100%\\n\\t *\\n\\t * @dev Implementation must always return zero fee percent if fee destination is zero\\n\\t *\\n\\t * @return feeDestination shares holders fee destination\\n\\t * @return feePercent shares holders fee percent, zero if holders fee destination is zero\\n\\t */\\n\\tfunction getHoldersFeeInfo() external view returns(HoldersRewardsDistributor feeDestination, uint256 feePercent);\\n\\n\\t/**\\n\\t * @notice Subject fee destination and subject fee percent as a tuple;\\n\\t *      subject fee destination is shares issuer address;\\n\\t *      the fee percent is defined with the 18 decimals, 10^18 corresponds to 100%;\\n\\t *\\n\\t * @dev Implementation must always return zero fee percent if fee destination is zero address\\n\\t *\\n\\t * @return feeDestination protocol fee destination\\n\\t * @return feePercent protocol fee percent, zero if subject fee destination is zero\\n\\t */\\n\\tfunction getSubjectFeeInfo() external view returns(address feeDestination, uint256 feePercent);\\n\\n\\t/**\\n\\t * @notice Subject fee percent, applied to all the buy and sell operations,\\n\\t *      the fee percent is defined with the 18 decimals, 10^18 corresponds to 100%\\n\\t *\\n\\t * @notice Subject fee is sent to the subject fee issuer (see `getSharesIssuer`)\\n\\t *\\n\\t * @dev Immutable, client applications may cache this value\\n\\t *\\n\\t * @return subject fee percent with the 18 decimals (10^18 is 100%)\\n\\t */\\n\\tfunction getSubjectFeePercent() external view returns(uint256);\\n\\n\\t/**\\n\\t * @notice Shares issuer, the receiver of the shares fees\\n\\t *\\n\\t * @dev Mutable, changes (potentially frequently and unpredictably) when the NFT owner changes;\\n\\t *      subject to the front-run attacks, off-chain client applications must not rely on this address\\n\\t *      in anyway\\n\\t *\\n\\t * @return nftOwner subject issuer, the owner of the NFT\\n\\t */\\n\\tfunction getSharesIssuer() external view returns(address nftOwner);\\n\\n\\t/**\\n\\t * @notice Shares balance of the given holder; this function is similar to ERC20.balanceOf()\\n\\t *\\n\\t * @param holder the address to check the balance for\\n\\t *\\n\\t * @return balance number of shares the holder has\\n\\t */\\n\\tfunction getSharesBalance(address holder) external view returns(uint256 balance);\\n\\n\\t/**\\n\\t * @notice Total amount of the shares in existence, the sum of all individual shares balances;\\n\\t *      this function is similar to ERC20.totalSupply()\\n\\t *\\n\\t * @return supply total shares supply\\n\\t */\\n\\tfunction getSharesSupply() external view returns(uint256 supply);\\n\\n\\t/**\\n\\t * @notice The price of the `amount` of shares to buy calculated based on\\n\\t *      the specified total shares supply\\n\\t *\\n\\t * @param supply total shares supply\\n\\t * @param amount number of shares to buy\\n\\t * @return the price of the shares to buy\\n\\t */\\n\\tfunction getBuyPrice(uint256 supply, uint256 amount) external pure returns(uint256);\\n\\n\\t/**\\n\\t * @notice The price of the `amount` of shares to sell calculated based on\\n\\t *      the specified total shares supply\\n\\t *\\n\\t * @param supply total shares supply\\n\\t * @param amount number of shares to sell\\n\\t * @return the price of the shares to sell\\n\\t */\\n\\tfunction getSellPrice(uint256 supply, uint256 amount) external pure returns(uint256);\\n\\n\\t/**\\n\\t * @notice The price of the `amount` of shares to buy, including all fees;\\n\\t *      calculated based on the specified total shares supply and fees percentages\\n\\t *\\n\\t * @param supply total shares supply\\n\\t * @param amount number of shares to buy\\n\\t * @param protocolFeePercent protocol fee percent\\n\\t * @param holdersFeePercent shares holders fee percent\\n\\t * @param subjectFeePercent protocol fee percent\\n\\t * @return the price of the shares to buy\\n\\t */\\n\\tfunction getBuyPriceAfterFee(\\n\\t\\tuint256 supply,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 protocolFeePercent,\\n\\t\\tuint256 holdersFeePercent,\\n\\t\\tuint256 subjectFeePercent\\n\\t) external pure returns(uint256);\\n\\n\\t/**\\n\\t * @notice The price of the `amount` of shares to sell, including all fees;\\n\\t *      calculated based on the specified total shares supply and fees percentages\\n\\t *\\n\\t * @param supply total shares supply\\n\\t * @param amount number of shares to sell\\n\\t * @param protocolFeePercent protocol fee percent\\n\\t * @param holdersFeePercent shares holders fee percent\\n\\t * @param subjectFeePercent protocol fee percent\\n\\t * @return the price of the shares to sell\\n\\t */\\n\\tfunction getSellPriceAfterFee(\\n\\t\\tuint256 supply,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 protocolFeePercent,\\n\\t\\tuint256 holdersFeePercent,\\n\\t\\tuint256 subjectFeePercent\\n\\t) external pure returns(uint256);\\n\\n\\t/**\\n\\t * @notice Current price of the `amount` of shares to buy; calculated based on\\n\\t *      the current total shares supply\\n\\t *\\n\\t * @param amount number of shares to buy\\n\\t * @return the price of the shares to buy\\n\\t */\\n\\tfunction getBuyPrice(uint256 amount) external view returns(uint256);\\n\\n\\t/**\\n\\t * @notice Current price of the `amount` of shares to sell; calculated based on\\n\\t *      the current total shares supply\\n\\t *\\n\\t * @param amount number of shares to sell\\n\\t * @return the price of the shares to sell\\n\\t */\\n\\tfunction getSellPrice(uint256 amount) external view returns(uint256);\\n\\n\\t/**\\n\\t * @notice Current price of the `amount` of shares to buy, including all fees;\\n\\t *      calculated based on the current total shares supply and fees percentages\\n\\t *\\n\\t * @param amount number of shares to buy\\n\\t * @return the price of the shares to buy\\n\\t */\\n\\tfunction getBuyPriceAfterFee(uint256 amount) external view returns(uint256);\\n\\n\\t/**\\n\\t * @notice Current price of the `amount` of shares to sell, including all fees;\\n\\t *      calculated based on the current total shares supply and fees percentages\\n\\t *\\n\\t * @param amount number of shares to sell\\n\\t * @return the price of the shares to sell\\n\\t */\\n\\tfunction getSellPriceAfterFee(uint256 amount) external view returns(uint256);\\n\\n\\t/**\\n\\t * @notice Buy `amount` of shares. Sender has to supply `getBuyPriceAfterFee(amount)` ETH.\\n\\t *      First share can be bought only by current subject issuer.\\n\\t *\\n\\t * @dev Depending on the implementation, ERC20 token payment may be required instead of ETH.\\n\\t *      In such a case, implementation must through if ETH is sent, effectively overriding\\n\\t *      the function definition as non-payable\\n\\t *\\n\\t * @param amount amount of the shares to buy\\n\\t */\\n\\tfunction buyShares(uint256 amount) external payable;\\n\\n\\t/**\\n\\t * @notice Buy `amount` of shares in the favor of the address specified (beneficiary).\\n\\t *      Sender has to supply `getBuyPriceAfterFee(amount)` ETH.\\n\\t *      First share can be bought only by current subject issuer.\\n\\t *\\n\\t * @dev Depending on the implementation, ERC20 token payment may be required instead of ETH.\\n\\t *      In such a case, implementation must through if ETH is sent, effectively overriding\\n\\t *      the function definition as non-payable\\n\\t *\\n\\t * @param amount amount of the shares to buy\\n\\t * @param beneficiary an address receiving the shares\\n\\t */\\n\\tfunction buySharesTo(uint256 amount, address beneficiary) external payable;\\n\\n\\t/**\\n\\t * @notice Sell `amount` of shares. Sender gets `getSellPriceAfterFee(amount)` of ETH.\\n\\t *      Last share cannot be sold.\\n\\t *\\n\\t * @dev Depending on the implementation, ERC20 token may be payed instead of ETH.\\n\\t *\\n\\t * @param amount amount of the shares to sell\\n\\t */\\n\\tfunction sellShares(uint256 amount) external;\\n\\n\\t/**\\n\\t * @notice Sell `amount` of shares in the favor of the address specified (beneficiary).\\n\\t *      The beneficiary gets `getSellPriceAfterFee(amount)` of ETH.\\n\\t *      Last share cannot be sold.\\n\\t *\\n\\t * @dev Depending on the implementation, ERC20 token may be payed instead of ETH.\\n\\t *\\n\\t * @param amount amount of the shares to sell\\n\\t * @param beneficiary an address receiving the funds from the sale\\n\\t */\\n\\tfunction sellSharesTo(uint256 amount, address payable beneficiary) external;\\n\\n\\t/**\\n\\t * @notice Cumulative value of all trades; allows to derive cumulative fees paid\\n\\t *\\n\\t * @dev This value cannot decrease over time; it can increase or remain constant\\n\\t *      if no trades are happening\\n\\t *\\n\\t * @return Sum of the modulo of all trading operations\\n\\t */\\n\\tfunction getTradeVolume() external view returns(uint256);\\n}\\n\",\"keccak256\":\"0x0f8402decde54a46b1722b836f72bac480e03e37ac86613ca9b93b9997a980c2\",\"license\":\"MIT\"},\"contracts/bonding_curves/TypedStructLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./SharesFactory.sol\\\";\\n\\n/**\\n * @title EIP712 Typed Struct Library\\n *\\n * @notice Calculates EIP712 typed structured data typeHash and hashStruct\\n */\\nlibrary TypedStructLib {\\n\\t/**\\n\\t * @notice SharesDeploymentRequest typeHash\\n\\t */\\n\\tfunction hashType(SharesFactory.SharesDeploymentRequest calldata) internal pure returns(bytes32) {\\n\\t\\t// hashType(SharesDeploymentRequest) = keccak256(\\\"SharesDeploymentRequest(ImplementationType implementationType,TradeableShares.SharesSubject sharesSubject,address issuer,uint256 amount,uint256 validFromTimestamp,uint256 expiresAtTimestamp,uint256 nonce)\\\")\\n\\t\\treturn 0x7acc9d8c19a06f50ae6d92c5e1206302e8aeac9f7f8bf014389ca2a4354650fd;\\n\\t}\\n\\n\\t/**\\n\\t * @notice SharesSubject typeHash\\n\\t */\\n\\tfunction hashType(TradeableShares.SharesSubject calldata) internal pure returns(bytes32) {\\n\\t\\t// hashType(SharesSubject) = keccak256(\\\"SharesSubject(address tokenAddress,uint256 tokenId)\\\")\\n\\t\\treturn 0x685dd8e2693cf377e50b3e95f06b61dff4c1705fa19df1071074d64f4e1469eb;\\n\\t}\\n\\n\\t/**\\n\\t * @notice SharesDeploymentRequest hashStruct\\n\\t */\\n\\tfunction hashStruct(SharesFactory.SharesDeploymentRequest calldata request) internal pure returns(bytes32) {\\n\\t\\treturn keccak256(abi.encode(\\n\\t\\t\\thashType(request),\\n\\t\\t\\trequest.implementationType,\\n\\t\\t\\thashStruct(request.sharesSubject),\\n\\t\\t\\trequest.issuer,\\n\\t\\t\\trequest.amount,\\n\\t\\t\\trequest.validFromTimestamp,\\n\\t\\t\\trequest.expiresAtTimestamp,\\n\\t\\t\\trequest.nonce\\n\\t\\t));\\n\\t}\\n\\n\\t/**\\n\\t * @notice SharesSubject hashStruct\\n\\t */\\n\\tfunction hashStruct(TradeableShares.SharesSubject calldata sharesSubject) internal pure returns(bytes32) {\\n\\t\\treturn keccak256(abi.encode(\\n\\t\\t\\thashType(sharesSubject),\\n\\t\\t\\tsharesSubject.tokenAddress,\\n\\t\\t\\tsharesSubject.tokenId\\n\\t\\t));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x03678123c881966bf24d36fd36e10eb966aa93a0692b5bd0348b957c02913704\",\"license\":\"MIT\"},\"contracts/interfaces/ERC1363Spec.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./ERC20Spec.sol\\\";\\nimport \\\"./ERC165Spec.sol\\\";\\n\\n/**\\n * @title ERC1363 Interface\\n *\\n * @dev Interface defining a ERC1363 Payable Token contract.\\n *      Implementing contracts MUST implement the ERC1363 interface as well as the ERC20 and ERC165 interfaces.\\n */\\ninterface ERC1363 is ERC20, ERC165  {\\n\\t/*\\n\\t * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n\\t * 0xb0202a11 ===\\n\\t *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n\\t *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n\\t *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n\\t *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n\\t *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n\\t *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n\\t */\\n\\n\\t/**\\n\\t * @notice Transfer tokens from `msg.sender` to another address and then call `onTransferReceived` on receiver\\n\\t * @param to address The address which you want to transfer to\\n\\t * @param value uint256 The amount of tokens to be transferred\\n\\t * @return true unless throwing\\n\\t */\\n\\tfunction transferAndCall(address to, uint256 value) external returns (bool);\\n\\n\\t/**\\n\\t * @notice Transfer tokens from `msg.sender` to another address and then call `onTransferReceived` on receiver\\n\\t * @param to address The address which you want to transfer to\\n\\t * @param value uint256 The amount of tokens to be transferred\\n\\t * @param data bytes Additional data with no specified format, sent in call to `to`\\n\\t * @return true unless throwing\\n\\t */\\n\\tfunction transferAndCall(address to, uint256 value, bytes memory data) external returns (bool);\\n\\n\\t/**\\n\\t * @notice Transfer tokens from one address to another and then call `onTransferReceived` on receiver\\n\\t * @param from address The address which you want to send tokens from\\n\\t * @param to address The address which you want to transfer to\\n\\t * @param value uint256 The amount of tokens to be transferred\\n\\t * @return true unless throwing\\n\\t */\\n\\tfunction transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n\\n\\t/**\\n\\t * @notice Transfer tokens from one address to another and then call `onTransferReceived` on receiver\\n\\t * @param from address The address which you want to send tokens from\\n\\t * @param to address The address which you want to transfer to\\n\\t * @param value uint256 The amount of tokens to be transferred\\n\\t * @param data bytes Additional data with no specified format, sent in call to `to`\\n\\t * @return true unless throwing\\n\\t */\\n\\tfunction transferFromAndCall(address from, address to, uint256 value, bytes memory data) external returns (bool);\\n\\n\\t/**\\n\\t * @notice Approve the passed address to spend the specified amount of tokens on behalf of msg.sender\\n\\t * and then call `onApprovalReceived` on spender.\\n\\t * @param spender address The address which will spend the funds\\n\\t * @param value uint256 The amount of tokens to be spent\\n\\t */\\n\\tfunction approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n\\t/**\\n\\t * @notice Approve the passed address to spend the specified amount of tokens on behalf of msg.sender\\n\\t * and then call `onApprovalReceived` on spender.\\n\\t * @param spender address The address which will spend the funds\\n\\t * @param value uint256 The amount of tokens to be spent\\n\\t * @param data bytes Additional data with no specified format, sent in call to `spender`\\n\\t */\\n\\tfunction approveAndCall(address spender, uint256 value, bytes memory data) external returns (bool);\\n}\\n\\n/**\\n * @title ERC1363Receiver Interface\\n *\\n * @dev Interface for any contract that wants to support `transferAndCall` or `transferFromAndCall`\\n *      from ERC1363 token contracts.\\n */\\ninterface ERC1363Receiver {\\n\\t/*\\n\\t * Note: the ERC-165 identifier for this interface is 0x88a7ca5c.\\n\\t * 0x88a7ca5c === bytes4(keccak256(\\\"onTransferReceived(address,address,uint256,bytes)\\\"))\\n\\t */\\n\\n\\t/**\\n\\t * @notice Handle the receipt of ERC1363 tokens\\n\\t *\\n\\t * @dev Any ERC1363 smart contract calls this function on the recipient\\n\\t *      after a `transfer` or a `transferFrom`. This function MAY throw to revert and reject the\\n\\t *      transfer. Return of other than the magic value MUST result in the\\n\\t *      transaction being reverted.\\n\\t *      Note: the token contract address is always the message sender.\\n\\t *\\n\\t * @param operator address The address which called `transferAndCall` or `transferFromAndCall` function\\n\\t * @param from address The address which are token transferred from\\n\\t * @param value uint256 The amount of tokens transferred\\n\\t * @param data bytes Additional data with no specified format\\n\\t * @return `bytes4(keccak256(\\\"onTransferReceived(address,address,uint256,bytes)\\\"))`\\n\\t *      unless throwing\\n\\t */\\n\\tfunction onTransferReceived(address operator, address from, uint256 value, bytes memory data) external returns (bytes4);\\n}\\n\\n/**\\n * @title ERC1363Spender Interface\\n *\\n * @dev Interface for any contract that wants to support `approveAndCall`\\n *      from ERC1363 token contracts.\\n */\\ninterface ERC1363Spender {\\n\\t/*\\n\\t * Note: the ERC-165 identifier for this interface is 0x7b04a2d0.\\n\\t * 0x7b04a2d0 === bytes4(keccak256(\\\"onApprovalReceived(address,uint256,bytes)\\\"))\\n\\t */\\n\\n\\t/**\\n\\t * @notice Handle the approval of ERC1363 tokens\\n\\t *\\n\\t * @dev Any ERC1363 smart contract calls this function on the recipient\\n\\t *      after an `approve`. This function MAY throw to revert and reject the\\n\\t *      approval. Return of other than the magic value MUST result in the\\n\\t *      transaction being reverted.\\n\\t *      Note: the token contract address is always the message sender.\\n\\t *\\n\\t * @param owner address The address which called `approveAndCall` function\\n\\t * @param value uint256 The amount of tokens to be spent\\n\\t * @param data bytes Additional data with no specified format\\n\\t * @return `bytes4(keccak256(\\\"onApprovalReceived(address,uint256,bytes)\\\"))`\\n\\t *      unless throwing\\n\\t */\\n\\tfunction onApprovalReceived(address owner, uint256 value, bytes memory data) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x5a9800736f8d59f69ddeb59babcc71ec0ba439150ea1ecac1f4c30d8e4a98d5e\",\"license\":\"MIT\"},\"contracts/interfaces/ERC165Spec.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title ERC-165 Standard Interface Detection\\n *\\n * @dev Interface of the ERC165 standard, as defined in the\\n *       https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * @dev Implementers can declare support of contract interfaces,\\n *      which can then be queried by others.\\n *\\n * @author Christian Reitwie\\u00dfner, Nick Johnson, Fabian Vogelsteller, Jordi Baylina, Konrad Feldmeier, William Entriken\\n */\\ninterface ERC165 {\\n\\t/**\\n\\t * @notice Query if a contract implements an interface\\n\\t *\\n\\t * @dev Interface identification is specified in ERC-165.\\n\\t *      This function uses less than 30,000 gas.\\n\\t *\\n\\t * @param interfaceID The interface identifier, as specified in ERC-165\\n\\t * @return `true` if the contract implements `interfaceID` and\\n\\t *      `interfaceID` is not 0xffffffff, `false` otherwise\\n\\t */\\n\\tfunction supportsInterface(bytes4 interfaceID) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x9b8e0a0ee2ddff1014108266f62a95dab3f76f08deba2e6177ec2ed251128f9d\",\"license\":\"MIT\"},\"contracts/interfaces/ERC20Spec.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title EIP-20: ERC-20 Token Standard\\n *\\n * @notice The ERC-20 (Ethereum Request for Comments 20), proposed by Fabian Vogelsteller in November 2015,\\n *      is a Token Standard that implements an API for tokens within Smart Contracts.\\n *\\n * @notice It provides functionalities like to transfer tokens from one account to another,\\n *      to get the current token balance of an account and also the total supply of the token available on the network.\\n *      Besides these it also has some other functionalities like to approve that an amount of\\n *      token from an account can be spent by a third party account.\\n *\\n * @notice If a Smart Contract implements the following methods and events it can be called an ERC-20 Token\\n *      Contract and, once deployed, it will be responsible to keep track of the created tokens on Ethereum.\\n *\\n * @notice See https://ethereum.org/en/developers/docs/standards/tokens/erc-20/\\n * @notice See https://eips.ethereum.org/EIPS/eip-20\\n */\\ninterface ERC20 {\\n\\t/**\\n\\t * @dev Fired in transfer(), transferFrom() to indicate that token transfer happened\\n\\t *\\n\\t * @param from an address tokens were consumed from\\n\\t * @param to an address tokens were sent to\\n\\t * @param value number of tokens transferred\\n\\t */\\n\\tevent Transfer(address indexed from, address indexed to, uint256 value);\\n\\n\\t/**\\n\\t * @dev Fired in approve() to indicate an approval event happened\\n\\t *\\n\\t * @param owner an address which granted a permission to transfer\\n\\t *      tokens on its behalf\\n\\t * @param spender an address which received a permission to transfer\\n\\t *      tokens on behalf of the owner `_owner`\\n\\t * @param value amount of tokens granted to transfer on behalf\\n\\t */\\n\\tevent Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n\\t/**\\n\\t * @return name of the token (ex.: USD Coin)\\n\\t */\\n\\t// OPTIONAL - This method can be used to improve usability,\\n\\t// but interfaces and other contracts MUST NOT expect these values to be present.\\n\\t// function name() external view returns (string memory);\\n\\n\\t/**\\n\\t * @return symbol of the token (ex.: USDC)\\n\\t */\\n\\t// OPTIONAL - This method can be used to improve usability,\\n\\t// but interfaces and other contracts MUST NOT expect these values to be present.\\n\\t// function symbol() external view returns (string memory);\\n\\n\\t/**\\n\\t * @dev Returns the number of decimals used to get its user representation.\\n\\t *      For example, if `decimals` equals `2`, a balance of `505` tokens should\\n\\t *      be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n\\t *\\n\\t * @dev Tokens usually opt for a value of 18, imitating the relationship between\\n\\t *      Ether and Wei. This is the value {ERC20} uses, unless this function is\\n\\t *      overridden;\\n\\t *\\n\\t * @dev NOTE: This information is only used for _display_ purposes: it in\\n\\t *      no way affects any of the arithmetic of the contract, including\\n\\t *      {IERC20-balanceOf} and {IERC20-transfer}.\\n\\t *\\n\\t * @return token decimals\\n\\t */\\n\\t// OPTIONAL - This method can be used to improve usability,\\n\\t// but interfaces and other contracts MUST NOT expect these values to be present.\\n\\t// function decimals() external view returns (uint8);\\n\\n\\t/**\\n\\t * @return the amount of tokens in existence\\n\\t */\\n\\tfunction totalSupply() external view returns (uint256);\\n\\n\\t/**\\n\\t * @notice Gets the balance of a particular address\\n\\t *\\n\\t * @param _owner the address to query the the balance for\\n\\t * @return balance an amount of tokens owned by the address specified\\n\\t */\\n\\tfunction balanceOf(address _owner) external view returns (uint256 balance);\\n\\n\\t/**\\n\\t * @notice Transfers some tokens to an external address or a smart contract\\n\\t *\\n\\t * @dev Called by token owner (an address which has a\\n\\t *      positive token balance tracked by this smart contract)\\n\\t * @dev Throws on any error like\\n\\t *      * insufficient token balance or\\n\\t *      * incorrect `_to` address:\\n\\t *          * zero address or\\n\\t *          * self address or\\n\\t *          * smart contract which doesn't support ERC20\\n\\t *\\n\\t * @param _to an address to transfer tokens to,\\n\\t *      must be either an external address or a smart contract,\\n\\t *      compliant with the ERC20 standard\\n\\t * @param _value amount of tokens to be transferred,, zero\\n\\t *      value is allowed\\n\\t * @return success true on success, throws otherwise\\n\\t */\\n\\tfunction transfer(address _to, uint256 _value) external returns (bool success);\\n\\n\\t/**\\n\\t * @notice Transfers some tokens on behalf of address `_from' (token owner)\\n\\t *      to some other address `_to`\\n\\t *\\n\\t * @dev Called by token owner on his own or approved address,\\n\\t *      an address approved earlier by token owner to\\n\\t *      transfer some amount of tokens on its behalf\\n\\t * @dev Throws on any error like\\n\\t *      * insufficient token balance or\\n\\t *      * incorrect `_to` address:\\n\\t *          * zero address or\\n\\t *          * same as `_from` address (self transfer)\\n\\t *          * smart contract which doesn't support ERC20\\n\\t *\\n\\t * @param _from token owner which approved caller (transaction sender)\\n\\t *      to transfer `_value` of tokens on its behalf\\n\\t * @param _to an address to transfer tokens to,\\n\\t *      must be either an external address or a smart contract,\\n\\t *      compliant with the ERC20 standard\\n\\t * @param _value amount of tokens to be transferred,, zero\\n\\t *      value is allowed\\n\\t * @return success true on success, throws otherwise\\n\\t */\\n\\tfunction transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\\n\\n\\t/**\\n\\t * @notice Approves address called `_spender` to transfer some amount\\n\\t *      of tokens on behalf of the owner (transaction sender)\\n\\t *\\n\\t * @dev Transaction sender must not necessarily own any tokens to grant the permission\\n\\t *\\n\\t * @param _spender an address approved by the caller (token owner)\\n\\t *      to spend some tokens on its behalf\\n\\t * @param _value an amount of tokens spender `_spender` is allowed to\\n\\t *      transfer on behalf of the token owner\\n\\t * @return success true on success, throws otherwise\\n\\t */\\n\\tfunction approve(address _spender, uint256 _value) external returns (bool success);\\n\\n\\t/**\\n\\t * @notice Returns the amount which _spender is still allowed to withdraw from _owner.\\n\\t *\\n\\t * @dev A function to check an amount of tokens owner approved\\n\\t *      to transfer on its behalf by some other address called \\\"spender\\\"\\n\\t *\\n\\t * @param _owner an address which approves transferring some tokens on its behalf\\n\\t * @param _spender an address approved to transfer some tokens on behalf\\n\\t * @return remaining an amount of tokens approved address `_spender` can transfer on behalf\\n\\t *      of token owner `_owner`\\n\\t */\\n\\tfunction allowance(address _owner, address _spender) external view returns (uint256 remaining);\\n}\\n\\n/**\\n * @title Mintable/burnable ERC20 Extension\\n *\\n * @notice Adds mint/burn functions to ERC20 interface, these functions\\n *      are usually present in ERC20 implementations, but these become\\n *      a must for the bridged tokens in L2 since the bridge on L2\\n *      needs to have a way to mint tokens deposited from L1 to L2\\n *      and to burn tokens to be withdrawn from L2 to L1\\n */\\ninterface MintableBurnableERC20 is ERC20 {\\n\\t/**\\n\\t * @dev Mints (creates) some tokens to address specified\\n\\t * @dev The value specified is treated as is without taking\\n\\t *      into account what `decimals` value is\\n\\t *\\n\\t * @param _to an address to mint tokens to\\n\\t * @param _value an amount of tokens to mint (create)\\n\\t */\\n\\tfunction mint(address _to, uint256 _value) external;\\n\\n\\t/**\\n\\t * @dev Burns (destroys) some tokens from the address specified\\n\\t *\\n\\t * @dev The value specified is treated as is without taking\\n\\t *      into account what `decimals` value is\\n\\t *\\n\\t * @param _from an address to burn some tokens from\\n\\t * @param _value an amount of tokens to burn (destroy)\\n\\t */\\n\\tfunction burn(address _from, uint256 _value) external;\\n}\\n\",\"keccak256\":\"0xb07fc5b34a9814eac569e73cb23d352e0547b5736e09c9e50234bc23344144e1\",\"license\":\"MIT\"},\"contracts/interfaces/ERC721Spec.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./ERC165Spec.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard\\n *\\n * @notice See https://eips.ethereum.org/EIPS/eip-721\\n *\\n * @dev Solidity issue #3412: The ERC721 interfaces include explicit mutability guarantees for each function.\\n *      Mutability guarantees are, in order weak to strong: payable, implicit nonpayable, view, and pure.\\n *      Implementation MUST meet the mutability guarantee in this interface and MAY meet a stronger guarantee.\\n *      For example, a payable function in this interface may be implemented as nonpayable\\n *      (no state mutability specified) in implementing contract.\\n *      It is expected a later Solidity release will allow stricter contract to inherit from this interface,\\n *      but current workaround is that we edit this interface to add stricter mutability before inheriting:\\n *      we have removed all \\\"payable\\\" modifiers.\\n *\\n * @dev The ERC-165 identifier for this interface is 0x80ac58cd.\\n *\\n * @author William Entriken, Dieter Shirley, Jacob Evans, Nastassia Sachs\\n */\\ninterface ERC721 is ERC165 {\\n\\t/// @dev This emits when ownership of any NFT changes by any mechanism.\\n\\t///  This event emits when NFTs are created (`from` == 0) and destroyed\\n\\t///  (`to` == 0). Exception: during contract creation, any number of NFTs\\n\\t///  may be created and assigned without emitting Transfer. At the time of\\n\\t///  any transfer, the approved address for that NFT (if any) is reset to none.\\n\\tevent Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\\n\\n\\t/// @dev This emits when the approved address for an NFT is changed or\\n\\t///  reaffirmed. The zero address indicates there is no approved address.\\n\\t///  When a Transfer event emits, this also indicates that the approved\\n\\t///  address for that NFT (if any) is reset to none.\\n\\tevent Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\\n\\n\\t/// @dev This emits when an operator is enabled or disabled for an owner.\\n\\t///  The operator can manage all NFTs of the owner.\\n\\tevent ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\\n\\n\\t/// @notice Count all NFTs assigned to an owner\\n\\t/// @dev NFTs assigned to the zero address are considered invalid, and this\\n\\t///  function throws for queries about the zero address.\\n\\t/// @param _owner An address for whom to query the balance\\n\\t/// @return The number of NFTs owned by `_owner`, possibly zero\\n\\tfunction balanceOf(address _owner) external view returns (uint256);\\n\\n\\t/// @notice Find the owner of an NFT\\n\\t/// @dev NFTs assigned to zero address are considered invalid, and queries\\n\\t///  about them do throw.\\n\\t/// @param _tokenId The identifier for an NFT\\n\\t/// @return The address of the owner of the NFT\\n\\tfunction ownerOf(uint256 _tokenId) external view returns (address);\\n\\n\\t/// @notice Transfers the ownership of an NFT from one address to another address\\n\\t/// @dev Throws unless `msg.sender` is the current owner, an authorized\\n\\t///  operator, or the approved address for this NFT. Throws if `_from` is\\n\\t///  not the current owner. Throws if `_to` is the zero address. Throws if\\n\\t///  `_tokenId` is not a valid NFT. When transfer is complete, this function\\n\\t///  checks if `_to` is a smart contract (code size > 0). If so, it calls\\n\\t///  `onERC721Received` on `_to` and throws if the return value is not\\n\\t///  `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.\\n\\t/// @param _from The current owner of the NFT\\n\\t/// @param _to The new owner\\n\\t/// @param _tokenId The NFT to transfer\\n\\t/// @param _data Additional data with no specified format, sent in call to `_to`\\n\\tfunction safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata _data) external /*payable*/;\\n\\n\\t/// @notice Transfers the ownership of an NFT from one address to another address\\n\\t/// @dev This works identically to the other function with an extra data parameter,\\n\\t///  except this function just sets data to \\\"\\\".\\n\\t/// @param _from The current owner of the NFT\\n\\t/// @param _to The new owner\\n\\t/// @param _tokenId The NFT to transfer\\n\\tfunction safeTransferFrom(address _from, address _to, uint256 _tokenId) external /*payable*/;\\n\\n\\t/// @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE\\n\\t///  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE\\n\\t///  THEY MAY BE PERMANENTLY LOST\\n\\t/// @dev Throws unless `msg.sender` is the current owner, an authorized\\n\\t///  operator, or the approved address for this NFT. Throws if `_from` is\\n\\t///  not the current owner. Throws if `_to` is the zero address. Throws if\\n\\t///  `_tokenId` is not a valid NFT.\\n\\t/// @param _from The current owner of the NFT\\n\\t/// @param _to The new owner\\n\\t/// @param _tokenId The NFT to transfer\\n\\tfunction transferFrom(address _from, address _to, uint256 _tokenId) external /*payable*/;\\n\\n\\t/// @notice Change or reaffirm the approved address for an NFT\\n\\t/// @dev The zero address indicates there is no approved address.\\n\\t///  Throws unless `msg.sender` is the current NFT owner, or an authorized\\n\\t///  operator of the current owner.\\n\\t/// @param _approved The new approved NFT controller\\n\\t/// @param _tokenId The NFT to approve\\n\\tfunction approve(address _approved, uint256 _tokenId) external /*payable*/;\\n\\n\\t/// @notice Enable or disable approval for a third party (\\\"operator\\\") to manage\\n\\t///  all of `msg.sender`'s assets\\n\\t/// @dev Emits the ApprovalForAll event. The contract MUST allow\\n\\t///  multiple operators per owner.\\n\\t/// @param _operator Address to add to the set of authorized operators\\n\\t/// @param _approved True if the operator is approved, false to revoke approval\\n\\tfunction setApprovalForAll(address _operator, bool _approved) external;\\n\\n\\t/// @notice Get the approved address for a single NFT\\n\\t/// @dev Throws if `_tokenId` is not a valid NFT.\\n\\t/// @param _tokenId The NFT to find the approved address for\\n\\t/// @return The approved address for this NFT, or the zero address if there is none\\n\\tfunction getApproved(uint256 _tokenId) external view returns (address);\\n\\n\\t/// @notice Query if an address is an authorized operator for another address\\n\\t/// @param _owner The address that owns the NFTs\\n\\t/// @param _operator The address that acts on behalf of the owner\\n\\t/// @return True if `_operator` is an approved operator for `_owner`, false otherwise\\n\\tfunction isApprovedForAll(address _owner, address _operator) external view returns (bool);\\n}\\n\\n/// @dev Note: the ERC-165 identifier for this interface is 0x150b7a02.\\ninterface ERC721TokenReceiver {\\n\\t/// @notice Handle the receipt of an NFT\\n\\t/// @dev The ERC721 smart contract calls this function on the recipient\\n\\t///  after a `transfer`. This function MAY throw to revert and reject the\\n\\t///  transfer. Return of other than the magic value MUST result in the\\n\\t///  transaction being reverted.\\n\\t///  Note: the contract address is always the message sender.\\n\\t/// @param _operator The address which called `safeTransferFrom` function\\n\\t/// @param _from The address which previously owned the token\\n\\t/// @param _tokenId The NFT identifier which is being transferred\\n\\t/// @param _data Additional data with no specified format\\n\\t/// @return `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`\\n\\t///  unless throwing\\n\\tfunction onERC721Received(address _operator, address _from, uint256 _tokenId, bytes calldata _data) external returns(bytes4);\\n}\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n *\\n * @notice See https://eips.ethereum.org/EIPS/eip-721\\n *\\n * @dev The ERC-165 identifier for this interface is 0x5b5e139f.\\n *\\n * @author William Entriken, Dieter Shirley, Jacob Evans, Nastassia Sachs\\n */\\ninterface ERC721Metadata is ERC721 {\\n\\t/// @notice A descriptive name for a collection of NFTs in this contract\\n\\tfunction name() external view returns (string memory _name);\\n\\n\\t/// @notice An abbreviated name for NFTs in this contract\\n\\tfunction symbol() external view returns (string memory _symbol);\\n\\n\\t/// @notice A distinct Uniform Resource Identifier (URI) for a given asset.\\n\\t/// @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC\\n\\t///  3986. The URI may point to a JSON file that conforms to the \\\"ERC721\\n\\t///  Metadata JSON Schema\\\".\\n\\tfunction tokenURI(uint256 _tokenId) external view returns (string memory);\\n}\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n *\\n * @notice See https://eips.ethereum.org/EIPS/eip-721\\n *\\n * @dev The ERC-165 identifier for this interface is 0x780e9d63.\\n *\\n * @author William Entriken, Dieter Shirley, Jacob Evans, Nastassia Sachs\\n */\\ninterface ERC721Enumerable is ERC721 {\\n\\t/// @notice Count NFTs tracked by this contract\\n\\t/// @return A count of valid NFTs tracked by this contract, where each one of\\n\\t///  them has an assigned and queryable owner not equal to the zero address\\n\\tfunction totalSupply() external view returns (uint256);\\n\\n\\t/// @notice Enumerate valid NFTs\\n\\t/// @dev Throws if `_index` >= `totalSupply()`.\\n\\t/// @param _index A counter less than `totalSupply()`\\n\\t/// @return The token identifier for the `_index`th NFT,\\n\\t///  (sort order not specified)\\n\\tfunction tokenByIndex(uint256 _index) external view returns (uint256);\\n\\n\\t/// @notice Enumerate NFTs assigned to an owner\\n\\t/// @dev Throws if `_index` >= `balanceOf(_owner)` or if\\n\\t///  `_owner` is the zero address, representing invalid NFTs.\\n\\t/// @param _owner An address where we are interested in NFTs owned by them\\n\\t/// @param _index A counter less than `balanceOf(_owner)`\\n\\t/// @return The token identifier for the `_index`th NFT assigned to `_owner`,\\n\\t///   (sort order not specified)\\n\\tfunction tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe57d29caebdb7151575f0644ba5c5865fcc498e87f255aae97523871893f56c2\",\"license\":\"MIT\"},\"contracts/interfaces/ERC721SpecExt.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title Mintable ERC721\\n *\\n * @notice Defines mint capabilities for Alethea ERC721 tokens.\\n *      This interface should be treated as a definition of what mintable means for ERC721\\n *\\n * @author Basil Gorin\\n */\\ninterface MintableERC721 {\\n\\t/**\\n\\t * @notice Checks if specified token exists\\n\\t *\\n\\t * @dev Returns whether the specified token ID has an ownership\\n\\t *      information associated with it\\n\\t *\\n\\t * @param _tokenId ID of the token to query existence for\\n\\t * @return whether the token exists (true - exists, false - doesn't exist)\\n\\t */\\n\\tfunction exists(uint256 _tokenId) external view returns(bool);\\n\\n\\t/**\\n\\t * @dev Creates new token with token ID specified\\n\\t *      and assigns an ownership `_to` for this token\\n\\t *\\n\\t * @dev Unsafe: doesn't execute `onERC721Received` on the receiver.\\n\\t *      Prefer the use of `safeMint` instead of `mint`.\\n\\t *\\n\\t * @dev Should have a restricted access handled by the implementation\\n\\t *\\n\\t * @param _to an address to mint token to\\n\\t * @param _tokenId ID of the token to mint\\n\\t */\\n\\tfunction mint(address _to, uint256 _tokenId) external;\\n\\n\\t/**\\n\\t * @dev Creates new tokens starting with token ID specified\\n\\t *      and assigns an ownership `_to` for these tokens\\n\\t *\\n\\t * @dev Token IDs to be minted: [_tokenId, _tokenId + n)\\n\\t *\\n\\t * @dev n must be greater or equal 2: `n > 1`\\n\\t *\\n\\t * @dev Unsafe: doesn't execute `onERC721Received` on the receiver.\\n\\t *      Prefer the use of `safeMintBatch` instead of `mintBatch`.\\n\\t *\\n\\t * @dev Should have a restricted access handled by the implementation\\n\\t *\\n\\t * @param _to an address to mint tokens to\\n\\t * @param _tokenId ID of the first token to mint\\n\\t * @param n how many tokens to mint, sequentially increasing the _tokenId\\n\\t */\\n\\tfunction mintBatch(address _to, uint256 _tokenId, uint256 n) external;\\n\\n\\t/**\\n\\t * @dev Creates new token with token ID specified\\n\\t *      and assigns an ownership `_to` for this token\\n\\t *\\n\\t * @dev Checks if `_to` is a smart contract (code size > 0). If so, it calls\\n\\t *      `onERC721Received` on `_to` and throws if the return value is not\\n\\t *      `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.\\n\\t *\\n\\t * @dev Should have a restricted access handled by the implementation\\n\\t *\\n\\t * @param _to an address to mint token to\\n\\t * @param _tokenId ID of the token to mint\\n\\t */\\n\\tfunction safeMint(address _to, uint256 _tokenId) external;\\n\\n\\t/**\\n\\t * @dev Creates new token with token ID specified\\n\\t *      and assigns an ownership `_to` for this token\\n\\t *\\n\\t * @dev Checks if `_to` is a smart contract (code size > 0). If so, it calls\\n\\t *      `onERC721Received` on `_to` and throws if the return value is not\\n\\t *      `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.\\n\\t *\\n\\t * @dev Should have a restricted access handled by the implementation\\n\\t *\\n\\t * @param _to an address to mint token to\\n\\t * @param _tokenId ID of the token to mint\\n\\t * @param _data additional data with no specified format, sent in call to `_to`\\n\\t */\\n\\tfunction safeMint(address _to, uint256 _tokenId, bytes memory _data) external;\\n\\n\\t/**\\n\\t * @dev Creates new tokens starting with token ID specified\\n\\t *      and assigns an ownership `_to` for these tokens\\n\\t *\\n\\t * @dev Token IDs to be minted: [_tokenId, _tokenId + n)\\n\\t *\\n\\t * @dev n must be greater or equal 2: `n > 1`\\n\\t *\\n\\t * @dev Checks if `_to` is a smart contract (code size > 0). If so, it calls\\n\\t *      `onERC721Received` on `_to` and throws if the return value is not\\n\\t *      `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.\\n\\t *\\n\\t * @dev Should have a restricted access handled by the implementation\\n\\t *\\n\\t * @param _to an address to mint token to\\n\\t * @param _tokenId ID of the token to mint\\n\\t * @param n how many tokens to mint, sequentially increasing the _tokenId\\n\\t */\\n\\tfunction safeMintBatch(address _to, uint256 _tokenId, uint256 n) external;\\n\\n\\t/**\\n\\t * @dev Creates new tokens starting with token ID specified\\n\\t *      and assigns an ownership `_to` for these tokens\\n\\t *\\n\\t * @dev Token IDs to be minted: [_tokenId, _tokenId + n)\\n\\t *\\n\\t * @dev n must be greater or equal 2: `n > 1`\\n\\t *\\n\\t * @dev Checks if `_to` is a smart contract (code size > 0). If so, it calls\\n\\t *      `onERC721Received` on `_to` and throws if the return value is not\\n\\t *      `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.\\n\\t *\\n\\t * @dev Should have a restricted access handled by the implementation\\n\\t *\\n\\t * @param _to an address to mint token to\\n\\t * @param _tokenId ID of the token to mint\\n\\t * @param n how many tokens to mint, sequentially increasing the _tokenId\\n\\t * @param _data additional data with no specified format, sent in call to `_to`\\n\\t */\\n\\tfunction safeMintBatch(address _to, uint256 _tokenId, uint256 n, bytes memory _data) external;\\n}\\n\\n/**\\n * @title Alethea Burnable ERC721\\n *\\n * @notice Defines burn capabilities for Alethea ERC721 tokens.\\n *      This interface should be treated as a definition of what burnable means for ERC721\\n *\\n * @author Basil Gorin\\n */\\ninterface BurnableERC721 {\\n\\t/**\\n\\t * @notice Destroys the token with token ID specified\\n\\t *\\n\\t * @dev Should be accessible publicly by token owners.\\n\\t *      May have a restricted access handled by the implementation\\n\\t *\\n\\t * @param _tokenId ID of the token to burn\\n\\t */\\n\\tfunction burn(uint256 _tokenId) external;\\n}\\n\\n/**\\n * @title With Base URI\\n *\\n * @notice A marker interface for the contracts having the baseURI() function\\n *      or public string variable named baseURI\\n *      NFT implementations like TinyERC721, or ShortERC721 are example of such smart contracts\\n *\\n * @author Basil Gorin\\n */\\ninterface WithBaseURI {\\n\\t/**\\n\\t * @dev Usually used in NFT implementations to construct ERC721Metadata.tokenURI as\\n\\t *      `base URI + token ID` if token URI is not set (not present in `_tokenURIs` mapping)\\n\\t *\\n\\t * @dev For example, if base URI is https://api.com/token/, then token #1\\n\\t *      will have an URI https://api.com/token/1\\n\\t */\\n\\tfunction baseURI() external view returns(string memory);\\n}\\n\",\"keccak256\":\"0x76bb7f54420c208fbe8a1a0792ebe54dfd5ce06b90e571ab5c20acab610d3d05\",\"license\":\"MIT\"},\"contracts/lib/StringUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title String Utils Library\\n *\\n * @dev Library for working with strings, primarily converting\\n *      between strings and integer types\\n *\\n * @author Basil Gorin\\n */\\nlibrary StringUtils {\\n\\t/**\\n\\t * @dev Converts a string to unsigned integer using the specified `base`\\n\\t * @dev Throws on invalid input\\n\\t *      (wrong characters for a given `base`)\\n\\t * @dev Throws if given `base` is not supported\\n\\t * @param a string to convert\\n\\t * @param base number base, one of 2, 8, 10, 16\\n\\t * @return i a number representing given string\\n\\t */\\n\\tfunction atoi(string memory a, uint8 base) internal pure returns (uint256 i) {\\n\\t\\t// check if the base is valid\\n\\t\\trequire(base == 2 || base == 8 || base == 10 || base == 16);\\n\\n\\t\\t// convert string into bytes for convenient iteration\\n\\t\\tbytes memory buf = bytes(a);\\n\\n\\t\\t// iterate over the string (bytes buffer)\\n\\t\\tfor(uint256 p = 0; p < buf.length; p++) {\\n\\t\\t\\t// extract the digit\\n\\t\\t\\tuint8 digit = uint8(buf[p]) - 0x30;\\n\\n\\t\\t\\t// if digit is greater then 10 - mind the gap\\n\\t\\t\\t// see `itoa` function for more details\\n\\t\\t\\tif(digit > 10) {\\n\\t\\t\\t\\t// remove the gap\\n\\t\\t\\t\\tdigit -= 7;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// check if digit meets the base\\n\\t\\t\\trequire(digit < base);\\n\\n\\t\\t\\t// move to the next digit slot\\n\\t\\t\\ti *= base;\\n\\n\\t\\t\\t// add digit to the result\\n\\t\\t\\ti += digit;\\n\\t\\t}\\n\\n\\t\\t// return the result\\n\\t\\treturn i;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Converts a integer to a string using the specified `base`\\n\\t * @dev Throws if given `base` is not supported\\n\\t * @param i integer to convert\\n\\t * @param base number base, one of 2, 8, 10, 16\\n\\t * @return a a string representing given integer\\n\\t */\\n\\tfunction itoa(uint256 i, uint8 base) internal pure returns (string memory a) {\\n\\t\\t// check if the base is valid\\n\\t\\trequire(base == 2 || base == 8 || base == 10 || base == 16);\\n\\n\\t\\t// for zero input the result is \\\"0\\\" string for any base\\n\\t\\tif(i == 0) {\\n\\t\\t\\treturn \\\"0\\\";\\n\\t\\t}\\n\\n\\t\\t// bytes buffer to put ASCII characters into\\n\\t\\tbytes memory buf = new bytes(256);\\n\\n\\t\\t// position within a buffer to be used in cycle\\n\\t\\tuint256 p = 0;\\n\\n\\t\\t// extract digits one by one in a cycle\\n\\t\\twhile(i > 0) {\\n\\t\\t\\t// extract current digit\\n\\t\\t\\tuint8 digit = uint8(i % base);\\n\\n\\t\\t\\t// convert it to an ASCII code\\n\\t\\t\\t// 0x20 is \\\" \\\"\\n\\t\\t\\t// 0x30-0x39 is \\\"0\\\"-\\\"9\\\"\\n\\t\\t\\t// 0x41-0x5A is \\\"A\\\"-\\\"Z\\\"\\n\\t\\t\\t// 0x61-0x7A is \\\"a\\\"-\\\"z\\\" (\\\"A\\\"-\\\"Z\\\" XOR \\\" \\\")\\n\\t\\t\\tuint8 ascii = digit + 0x30;\\n\\n\\t\\t\\t// if digit is greater then 10,\\n\\t\\t\\t// fix the 0x3A-0x40 gap of punctuation marks\\n\\t\\t\\t// (7 characters in ASCII table)\\n\\t\\t\\tif(digit >= 10) {\\n\\t\\t\\t\\t// jump through the gap\\n\\t\\t\\t\\tascii += 7;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// write character into the buffer\\n\\t\\t\\tbuf[p++] = bytes1(ascii);\\n\\n\\t\\t\\t// move to the next digit\\n\\t\\t\\ti /= base;\\n\\t\\t}\\n\\n\\t\\t// `p` contains real length of the buffer now,\\n\\t\\t// allocate the resulting buffer of that size\\n\\t\\tbytes memory result = new bytes(p);\\n\\n\\t\\t// copy the buffer in the reversed order\\n\\t\\tfor(p = 0; p < result.length; p++) {\\n\\t\\t\\t// copy from the beginning of the original buffer\\n\\t\\t\\t// to the end of resulting smaller buffer\\n\\t\\t\\tresult[result.length - p - 1] = buf[p];\\n\\t\\t}\\n\\n\\t\\t// construct string and return\\n\\t\\treturn string(result);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Concatenates two strings `s1` and `s2`, for example, if\\n\\t *      `s1` == `foo` and `s2` == `bar`, the result `s` == `foobar`\\n\\t * @param s1 first string\\n\\t * @param s2 second string\\n\\t * @return s concatenation result s1 + s2\\n\\t */\\n\\tfunction concat(string memory s1, string memory s2) internal pure returns (string memory s) {\\n\\t\\t// an old way of string concatenation (Solidity 0.4) is commented out\\n/*\\n\\t\\t// convert s1 into buffer 1\\n\\t\\tbytes memory buf1 = bytes(s1);\\n\\t\\t// convert s2 into buffer 2\\n\\t\\tbytes memory buf2 = bytes(s2);\\n\\t\\t// create a buffer for concatenation result\\n\\t\\tbytes memory buf = new bytes(buf1.length + buf2.length);\\n\\n\\t\\t// copy buffer 1 into buffer\\n\\t\\tfor(uint256 i = 0; i < buf1.length; i++) {\\n\\t\\t\\tbuf[i] = buf1[i];\\n\\t\\t}\\n\\n\\t\\t// copy buffer 2 into buffer\\n\\t\\tfor(uint256 j = buf1.length; j < buf2.length; j++) {\\n\\t\\t\\tbuf[j] = buf2[j - buf1.length];\\n\\t\\t}\\n\\n\\t\\t// construct string and return\\n\\t\\treturn string(buf);\\n*/\\n\\n\\t\\t// simply use built in function\\n\\t\\treturn string(abi.encodePacked(s1, s2));\\n\\t}\\n}\\n\",\"keccak256\":\"0xccff09c987e4a405b0c53bd23e4be9fef258b42fe632c363373504facf18b263\",\"license\":\"MIT\"},\"contracts/protocol/IntelligentNFTv2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../interfaces/ERC20Spec.sol\\\";\\nimport \\\"../interfaces/ERC721Spec.sol\\\";\\nimport \\\"../lib/StringUtils.sol\\\";\\nimport \\\"../utils/AccessControl.sol\\\";\\n\\n/**\\n * @title Intelligent NFT Interface\\n *        Version 2\\n *\\n * @notice External interface of IntelligentNFTv2 declared to support ERC165 detection.\\n *      Despite some similarity with ERC721 interfaces, iNFT is not ERC721, any similarity\\n *      should be treated as coincidental. Client applications may benefit from this similarity\\n *      to reuse some of the ERC721 client code for display/reading.\\n *\\n * @dev See Intelligent NFT documentation below.\\n *\\n * @author Basil Gorin\\n */\\ninterface IntelligentNFTv2Spec {\\n\\t/**\\n\\t * @dev ERC20/ERC721 like name - Intelligent NFT\\n\\t *\\n\\t * @return \\\"Intelligent NFT\\\"\\n\\t */\\n\\tfunction name() external view returns (string memory);\\n\\n\\t/**\\n\\t * @dev ERC20/ERC721 like symbol - iNFT\\n\\t *\\n\\t * @return \\\"iNFT\\\"\\n\\t */\\n\\tfunction symbol() external view returns (string memory);\\n\\n\\t/**\\n\\t * @dev ERC721 like link to the iNFT metadata\\n\\t *\\n\\t * @param recordId iNFT ID to get metadata URI for\\n\\t */\\n\\tfunction tokenURI(uint256 recordId) external view returns (string memory);\\n\\n\\t/**\\n\\t * @dev ERC20/ERC721 like counter of the iNFTs in existence (upper bound),\\n\\t *      some (or all) of which may not exist due to target NFT destruction\\n\\t *\\n\\t * @return amount of iNFT tracked by this smart contract\\n\\t */\\n\\tfunction totalSupply() external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Check if iNFT binding with the given ID exists\\n\\t *\\n\\t * @return true if iNFT binding exist, false otherwise\\n\\t */\\n\\tfunction exists(uint256 recordId) external view returns (bool);\\n\\n\\t/**\\n\\t * @dev ERC721 like function to get owner of the iNFT, which is by definition\\n\\t *      an owner of the underlying NFT\\n\\t */\\n\\tfunction ownerOf(uint256 recordId) external view returns (address);\\n}\\n\\n/**\\n * @title Intelligent NFT (iNFT)\\n *        Version 2\\n *\\n * @notice Intelligent NFT (iNFT) represents an enhancement to an existing NFT\\n *      (we call it a \\\"target\\\" or \\\"target NFT\\\"), it binds a GPT-3 prompt (a \\\"personality prompt\\\",\\n *      delivered as a Personality Pod ERC721 token bound to iNFT)\\n *      to the target to embed intelligence, is controlled and belongs to the owner of the target.\\n *\\n * @notice iNFT stores AI Personality and some amount of ALI tokens locked, available for\\n *      unlocking when iNFT is destroyed\\n *\\n * @notice iNFT is not an ERC721 token, but it has some very limited similarity to an ERC721:\\n *      every record is identified by ID and this ID has an owner, which is effectively the target NFT owner;\\n *      still, it doesn't store ownership information itself and fully relies on the target ownership instead\\n *\\n * @dev Internally iNFTs consist of:\\n *      - target NFT - smart contract address and ID of the NFT the iNFT is bound to\\n *      - AI Personality - smart contract address and ID of the AI Personality used to produce given iNFT,\\n *        representing a \\\"personality prompt\\\", and locked within an iNFT\\n *      - ALI tokens amount - amount of the ALI tokens used to produce given iNFT, also locked\\n *\\n * @dev iNFTs can be\\n *      - created, this process requires an AI Personality and ALI tokens to be locked\\n *      - destroyed, this process releases an AI Personality and ALI tokens previously locked\\n *\\n * @author Basil Gorin\\n */\\ncontract IntelligentNFTv2 is IntelligentNFTv2Spec, AccessControl, ERC165 {\\n\\t/**\\n\\t * @inheritdoc IntelligentNFTv2Spec\\n\\t */\\n\\tstring public override name = \\\"Intelligent NFT\\\";\\n\\n\\t/**\\n\\t * @inheritdoc IntelligentNFTv2Spec\\n\\t */\\n\\tstring public override symbol = \\\"iNFT\\\";\\n\\n\\t/**\\n\\t * @dev Each intelligent token, represented by its unique ID, is bound to the target NFT,\\n\\t *      defined by the pair of the target NFT smart contract address and unique token ID\\n\\t *      within the target NFT smart contract\\n\\t *\\n\\t * @dev Effectively iNFT is owned by the target NFT owner\\n\\t *\\n\\t * @dev Additionally, each token holds an AI Personality and some amount of ALI tokens bound to it\\n\\t *\\n\\t * @dev `IntelliBinding` keeps all the binding information, including target NFT coordinates,\\n\\t *      bound AI Personality ID, and amount of ALI ERC20 tokens bound to the iNFT\\n\\t */\\n\\tstruct IntelliBinding {\\n\\t\\t// Note: structure members are reordered to fit into less memory slots, see EVM memory layout\\n\\t\\t// ----- SLOT.1 (256/256)\\n\\t\\t/**\\n\\t\\t * @dev Specific AI Personality is defined by the pair of AI Personality smart contract address\\n\\t\\t *       and AI Personality ID\\n\\t\\t *\\n\\t\\t * @dev Address of the AI Personality smart contract\\n\\t\\t */\\n\\t\\taddress personalityContract;\\n\\n\\t\\t/**\\n\\t\\t * @dev AI Personality ID within the AI Personality smart contract\\n\\t\\t */\\n\\t\\tuint96 personalityId;\\n\\n\\t\\t// ----- SLOT.2 (256/256)\\n\\t\\t/**\\n\\t\\t * @dev Amount of an ALI ERC20 tokens bound to (owned by) the iNFTs\\n\\t\\t *\\n\\t\\t * @dev ALI ERC20 smart contract address is defined globally as `aliContract` constant\\n\\t\\t */\\n\\t\\tuint96 aliValue;\\n\\n\\t\\t/**\\n\\t\\t * @dev Address of the target NFT deployed smart contract,\\n\\t\\t *      this is a contract a particular iNFT is bound to\\n\\t\\t */\\n\\t\\taddress targetContract;\\n\\n\\t\\t// ----- SLOT.3 (256/256)\\n\\t\\t/**\\n\\t\\t * @dev Target NFT ID within the target NFT smart contract,\\n\\t\\t *      effectively target NFT ID and contract address define the owner of an iNFT\\n\\t\\t */\\n\\t\\tuint256 targetId;\\n\\t}\\n\\n\\t/**\\n\\t * @notice iNFT binding storage, stores binding information for each existing iNFT\\n\\t * @dev Maps iNFT ID to its binding data, which includes underlying NFT data\\n\\t */\\n\\tmapping(uint256 => IntelliBinding) public bindings;\\n\\n\\t/**\\n\\t * @notice Reverse iNFT binding allows to find iNFT bound to a particular NFT\\n\\t * @dev Maps target NFT (smart contract address and unique token ID) to the iNFT ID:\\n\\t *      NFT Contract => NFT ID => iNFT ID\\n\\t */\\n\\tmapping(address => mapping(uint256 => uint256)) public reverseBindings;\\n\\n\\t/**\\n\\t * @notice Ai Personality to iNFT binding allows to find iNFT bound to a particular Ai Personality\\n\\t * @dev Maps Ai Personality NFT (unique token ID) to the linked iNFT:\\n\\t *      AI Personality Contract => AI Personality ID => iNFT ID\\n\\t */\\n\\tmapping(address => mapping(uint256 => uint256)) public personalityBindings;\\n\\n\\t/**\\n\\t * @notice Total amount (maximum value estimate) of iNFT in existence.\\n\\t *       This value can be higher than number of effectively accessible iNFTs\\n\\t *       since when underlying NFT gets burned this value doesn't get updated.\\n\\t */\\n\\tuint256 public override totalSupply;\\n\\n\\t/**\\n\\t * @notice Each iNFT holds some ALI tokens, which are tracked by the ALI token ERC20 smart contract defined here\\n\\t */\\n\\taddress public immutable aliContract;\\n\\n\\t/**\\n\\t * @notice ALI token balance the contract is aware of, cumulative ALI obligation,\\n\\t *      i.e. sum of all iNFT locked ALI balances\\n\\t *\\n\\t * @dev Sum of all `IntelliBinding.aliValue` for each iNFT in existence\\n\\t */\\n\\tuint256 public aliBalance;\\n\\n\\t/**\\n\\t * @dev Base URI is used to construct ERC721Metadata.tokenURI as\\n\\t *      `base URI + token ID` if token URI is not set (not present in `_tokenURIs` mapping)\\n\\t *\\n\\t * @dev For example, if base URI is https://api.com/token/, then token #1\\n\\t *      will have an URI https://api.com/token/1\\n\\t *\\n\\t * @dev If token URI is set with `setTokenURI()` it will be returned as is via `tokenURI()`\\n\\t */\\n\\tstring public baseURI = \\\"\\\";\\n\\n\\t/**\\n\\t * @dev Optional mapping for token URIs to be returned as is when `tokenURI()`\\n\\t *      is called; if mapping doesn't exist for token, the URI is constructed\\n\\t *      as `base URI + token ID`, where plus (+) denotes string concatenation\\n\\t */\\n\\tmapping(uint256 => string) internal _tokenURIs;\\n\\n\\t/**\\n\\t * @notice Minter is responsible for creating (minting) iNFTs\\n\\t *\\n\\t * @dev Role ROLE_MINTER allows minting iNFTs (calling `mint` function)\\n\\t */\\n\\tuint32 public constant ROLE_MINTER = 0x0001_0000;\\n\\n\\t/**\\n\\t * @notice Burner is responsible for destroying (burning) iNFTs\\n\\t *\\n\\t * @dev Role ROLE_BURNER allows burning iNFTs (calling `burn` function)\\n\\t */\\n\\tuint32 public constant ROLE_BURNER = 0x0002_0000;\\n\\n\\t/**\\n\\t * @notice Editor is responsible for editing (updating) iNFT records in general,\\n\\t *      adding/removing locked ALI tokens to/from iNFT in particular\\n\\t *\\n\\t * @dev Role ROLE_EDITOR allows editing iNFTs (calling `increaseAli`, `decreaseAli` functions)\\n\\t */\\n\\tuint32 public constant ROLE_EDITOR = 0x0004_0000;\\n\\n\\t/**\\n\\t * @notice URI manager is responsible for managing base URI\\n\\t *      part of the token URI ERC721Metadata interface\\n\\t *\\n\\t * @dev Role ROLE_URI_MANAGER allows updating the base URI\\n\\t *      (executing `setBaseURI` function)\\n\\t */\\n\\tuint32 public constant ROLE_URI_MANAGER = 0x0010_0000;\\n\\n\\t/**\\n\\t * @dev Fired in setBaseURI()\\n\\t *\\n\\t * @param _by an address which executed update\\n\\t * @param _oldVal old _baseURI value\\n\\t * @param _newVal new _baseURI value\\n\\t */\\n\\tevent BaseURIUpdated(address indexed _by, string _oldVal, string _newVal);\\n\\n\\t/**\\n\\t * @dev Fired in setTokenURI()\\n\\t *\\n\\t * @param _by an address which executed update\\n\\t * @param _tokenId token ID which URI was updated\\n\\t * @param _oldVal old _baseURI value\\n\\t * @param _newVal new _baseURI value\\n\\t */\\n\\tevent TokenURIUpdated(address indexed _by, uint256 indexed _tokenId, string _oldVal, string _newVal);\\n\\n\\t/**\\n\\t * @dev Fired in mint() when new iNFT is created\\n\\t *\\n\\t * @param _by an address which executed the mint function\\n\\t * @param _owner current owner of the NFT\\n\\t * @param _recordId ID of the iNFT minted (created, bound)\\n\\t * @param _aliValue amount of ALI tokens locked within newly created iNFT\\n\\t * @param _personalityContract AI Personality smart contract address\\n\\t * @param _personalityId ID of the AI Personality locked within newly created iNFT\\n\\t * @param _targetContract target NFT smart contract address\\n\\t * @param _targetId target NFT ID (where this iNFT binds to and belongs to)\\n\\t */\\n\\tevent Minted(\\n\\t\\taddress indexed _by,\\n\\t\\taddress indexed _owner,\\n\\t\\tuint256 indexed _recordId,\\n\\t\\tuint96 _aliValue,\\n\\t\\taddress _personalityContract,\\n\\t\\tuint96 _personalityId,\\n\\t\\taddress _targetContract,\\n\\t\\tuint256 _targetId\\n\\t);\\n\\n\\t/**\\n\\t * @dev Fired in increaseAli() and decreaseAli() when iNFT record is updated\\n\\t *\\n\\t * @param _by an address which executed the update\\n\\t * @param _owner iNFT (target NFT) owner\\n\\t * @param _recordId ID of the updated iNFT\\n\\t * @param _oldAliValue amount of ALI tokens locked within iNFT before update\\n\\t * @param _newAliValue amount of ALI tokens locked within iNFT after update\\n\\t */\\n\\tevent Updated(\\n\\t\\taddress indexed _by,\\n\\t\\taddress indexed _owner,\\n\\t\\tuint256 indexed _recordId,\\n\\t\\tuint96 _oldAliValue,\\n\\t\\tuint96 _newAliValue\\n\\t);\\n\\n\\t/**\\n\\t * @dev Fired in burn() when an existing iNFT gets destroyed\\n\\t *\\n\\t * @param _by an address which executed the burn function\\n\\t * @param _recordId ID of the iNFT burnt (destroyed, unbound)\\n\\t * @param _recipient and address which received unlocked AI Personality and ALI tokens\\n\\t * @param _aliValue amount of ALI tokens transferred from the destroyed iNFT\\n\\t * @param _personalityContract AI Personality smart contract address\\n\\t * @param _personalityId ID of the AI Personality transferred from the destroyed iNFT\\n\\t * @param _targetContract target NFT smart contract\\n\\t * @param _targetId target NFT ID (where this iNFT was bound to and belonged to)\\n\\t */\\n\\tevent Burnt(\\n\\t\\taddress indexed _by,\\n\\t\\tuint256 indexed _recordId,\\n\\t\\taddress indexed _recipient,\\n\\t\\tuint96 _aliValue,\\n\\t\\taddress _personalityContract,\\n\\t\\tuint96 _personalityId,\\n\\t\\taddress _targetContract,\\n\\t\\tuint256 _targetId\\n\\t);\\n\\n\\t/**\\n\\t * @dev Creates/deploys an iNFT instance bound to already deployed ALI token instance\\n\\t *\\n\\t * @param _ali address of the deployed ALI ERC20 Token instance the iNFT is bound to\\n\\t */\\n\\tconstructor(address _ali) AccessControl(msg.sender) {\\n\\t\\t// verify the inputs are set\\n\\t\\trequire(_ali != address(0), \\\"ALI Token addr is not set\\\");\\n\\n\\t\\t// verify _ali is a valid ERC20\\n\\t\\trequire(ERC165(_ali).supportsInterface(type(ERC20).interfaceId), \\\"unexpected ALI Token type\\\");\\n\\n\\t\\t// setup smart contract internal state\\n\\t\\taliContract = _ali;\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc ERC165\\n\\t */\\n\\tfunction supportsInterface(bytes4 interfaceId) public pure override returns (bool) {\\n\\t\\t// reconstruct from current interface and super interface\\n\\t\\treturn interfaceId == type(IntelligentNFTv2Spec).interfaceId;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Restricted access function which updates base URI used to construct\\n\\t *      ERC721Metadata.tokenURI\\n\\t *\\n\\t * @param _baseURI new base URI to set\\n\\t */\\n\\tfunction setBaseURI(string memory _baseURI) public virtual {\\n\\t\\t// verify the access permission\\n\\t\\trequire(isSenderInRole(ROLE_URI_MANAGER), \\\"access denied\\\");\\n\\n\\t\\t// emit an event first - to log both old and new values\\n\\t\\temit BaseURIUpdated(msg.sender, baseURI, _baseURI);\\n\\n\\t\\t// and update base URI\\n\\t\\tbaseURI = _baseURI;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns token URI if it was previously set with `setTokenURI`,\\n\\t *      otherwise constructs it as base URI + token ID\\n\\t *\\n\\t * @param _recordId iNFT ID to query metadata link URI for\\n\\t * @return URI link to fetch iNFT metadata from\\n\\t */\\n\\tfunction tokenURI(uint256 _recordId) public view override returns (string memory) {\\n\\t\\t// verify token exists\\n\\t\\trequire(exists(_recordId), \\\"iNFT doesn't exist\\\");\\n\\n\\t\\t// read the token URI for the token specified\\n\\t\\tstring memory _tokenURI = _tokenURIs[_recordId];\\n\\n\\t\\t// if token URI is set\\n\\t\\tif(bytes(_tokenURI).length > 0) {\\n\\t\\t\\t// just return it\\n\\t\\t\\treturn _tokenURI;\\n\\t\\t}\\n\\n\\t\\t// if base URI is not set\\n\\t\\tif(bytes(baseURI).length == 0) {\\n\\t\\t\\t// return an empty string\\n\\t\\t\\treturn \\\"\\\";\\n\\t\\t}\\n\\n\\t\\t// otherwise concatenate base URI + token ID\\n\\t\\treturn StringUtils.concat(baseURI, StringUtils.itoa(_recordId, 10));\\n\\t}\\n\\n\\t/**\\n\\t * @dev Sets the token URI for the token defined by its ID\\n\\t *\\n\\t * @param _tokenId an ID of the token to set URI for\\n\\t * @param _tokenURI token URI to set\\n\\t */\\n\\tfunction setTokenURI(uint256 _tokenId, string memory _tokenURI) public virtual {\\n\\t\\t// verify the access permission\\n\\t\\trequire(isSenderInRole(ROLE_URI_MANAGER), \\\"access denied\\\");\\n\\n\\t\\t// we do not verify token existence: we want to be able to\\n\\t\\t// preallocate token URIs before tokens are actually minted\\n\\n\\t\\t// emit an event first - to log both old and new values\\n\\t\\temit TokenURIUpdated(msg.sender, _tokenId, _tokenURIs[_tokenId], _tokenURI);\\n\\n\\t\\t// and update token URI\\n\\t\\t_tokenURIs[_tokenId] = _tokenURI;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Verifies if given iNFT exists\\n\\t *\\n\\t * @param recordId iNFT ID to verify existence of\\n\\t * @return true if iNFT exists, false otherwise\\n\\t */\\n\\tfunction exists(uint256 recordId) public view override returns (bool) {\\n\\t\\t// verify if biding exists for that tokenId and return the result\\n\\t\\treturn bindings[recordId].targetContract != address(0);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns an owner of the given iNFT.\\n\\t *      By definition iNFT owner is an owner of the target NFT\\n\\t *\\n\\t * @param recordId iNFT ID to query ownership information for\\n\\t * @return address of the given iNFT owner\\n\\t */\\n\\tfunction ownerOf(uint256 recordId) public view override returns (address) {\\n\\t\\t// get the link to the token binding (we need to access only one field)\\n\\t\\tIntelliBinding storage binding = bindings[recordId];\\n\\n\\t\\t// verify the binding exists and throw standard Zeppelin message if not\\n\\t\\trequire(binding.targetContract != address(0), \\\"iNFT doesn't exist\\\");\\n\\n\\t\\t// delegate `ownerOf` call to the target NFT smart contract\\n\\t\\treturn ERC721(binding.targetContract).ownerOf(binding.targetId);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Restricted access function which creates an iNFT, binding it to the specified\\n\\t *      NFT, locking the AI Personality specified, and funded with the amount of ALI specified\\n\\t *\\n\\t * @dev Locks AI Personality defined by its ID within iNFT smart contract;\\n\\t *      AI Personality must be transferred to the iNFT smart contract\\n\\t *      prior to calling the `mint`, but in the same transaction with `mint`\\n\\t *\\n\\t * @dev Locks specified amount of ALI token within iNFT smart contract;\\n\\t *      ALI token amount must be transferred to the iNFT smart contract\\n\\t *      prior to calling the `mint`, but in the same transaction with `mint`\\n\\t *\\n\\t * @dev To summarize, minting transaction (a transaction which executes `mint`) must\\n\\t *      1) transfer AI Personality\\n\\t *      2) transfer ALI tokens if they are to be locked\\n\\t *      3) mint iNFT\\n\\t *      NOTE: breaking the items above into multiple transactions is not acceptable!\\n\\t *            (results in a security risk)\\n\\t *\\n\\t * @dev The NFT to be linked to is not required to owned by the funder, but it must exist;\\n\\t *      throws if target NFT doesn't exist\\n\\t *\\n\\t * @dev This is a restricted function which is accessed by iNFT Linker\\n\\t *\\n\\t * @param recordId ID of the iNFT to mint (create, bind)\\n\\t * @param aliValue amount of ALI tokens to bind to newly created iNFT\\n\\t * @param personalityContract AI Personality contract address\\n\\t * @param personalityId ID of the AI Personality to bind to newly created iNFT\\n\\t * @param targetContract target NFT smart contract\\n\\t * @param targetId target NFT ID (where this iNFT binds to and belongs to)\\n\\t */\\n\\tfunction mint(\\n\\t\\tuint256 recordId,\\n\\t\\tuint96 aliValue,\\n\\t\\taddress personalityContract,\\n\\t\\tuint96 personalityId,\\n\\t\\taddress targetContract,\\n\\t\\tuint256 targetId\\n\\t) public {\\n\\t\\t// verify the access permission\\n\\t\\trequire(isSenderInRole(ROLE_MINTER), \\\"access denied\\\");\\n\\n\\t\\t// verify personalityContract is a valid ERC721\\n\\t\\trequire(ERC165(personalityContract).supportsInterface(type(ERC721).interfaceId), \\\"personality is not ERC721\\\");\\n\\n\\t\\t// verify targetContract is a valid ERC721\\n\\t\\trequire(ERC165(targetContract).supportsInterface(type(ERC721).interfaceId), \\\"target NFT is not ERC721\\\");\\n\\n\\t\\t// verify this iNFT is not yet minted\\n\\t\\trequire(!exists(recordId), \\\"iNFT already exists\\\");\\n\\n\\t\\t// verify target NFT is not yet bound to\\n\\t\\trequire(reverseBindings[targetContract][targetId] == 0, \\\"NFT is already bound\\\");\\n\\n\\t\\t// verify AI Personality is not yet locked\\n\\t\\trequire(personalityBindings[personalityContract][personalityId] == 0, \\\"personality already linked\\\");\\n\\n\\t\\t// verify if AI Personality is already transferred to iNFT\\n\\t\\trequire(ERC721(personalityContract).ownerOf(personalityId) == address(this), \\\"personality is not yet transferred\\\");\\n\\n\\t\\t// retrieve NFT owner and verify if target NFT exists\\n\\t\\taddress owner = ERC721(targetContract).ownerOf(targetId);\\n\\t\\t// Note: we do not require funder to be NFT owner,\\n\\t\\t// if required this constraint should be added by the caller (iNFT Linker)\\n\\t\\trequire(owner != address(0), \\\"target NFT doesn't exist\\\");\\n\\n\\t\\t// in case when ALI tokens are expected to be locked within iNFT\\n\\t\\tif(aliValue > 0) {\\n\\t\\t\\t// verify ALI tokens are already transferred to iNFT\\n\\t\\t\\trequire(aliBalance + aliValue <= ERC20(aliContract).balanceOf(address(this)), \\\"ALI tokens not yet transferred\\\");\\n\\n\\t\\t\\t// update ALI balance on the contract\\n\\t\\t\\taliBalance += aliValue;\\n\\t\\t}\\n\\n\\t\\t// bind AI Personality transferred and ALI ERC20 value transferred to an NFT specified\\n\\t\\tbindings[recordId] = IntelliBinding({\\n\\t\\t\\tpersonalityContract : personalityContract,\\n\\t\\t\\tpersonalityId : personalityId,\\n\\t\\t\\taliValue : aliValue,\\n\\t\\t\\ttargetContract : targetContract,\\n\\t\\t\\ttargetId : targetId\\n\\t\\t});\\n\\n\\t\\t// fill in the reverse binding\\n\\t\\treverseBindings[targetContract][targetId] = recordId;\\n\\n\\t\\t// fill in the AI Personality to iNFT binding\\n\\t\\tpersonalityBindings[personalityContract][personalityId] = recordId;\\n\\n\\t\\t// increase total supply counter\\n\\t\\ttotalSupply++;\\n\\n\\t\\t// emit an event\\n\\t\\temit Minted(\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\towner,\\n\\t\\t\\trecordId,\\n\\t\\t\\taliValue,\\n\\t\\t\\tpersonalityContract,\\n\\t\\t\\tpersonalityId,\\n\\t\\t\\ttargetContract,\\n\\t\\t\\ttargetId\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Restricted access function which creates several iNFTs, binding them to the specified\\n\\t *      NFTs, locking the AI Personalities specified, each funded with the amount of ALI specified\\n\\t *\\n\\t * @dev Locks AI Personalities defined by their IDs within iNFT smart contract;\\n\\t *      AI Personalities must be transferred to the iNFT smart contract\\n\\t *      prior to calling the `mintBatch`, but in the same transaction with `mintBatch`\\n\\t *\\n\\t * @dev Locks specified amount of ALI token within iNFT smart contract for each iNFT minted;\\n\\t *      ALI token amount must be transferred to the iNFT smart contract\\n\\t *      prior to calling the `mintBatch`, but in the same transaction with `mintBatch`\\n\\t *\\n\\t * @dev To summarize, minting transaction (a transaction which executes `mintBatch`) must\\n\\t *      1) transfer AI Personality\\n\\t *      2) transfer ALI tokens if they are to be locked\\n\\t *      3) mint iNFT\\n\\t *      NOTE: breaking the items above into multiple transactions is not acceptable!\\n\\t *            (results in a security risk)\\n\\t *\\n\\t * @dev The NFTs to be linked to are not required to owned by the funder, but they must exist;\\n\\t *      throws if target NFTs don't exist\\n\\t *\\n\\t * @dev iNFT IDs to be minted: [recordId, recordId + n)\\n\\t * @dev AI Personality IDs to be locked: [personalityId, personalityId + n)\\n\\t * @dev NFT IDs to be bound to: [targetId, targetId + n)\\n\\t *\\n\\t * @dev n must be greater or equal 2: `n > 1`\\n\\t *\\n\\t * @dev This is a restricted function which is accessed by iNFT Linker\\n\\t *\\n\\t * @param recordId ID of the first iNFT to mint (create, bind)\\n\\t * @param aliValue amount of ALI tokens to bind to each newly created iNFT\\n\\t * @param personalityContract AI Personality contract address\\n\\t * @param personalityId ID of the first AI Personality to bind to newly created iNFT\\n\\t * @param targetContract target NFT smart contract\\n\\t * @param targetId first target NFT ID (where this iNFT binds to and belongs to)\\n\\t * @param n how many iNFTs to mint, sequentially increasing the recordId, personalityId, and targetId\\n\\t */\\n\\tfunction mintBatch(\\n\\t\\tuint256 recordId,\\n\\t\\tuint96 aliValue,\\n\\t\\taddress personalityContract,\\n\\t\\tuint96 personalityId,\\n\\t\\taddress targetContract,\\n\\t\\tuint256 targetId,\\n\\t\\tuint96 n\\n\\t) public {\\n\\t\\t// verify the access permission\\n\\t\\trequire(isSenderInRole(ROLE_MINTER), \\\"access denied\\\");\\n\\n\\t\\t// verify n is set properly\\n\\t\\trequire(n > 1, \\\"n is too small\\\");\\n\\n\\t\\t// verify personalityContract is a valid ERC721\\n\\t\\trequire(ERC165(personalityContract).supportsInterface(type(ERC721).interfaceId), \\\"personality is not ERC721\\\");\\n\\n\\t\\t// verify targetContract is a valid ERC721\\n\\t\\trequire(ERC165(targetContract).supportsInterface(type(ERC721).interfaceId), \\\"target NFT is not ERC721\\\");\\n\\n\\t\\t// verifications: for each iNFT in a batch\\n\\t\\tfor(uint96 i = 0; i < n; i++) {\\n\\t\\t\\t// verify this token ID is not yet bound\\n\\t\\t\\trequire(!exists(recordId + i), \\\"iNFT already exists\\\");\\n\\n\\t\\t\\t// verify the AI Personality is not yet bound\\n\\t\\t\\trequire(personalityBindings[personalityContract][personalityId + i] == 0, \\\"personality already linked\\\");\\n\\n\\t\\t\\t// verify if AI Personality is already transferred to iNFT\\n\\t\\t\\trequire(ERC721(personalityContract).ownerOf(personalityId + i) == address(this), \\\"personality is not yet transferred\\\");\\n\\n\\t\\t\\t// retrieve NFT owner and verify if target NFT exists\\n\\t\\t\\taddress owner = ERC721(targetContract).ownerOf(targetId + i);\\n\\t\\t\\t// Note: we do not require funder to be NFT owner,\\n\\t\\t\\t// if required this constraint should be added by the caller (iNFT Linker)\\n\\t\\t\\trequire(owner != address(0), \\\"target NFT doesn't exist\\\");\\n\\n\\t\\t\\t// emit an event - we log owner for each iNFT\\n\\t\\t\\t// and its convenient to do it here when we have the owner inline\\n\\t\\t\\temit Minted(\\n\\t\\t\\t\\tmsg.sender,\\n\\t\\t\\t\\towner,\\n\\t\\t\\t\\trecordId + i,\\n\\t\\t\\t\\taliValue,\\n\\t\\t\\t\\tpersonalityContract,\\n\\t\\t\\t\\tpersonalityId + i,\\n\\t\\t\\t\\ttargetContract,\\n\\t\\t\\t\\ttargetId + i\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\t// cumulative ALI value may overflow uint96, store it into uint256 on stack\\n\\t\\tuint256 _aliValue = uint256(aliValue) * n;\\n\\n\\t\\t// in case when ALI tokens are expected to be locked within iNFT\\n\\t\\tif(_aliValue > 0) {\\n\\t\\t\\t// verify ALI tokens are already transferred to iNFT\\n\\t\\t\\trequire(aliBalance + _aliValue <= ERC20(aliContract).balanceOf(address(this)), \\\"ALI tokens not yet transferred\\\");\\n\\t\\t\\t// update ALI balance on the contract\\n\\t\\t\\taliBalance += _aliValue;\\n\\t\\t}\\n\\n\\t\\t// minting: for each iNFT in a batch\\n\\t\\tfor(uint96 i = 0; i < n; i++) {\\n\\t\\t\\t// bind AI Personality transferred and ALI ERC20 value transferred to an NFT specified\\n\\t\\t\\tbindings[recordId + i] = IntelliBinding({\\n\\t\\t\\t\\tpersonalityContract : personalityContract,\\n\\t\\t\\t\\tpersonalityId : personalityId + i,\\n\\t\\t\\t\\taliValue : aliValue,\\n\\t\\t\\t\\ttargetContract : targetContract,\\n\\t\\t\\t\\ttargetId : targetId + i\\n\\t\\t\\t});\\n\\n\\t\\t\\t// fill in the AI Personality to iNFT binding\\n\\t\\t\\tpersonalityBindings[personalityContract][personalityId + i] = recordId + i;\\n\\n\\t\\t\\t// fill in the reverse binding\\n\\t\\t\\treverseBindings[targetContract][targetId + i] = recordId + i;\\n\\t\\t}\\n\\n\\t\\t// increase total supply counter\\n\\t\\ttotalSupply += n;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Restricted access function which destroys an iNFT, unbinding it from the\\n\\t *      linked NFT, releasing an AI Personality, and ALI tokens locked in the iNFT\\n\\t *\\n\\t * @dev Transfers an AI Personality locked in iNFT to its owner via ERC721.safeTransferFrom;\\n\\t *      owner must be an EOA or implement ERC721Receiver.onERC721Received properly\\n\\t * @dev Transfers ALI tokens locked in iNFT to its owner\\n\\t * @dev Since iNFT owner is determined as underlying NFT owner, this underlying NFT must\\n\\t *      exist and its ownerOf function must not throw and must return non-zero owner address\\n\\t *      for the underlying NFT ID\\n\\t *\\n\\t * @dev Doesn't verify if it's safe to send ALI tokens to the NFT owner, this check\\n\\t *      must be handled by the transaction executor\\n\\t *\\n\\t * @dev This is a restricted function which is accessed by iNFT Linker\\n\\t *\\n\\t * @param recordId ID of the iNFT to burn (destroy, unbind)\\n\\t */\\n\\tfunction burn(uint256 recordId) public {\\n\\t\\t// verify the access permission\\n\\t\\trequire(isSenderInRole(ROLE_BURNER), \\\"access denied\\\");\\n\\n\\t\\t// decrease total supply counter\\n\\t\\ttotalSupply--;\\n\\n\\t\\t// read the token binding (we'll need to access all the fields)\\n\\t\\tIntelliBinding memory binding = bindings[recordId];\\n\\n\\t\\t// verify binding exists\\n\\t\\trequire(binding.targetContract != address(0), \\\"not bound\\\");\\n\\n\\t\\t// destroy binding first to protect from any reentrancy possibility\\n\\t\\tdelete bindings[recordId];\\n\\n\\t\\t// free the reverse binding\\n\\t\\tdelete reverseBindings[binding.targetContract][binding.targetId];\\n\\n\\t\\t// free the AI Personality binding\\n\\t\\tdelete personalityBindings[binding.personalityContract][binding.personalityId];\\n\\n\\t\\t// determine an owner of the underlying NFT\\n\\t\\taddress owner = ERC721(binding.targetContract).ownerOf(binding.targetId);\\n\\n\\t\\t// verify that owner address is set (not a zero address)\\n\\t\\trequire(owner != address(0), \\\"no such NFT\\\");\\n\\n\\t\\t// transfer the AI Personality to the NFT owner\\n\\t\\t// using safe transfer since we don't know if owner address can accept the AI Personality right now\\n\\t\\tERC721(binding.personalityContract).safeTransferFrom(address(this), owner, binding.personalityId);\\n\\n\\t\\t// in case when ALI tokens were locked within iNFT\\n\\t\\tif(binding.aliValue > 0) {\\n\\t\\t\\t// update ALI balance on the contract prior to token transfer (reentrancy style)\\n\\t\\t\\taliBalance -= binding.aliValue;\\n\\n\\t\\t\\t// transfer the ALI tokens to the NFT owner\\n\\t\\t\\tERC20(aliContract).transfer(owner, binding.aliValue);\\n\\t\\t}\\n\\n\\t\\t// emit an event\\n\\t\\temit Burnt(\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\trecordId,\\n\\t\\t\\towner,\\n\\t\\t\\tbinding.aliValue,\\n\\t\\t\\tbinding.personalityContract,\\n\\t\\t\\tbinding.personalityId,\\n\\t\\t\\tbinding.targetContract,\\n\\t\\t\\tbinding.targetId\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Restricted access function which updates iNFT record by increasing locked ALI tokens value,\\n\\t *      effectively locking additional ALI tokens to the iNFT\\n\\t *\\n\\t * @dev Locks specified amount of ALI token within iNFT smart contract;\\n\\t *      ALI token amount must be transferred to the iNFT smart contract\\n\\t *      prior to calling the `increaseAli`, but in the same transaction with `increaseAli`\\n\\t *\\n\\t * @dev To summarize, update transaction (a transaction which executes `increaseAli`) must\\n\\t *      1) transfer ALI tokens\\n\\t *      2) update the iNFT\\n\\t *      NOTE: breaking the items above into multiple transactions is not acceptable!\\n\\t *            (results in a security risk)\\n\\t *\\n\\t * @dev This is a restricted function which is accessed by iNFT Linker\\n\\t *\\n\\t * @param recordId ID of the iNFT to update\\n\\t * @param aliDelta amount of ALI tokens to lock\\n\\t */\\n\\tfunction increaseAli(uint256 recordId, uint96 aliDelta) public {\\n\\t\\t// verify the access permission\\n\\t\\trequire(isSenderInRole(ROLE_EDITOR), \\\"access denied\\\");\\n\\n\\t\\t// verify the inputs are set\\n\\t\\trequire(aliDelta != 0, \\\"zero value\\\");\\n\\n\\t\\t// get iNFT owner for logging (check iNFT record exists under the hood)\\n\\t\\taddress owner = ownerOf(recordId);\\n\\n\\t\\t// cache the ALI value of the record\\n\\t\\tuint96 aliValue = bindings[recordId].aliValue;\\n\\n\\t\\t// verify ALI tokens are already transferred to iNFT\\n\\t\\trequire(aliBalance + aliDelta <= ERC20(aliContract).balanceOf(address(this)), \\\"ALI tokens not yet transferred\\\");\\n\\n\\t\\t// update ALI balance on the contract\\n\\t\\taliBalance += aliDelta;\\n\\n\\t\\t// update ALI balance on the binding\\n\\t\\tbindings[recordId].aliValue = aliValue + aliDelta;\\n\\n\\t\\t// emit an event\\n\\t\\temit Updated(msg.sender, owner, recordId, aliValue, aliValue + aliDelta);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Restricted access function which updates iNFT record by decreasing locked ALI tokens value,\\n\\t *      effectively unlocking some or all ALI tokens from the iNFT\\n\\t *\\n\\t * @dev Unlocked tokens are sent to the recipient address specified\\n\\t *\\n\\t * @dev This is a restricted function which is accessed by iNFT Linker\\n\\t *\\n\\t * @param recordId ID of the iNFT to update\\n\\t * @param aliDelta amount of ALI tokens to unlock\\n\\t * @param recipient an address to send unlocked tokens to\\n\\t */\\n\\tfunction decreaseAli(uint256 recordId, uint96 aliDelta, address recipient) public {\\n\\t\\t// verify the access permission\\n\\t\\trequire(isSenderInRole(ROLE_EDITOR), \\\"access denied\\\");\\n\\n\\t\\t// verify the inputs are set\\n\\t\\trequire(aliDelta != 0, \\\"zero value\\\");\\n\\t\\trequire(recipient != address(0), \\\"zero address\\\");\\n\\n\\t\\t// get iNFT owner for logging (check iNFT record exists under the hood)\\n\\t\\taddress owner = ownerOf(recordId);\\n\\n\\t\\t// cache the ALI value of the record\\n\\t\\tuint96 aliValue = bindings[recordId].aliValue;\\n\\n\\t\\t// positive or zero resulting balance check\\n\\t\\trequire(aliValue >= aliDelta, \\\"not enough ALI\\\");\\n\\n\\t\\t// update ALI balance on the contract\\n\\t\\taliBalance -= aliDelta;\\n\\n\\t\\t// update ALI balance on the binding\\n\\t\\tbindings[recordId].aliValue = aliValue - aliDelta;\\n\\n\\t\\t// transfer the ALI tokens to the recipient\\n\\t\\tERC20(aliContract).transfer(recipient, aliDelta);\\n\\n\\t\\t// emit an event\\n\\t\\temit Updated(msg.sender, owner, recordId, aliValue, aliValue - aliDelta);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Determines how many tokens are locked in a particular iNFT\\n\\t *\\n\\t * @dev A shortcut for bindings(recordId).aliValue\\n\\t * @dev Throws if iNFT specified doesn't exist\\n\\t *\\n\\t * @param recordId iNFT ID to query locked tokens balance for\\n\\t * @return locked tokens balance, bindings[recordId].aliValue\\n\\t */\\n\\tfunction lockedValue(uint256 recordId) public view returns(uint96) {\\n\\t\\t// ensure iNFT exists\\n\\t\\trequire(exists(recordId), \\\"iNFT doesn't exist\\\");\\n\\n\\t\\t// read and return ALI value locked in the binding\\n\\t\\treturn bindings[recordId].aliValue;\\n\\t}\\n}\\n\",\"keccak256\":\"0x4442c3a8b1a6e9e75c8c18bf191307b81100fc51ebad9ae0e0d4072fa1e2685b\",\"license\":\"MIT\"},\"contracts/protocol/NFTStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../interfaces/ERC20Spec.sol\\\";\\nimport \\\"../interfaces/ERC721Spec.sol\\\";\\nimport \\\"../utils/AccessControl.sol\\\";\\n\\n/**\\n * @title NFT Staking\\n *\\n * @notice Enables NFT staking for a given NFT smart contract defined on deployment\\n *\\n * @notice Doesn't introduce any rewards, just tracks the stake/unstake dates for each\\n *      token/owner, this data will be used later on to process the rewards\\n */\\ncontract NFTStaking is AccessControl {\\n\\t/**\\n\\t * @dev Main staking data structure keeping track of a stake,\\n\\t *      used in `tokenStakes` array mapping\\n\\t */\\n\\tstruct StakeData {\\n\\t\\t/**\\n\\t\\t * @dev Who owned and staked the token, who will be the token\\n\\t\\t *      returned to once unstaked\\n\\t\\t */\\n\\t\\taddress owner;\\n\\n\\t\\t/**\\n\\t\\t * @dev When the token was staked and transferred from the owner,\\n\\t\\t *      unix timestamp\\n\\t\\t */\\n\\t\\tuint32 stakedOn;\\n\\n\\t\\t/**\\n\\t\\t * @dev When token was unstaked and returned back to the owner,\\n\\t\\t *      unix timestamp\\n\\t\\t * @dev Zero value means the token is still staked\\n\\t\\t */\\n\\t\\tuint32 unstakedOn;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Auxiliary data structure to help iterate over NFT owner stakes,\\n\\t *      used in `userStakes` array mapping\\n\\t */\\n\\tstruct StakeIndex {\\n\\t\\t/**\\n\\t\\t * @dev Staked token ID\\n\\t\\t */\\n\\t\\tuint32 tokenId;\\n\\n\\t\\t/**\\n\\t\\t * @dev Where to look for main staking data `StakeData`\\n\\t\\t *      in `tokenStakes` array mapping\\n\\t\\t */\\n\\t\\tuint32 index;\\n\\t}\\n\\n\\t/**\\n\\t * @dev NFT smart contract to stake/unstake tokens of\\n\\t */\\n\\taddress public immutable targetContract;\\n\\n\\t/**\\n\\t * @notice For each token ID stores the history of its stakes,\\n\\t *      last element of the history may be \\\"open\\\" (unstakedOn = 0),\\n\\t *      meaning the token is still staked and is ot be returned to the `owner`\\n\\t *\\n\\t * @dev Maps token ID => StakeData[]\\n\\t */\\n\\tmapping(uint32 => StakeData[]) public tokenStakes;\\n\\n\\t/**\\n\\t * @notice For each owner address stores the links to its stakes,\\n\\t *      the link is represented as StakeIndex data struct\\n\\t *\\n\\t * @dev Maps owner address => StakeIndex[]\\n\\t */\\n\\tmapping(address => StakeIndex[]) public userStakes;\\n\\n\\t/**\\n\\t * @dev Enables staking, stake(), stakeBatch()\\n\\t */\\n\\tuint32 public constant FEATURE_STAKING = 0x0000_0001;\\n\\n\\t/**\\n\\t * @dev Enables unstaking, unstake(), unstakeBatch()\\n\\t */\\n\\tuint32 public constant FEATURE_UNSTAKING = 0x0000_0002;\\n\\n\\t/**\\n\\t * @notice People do mistake and may send tokens by mistake; since\\n\\t *      staking contract is not designed to accept the tokens directly,\\n\\t *      it allows the rescue manager to \\\"rescue\\\" such lost tokens\\n\\t *\\n\\t * @notice Rescue manager is responsible for \\\"rescuing\\\" ERC20/ERC721 tokens\\n\\t *      accidentally sent to the smart contract\\n\\t *\\n\\t * @dev Role ROLE_RESCUE_MANAGER allows withdrawing non-staked ERC20/ERC721\\n\\t *      tokens stored on the smart contract balance\\n\\t */\\n\\tuint32 public constant ROLE_RESCUE_MANAGER = 0x0001_0000;\\n\\n\\t/**\\n\\t * @dev Fired in stake(), stakeBatch()\\n\\t *\\n\\t * @param _by token owner, tx executor\\n\\t * @param _tokenId token ID staked and transferred into the smart contract\\n\\t * @param _when unix timestamp of when staking happened\\n\\t */\\n\\tevent Staked(address indexed _by, uint32 indexed _tokenId, uint32 _when);\\n\\n\\t/**\\n\\t * @dev Fired in unstake(), unstakeBatch()\\n\\t *\\n\\t * @param _by token owner, tx executor\\n\\t * @param _tokenId token ID unstaked and transferred back to owner\\n\\t * @param _when unix timestamp of when unstaking happened\\n\\t */\\n\\tevent Unstaked(address indexed _by, uint32 indexed _tokenId, uint32 _when);\\n\\n\\t/**\\n\\t * @dev Creates/deploys NFT staking contract bound to the already deployed\\n\\t *      target NFT ERC721 smart contract to be staked\\n\\t *\\n\\t * @param _nft address of the deployed NFT smart contract instance\\n\\t */\\n\\tconstructor(address _nft) AccessControl(msg.sender) {\\n\\t\\t// verify input is set\\n\\t\\trequire(_nft != address(0), \\\"target contract is not set\\\");\\n\\n\\t\\t// verify input is valid smart contract of the expected interface\\n\\t\\trequire(ERC165(_nft).supportsInterface(type(ERC721).interfaceId), \\\"unexpected target type\\\");\\n\\n\\t\\t// setup smart contract internal state\\n\\t\\ttargetContract = _nft;\\n\\t}\\n\\n\\t/**\\n\\t * @notice How many times a particular token was staked\\n\\t *\\n\\t * @dev Used to iterate `tokenStakes(tokenId, i)`, `i < numStakes(tokenId)`\\n\\t *\\n\\t * @param tokenId token ID to query number of times staked for\\n\\t * @return number of times token was staked\\n\\t */\\n\\tfunction numStakes(uint32 tokenId) public view returns(uint256) {\\n\\t\\t// just read the array length and return it\\n\\t\\treturn tokenStakes[tokenId].length;\\n\\t}\\n\\n\\t/**\\n\\t * @notice How many stakes a particular address has done\\n\\t *\\n\\t * @dev Used to iterate `userStakes(owner, i)`, `i < numStakes(owner)`\\n\\t *\\n\\t * @param owner an address to query number of times it staked\\n\\t * @return number of times a particular address has staked\\n\\t */\\n\\tfunction numStakes(address owner) public view returns(uint256) {\\n\\t\\t// just read the array length and return it\\n\\t\\treturn userStakes[owner].length;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Determines if the token is currently staked or not\\n\\t *\\n\\t * @param tokenId token ID to check state for\\n\\t * @return true if token is staked, false otherwise\\n\\t */\\n\\tfunction isStaked(uint32 tokenId) public view returns(bool) {\\n\\t\\t// get an idea of current stakes for the token\\n\\t\\tuint256 n = tokenStakes[tokenId].length;\\n\\n\\t\\t// evaluate based on the last stake element in the array\\n\\t\\treturn n > 0 && tokenStakes[tokenId][n - 1].unstakedOn == 0;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Stakes the NFT; the token is transferred from its owner to the staking contract;\\n\\t *      token must be owned by the tx executor and be transferable by staking contract\\n\\t *\\n\\t * @param tokenId token ID to stake\\n\\t */\\n\\tfunction stake(uint32 tokenId) public {\\n\\t\\t// verify staking is enabled\\n\\t\\trequire(isFeatureEnabled(FEATURE_STAKING), \\\"staking is disabled\\\");\\n\\n\\t\\t// get an idea of current stakes for the token\\n\\t\\tuint256 n = tokenStakes[tokenId].length;\\n\\n\\t\\t// verify the token is not currently staked\\n\\t\\trequire(n == 0 || tokenStakes[tokenId][n - 1].unstakedOn != 0, \\\"already staked\\\");\\n\\n\\t\\t// verify token belongs to the address which executes staking\\n\\t\\trequire(ERC721(targetContract).ownerOf(tokenId) == msg.sender, \\\"access denied\\\");\\n\\n\\t\\t// transfer the token from owner into the staking contract\\n\\t\\tERC721(targetContract).transferFrom(msg.sender, address(this), tokenId);\\n\\n\\t\\t// current timestamp to be set as `stakedOn`\\n\\t\\tuint32 stakedOn = now32();\\n\\n\\t\\t// save token stake data\\n\\t\\ttokenStakes[tokenId].push(StakeData({\\n\\t\\t\\towner: msg.sender,\\n\\t\\t\\tstakedOn: stakedOn,\\n\\t\\t\\tunstakedOn: 0\\n\\t\\t}));\\n\\n\\t\\t// save token stake index\\n\\t\\tuserStakes[msg.sender].push(StakeIndex({\\n\\t\\t\\ttokenId: tokenId,\\n\\t\\t\\tindex: uint32(n)\\n\\t\\t}));\\n\\n\\t\\t// emit an event\\n\\t\\temit Staked(msg.sender, tokenId, stakedOn);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Stakes several NFTs; tokens are transferred from their owner to the staking contract;\\n\\t *      tokens must be owned by the tx executor and be transferable by staking contract\\n\\t *\\n\\t * @param tokenIds token IDs to stake\\n\\t */\\n\\tfunction stakeBatch(uint32[] memory tokenIds) public {\\n\\t\\t// iterate the collection passed\\n\\t\\tfor(uint256 i = 0; i < tokenIds.length; i++) {\\n\\t\\t\\t// and stake each token one by one\\n\\t\\t\\tstake(tokenIds[i]);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Unstakes the NFT; the token is transferred from staking contract back\\n\\t *      its previous owner\\n\\t *\\n\\t * @param tokenId token ID to unstake\\n\\t */\\n\\tfunction unstake(uint32 tokenId) public {\\n\\t\\t// verify staking is enabled\\n\\t\\trequire(isFeatureEnabled(FEATURE_UNSTAKING), \\\"unstaking is disabled\\\");\\n\\n\\t\\t// get an idea of current stakes for the token\\n\\t\\tuint256 n = tokenStakes[tokenId].length;\\n\\n\\t\\t// verify the token is currently staked\\n\\t\\trequire(n != 0, \\\"not staked\\\");\\n\\t\\trequire(tokenStakes[tokenId][n - 1].unstakedOn == 0, \\\"already unstaked\\\");\\n\\n\\t\\t// verify token belongs to the address which executes unstaking\\n\\t\\trequire(tokenStakes[tokenId][n - 1].owner == msg.sender, \\\"access denied\\\");\\n\\n\\t\\t// current timestamp to be set as `unstakedOn`\\n\\t\\tuint32 unstakedOn = now32();\\n\\n\\t\\t// update token stake data\\n\\t\\ttokenStakes[tokenId][n - 1].unstakedOn = unstakedOn;\\n\\n\\t\\t// transfer the token back to owner\\n\\t\\tERC721(targetContract).transferFrom(address(this), msg.sender, tokenId);\\n\\n\\t\\t// emit an event\\n\\t\\temit Unstaked(msg.sender, tokenId, unstakedOn);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Unstakes several NFTs; tokens are transferred from staking contract back\\n\\t *      their previous owner\\n\\t *\\n\\t * @param tokenIds token IDs to unstake\\n\\t */\\n\\tfunction unstakeBatch(uint32[] memory tokenIds) public {\\n\\t\\t// iterate the collection passed\\n\\t\\tfor(uint256 i = 0; i < tokenIds.length; i++) {\\n\\t\\t\\t// and unstake each token one by one\\n\\t\\t\\tunstake(tokenIds[i]);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Restricted access function to rescue accidentally sent ERC20 tokens,\\n\\t *      the tokens are rescued via `transfer` function call on the\\n\\t *      contract address specified and with the parameters specified:\\n\\t *      `_contract.transfer(_to, _value)`\\n\\t *\\n\\t * @dev Requires executor to have `ROLE_RESCUE_MANAGER` permission\\n\\t *\\n\\t * @param _contract smart contract address to execute `transfer` function on\\n\\t * @param _to to address in `transfer(_to, _value)`\\n\\t * @param _value value to transfer in `transfer(_to, _value)`\\n\\t */\\n\\tfunction rescueErc20(address _contract, address _to, uint256 _value) public {\\n\\t\\t// verify the access permission\\n\\t\\trequire(isSenderInRole(ROLE_RESCUE_MANAGER), \\\"access denied\\\");\\n\\n\\t\\t// perform the transfer as requested, without any checks\\n\\t\\tERC20(_contract).transfer(_to, _value);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Restricted access function to rescue accidentally sent ERC721 tokens,\\n\\t *      the tokens are rescued via `transferFrom` function call on the\\n\\t *      contract address specified and with the parameters specified:\\n\\t *      `_contract.transferFrom(this, _to, _tokenId)`\\n\\t *\\n\\t * @dev Requires executor to have `ROLE_RESCUE_MANAGER` permission\\n\\t *\\n\\t * @param _contract smart contract address to execute `transferFrom` function on\\n\\t * @param _to to address in `transferFrom(this, _to, _tokenId)`\\n\\t * @param _tokenId token ID to transfer in `transferFrom(this, _to, _tokenId)`\\n\\t */\\n\\tfunction rescueErc721(address _contract, address _to, uint256 _tokenId) public {\\n\\t\\t// verify the access permission\\n\\t\\trequire(isSenderInRole(ROLE_RESCUE_MANAGER), \\\"access denied\\\");\\n\\n\\t\\t// verify the NFT is not staked\\n\\t\\trequire(_contract != targetContract || !isStaked(uint32(_tokenId)), \\\"token is staked\\\");\\n\\n\\t\\t// perform the transfer as requested, without any checks\\n\\t\\tERC721(_contract).transferFrom(address(this), _to, _tokenId);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Testing time-dependent functionality may be difficult;\\n\\t *      we override time in the helper test smart contract (mock)\\n\\t *\\n\\t * @return `block.timestamp` in mainnet, custom values in testnets (if overridden)\\n\\t */\\n\\tfunction now32() public view virtual returns (uint32) {\\n\\t\\t// return current block timestamp\\n\\t\\treturn uint32(block.timestamp);\\n\\t}\\n}\\n\",\"keccak256\":\"0x0cdabdedfd6fbf39ce73bf028b809c117e404c1fb41ec0455f4168a1a008e76f\",\"license\":\"MIT\"},\"contracts/utils/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22; // require with message (0.4.22), pure/view modifiers (0.4.16), hardhat (0.4.11)\\n\\n/**\\n * @title Role-based Access Control (RBAC)\\n *\\n * @notice Access control smart contract provides an API to check\\n *      if a specific operation is permitted globally and/or\\n *      if a particular user has a permission to execute it.\\n *\\n * @notice This contract is inherited by other contracts requiring the role-based access control (RBAC)\\n *      protection for the restricted access functions\\n *\\n * @notice It deals with two main entities: features and roles.\\n *\\n * @notice Features are designed to be used to enable/disable public functions\\n *      of the smart contract (used by a wide audience).\\n * @notice User roles are designed to control the access to restricted functions\\n *      of the smart contract (used by a limited set of maintainers).\\n *\\n * @notice Terms \\\"role\\\", \\\"permissions\\\" and \\\"set of permissions\\\" have equal meaning\\n *      in the documentation text and may be used interchangeably.\\n * @notice Terms \\\"permission\\\", \\\"single permission\\\" implies only one permission bit set.\\n *\\n * @notice Access manager is a special role which allows to grant/revoke other roles.\\n *      Access managers can only grant/revoke permissions which they have themselves.\\n *      As an example, access manager with no other roles set can only grant/revoke its own\\n *      access manager permission and nothing else.\\n *\\n * @notice Access manager permission should be treated carefully, as a super admin permission:\\n *      Access manager with even no other permission can interfere with another account by\\n *      granting own access manager permission to it and effectively creating more powerful\\n *      permission set than its own.\\n *\\n * @dev Both current and OpenZeppelin AccessControl implementations feature a similar API\\n *      to check/know \\\"who is allowed to do this thing\\\".\\n * @dev Zeppelin implementation is more flexible:\\n *      - it allows setting unlimited number of roles, while current is limited to 256 different roles\\n *      - it allows setting an admin for each role, while current allows having only one global admin\\n * @dev Current implementation is more lightweight:\\n *      - it uses only 1 bit per role, while Zeppelin uses 256 bits\\n *      - it allows setting up to 256 roles at once, in a single transaction, while Zeppelin allows\\n *        setting only one role in a single transaction\\n *\\n * @dev This smart contract is designed to be inherited by other\\n *      smart contracts which require access control management capabilities.\\n *\\n * @dev Access manager permission has a bit 255 set.\\n *      This bit must not be used by inheriting contracts for any other permissions/features.\\n *\\n * @author Basil Gorin\\n */\\nabstract contract AccessControl {\\n\\t/**\\n\\t * @dev Privileged addresses with defined roles/permissions\\n\\t * @dev In the context of ERC20/ERC721 tokens these can be permissions to\\n\\t *      allow minting or burning tokens, transferring on behalf and so on\\n\\t *\\n\\t * @dev Maps user address to the permissions bitmask (role), where each bit\\n\\t *      represents a permission\\n\\t * @dev Bitmask 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n\\t *      represents all possible permissions\\n\\t * @dev 'This' address mapping represents global features of the smart contract\\n\\t *\\n\\t * @dev We keep the mapping private to prevent direct writes to it from the inheriting\\n\\t *      contracts, `getRole()` and `updateRole()` functions should be used instead\\n\\t */\\n\\tmapping(address => uint256) internal userRoles; // TODO: restrict to \\\"private\\\"\\n\\n\\t/**\\n\\t * @notice Access manager is responsible for assigning the roles to users,\\n\\t *      enabling/disabling global features of the smart contract\\n\\t * @notice Access manager can add, remove and update user roles,\\n\\t *      remove and update global features\\n\\t *\\n\\t * @dev Role ROLE_ACCESS_MANAGER allows modifying user roles and global features\\n\\t * @dev Role ROLE_ACCESS_MANAGER has single bit at position 255 enabled\\n\\t */\\n\\tuint256 public constant ROLE_ACCESS_MANAGER = 0x8000000000000000000000000000000000000000000000000000000000000000;\\n\\n\\t/**\\n\\t * @dev Bitmask representing all the possible permissions (super admin role)\\n\\t * @dev Has all the bits are enabled (2^256 - 1 value)\\n\\t */\\n\\tuint256 internal constant FULL_PRIVILEGES_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n\\t/**\\n\\t * @dev Fired in updateRole() and updateFeatures()\\n\\t *\\n\\t * @param operator address which was granted/revoked permissions\\n\\t * @param requested permissions requested\\n\\t * @param assigned permissions effectively set\\n\\t */\\n\\tevent RoleUpdated(address indexed operator, uint256 requested, uint256 assigned);\\n\\n\\t/**\\n\\t * @notice Function modifier making a function defined as public behave as restricted\\n\\t *      (so that only a pre-configured set of accounts can execute it)\\n\\t *\\n\\t * @param role the role transaction executor is required to have;\\n\\t *      the function throws an \\\"access denied\\\" exception if this condition is not met\\n\\t */\\n\\tmodifier restrictedTo(uint256 role) {\\n\\t\\t// verify the access permission\\n\\t\\trequire(isSenderInRole(role), \\\"access denied\\\");\\n\\n\\t\\t// execute the rest of the function\\n\\t\\t_;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Creates an access control instance, setting the contract owner to have full privileges\\n\\t *\\n\\t * @param _owner smart contract owner having full privileges\\n\\t */\\n\\tconstructor(address _owner) internal { // visibility modifier is required to be compilable with 0.6.x\\n\\t\\t// grant owner full privileges\\n\\t\\t__setRole(_owner, FULL_PRIVILEGES_MASK, FULL_PRIVILEGES_MASK);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Retrieves globally set of features enabled\\n\\t *\\n\\t * @dev Effectively reads userRoles role for the contract itself\\n\\t *\\n\\t * @return 256-bit bitmask of the features enabled\\n\\t */\\n\\tfunction features() public view returns (uint256) {\\n\\t\\t// features are stored in 'this' address mapping of `userRoles`\\n\\t\\treturn getRole(address(this));\\n\\t}\\n\\n\\t/**\\n\\t * @notice Updates set of the globally enabled features (`features`),\\n\\t *      taking into account sender's permissions\\n\\t *\\n\\t * @dev Requires transaction sender to have `ROLE_ACCESS_MANAGER` permission\\n\\t * @dev Function is left for backward compatibility with older versions\\n\\t *\\n\\t * @param _mask bitmask representing a set of features to enable/disable\\n\\t */\\n\\tfunction updateFeatures(uint256 _mask) public {\\n\\t\\t// delegate call to `updateRole`\\n\\t\\tupdateRole(address(this), _mask);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Reads the permissions (role) for a given user from the `userRoles` mapping\\n\\t *      (privileged addresses with defined roles/permissions)\\n\\t * @notice In the context of ERC20/ERC721 tokens these can be permissions to\\n\\t *      allow minting or burning tokens, transferring on behalf and so on\\n\\t *\\n\\t * @dev Having a simple getter instead of making the mapping public\\n\\t *      allows enforcing the encapsulation of the mapping and protects from\\n\\t *      writing to it directly in the inheriting smart contracts\\n\\t *\\n\\t * @param operator address of a user to read permissions for,\\n\\t *      or self address to read global features of the smart contract\\n\\t */\\n\\tfunction getRole(address operator) public view returns(uint256) {\\n\\t\\t// read the value from `userRoles` and return\\n\\t\\treturn userRoles[operator];\\n\\t}\\n\\n\\t/**\\n\\t * @notice Updates set of permissions (role) for a given user,\\n\\t *      taking into account sender's permissions.\\n\\t *\\n\\t * @dev Setting role to zero is equivalent to removing an all permissions\\n\\t * @dev Setting role to `FULL_PRIVILEGES_MASK` is equivalent to\\n\\t *      copying senders' permissions (role) to the user\\n\\t * @dev Requires transaction sender to have `ROLE_ACCESS_MANAGER` permission\\n\\t *\\n\\t * @param operator address of a user to alter permissions for,\\n\\t *       or self address to alter global features of the smart contract\\n\\t * @param role bitmask representing a set of permissions to\\n\\t *      enable/disable for a user specified\\n\\t */\\n\\tfunction updateRole(address operator, uint256 role) public {\\n\\t\\t// caller must have a permission to update user roles\\n\\t\\trequire(isSenderInRole(ROLE_ACCESS_MANAGER), \\\"access denied\\\");\\n\\n\\t\\t// evaluate the role and reassign it\\n\\t\\t__setRole(operator, role, _evaluateBy(msg.sender, getRole(operator), role));\\n\\t}\\n\\n\\t/**\\n\\t * @notice Determines the permission bitmask an operator can set on the\\n\\t *      target permission set\\n\\t * @notice Used to calculate the permission bitmask to be set when requested\\n\\t *     in `updateRole` and `updateFeatures` functions\\n\\t *\\n\\t * @dev Calculated based on:\\n\\t *      1) operator's own permission set read from userRoles[operator]\\n\\t *      2) target permission set - what is already set on the target\\n\\t *      3) desired permission set - what do we want set target to\\n\\t *\\n\\t * @dev Corner cases:\\n\\t *      1) Operator is super admin and its permission set is `FULL_PRIVILEGES_MASK`:\\n\\t *        `desired` bitset is returned regardless of the `target` permission set value\\n\\t *        (what operator sets is what they get)\\n\\t *      2) Operator with no permissions (zero bitset):\\n\\t *        `target` bitset is returned regardless of the `desired` value\\n\\t *        (operator has no authority and cannot modify anything)\\n\\t *\\n\\t * @dev Example:\\n\\t *      Consider an operator with the permissions bitmask     00001111\\n\\t *      is about to modify the target permission set          01010101\\n\\t *      Operator wants to set that permission set to          00110011\\n\\t *      Based on their role, an operator has the permissions\\n\\t *      to update only lowest 4 bits on the target, meaning that\\n\\t *      high 4 bits of the target set in this example is left\\n\\t *      unchanged and low 4 bits get changed as desired:      01010011\\n\\t *\\n\\t * @param operator address of the contract operator which is about to set the permissions\\n\\t * @param target input set of permissions to operator is going to modify\\n\\t * @param desired desired set of permissions operator would like to set\\n\\t * @return resulting set of permissions given operator will set\\n\\t */\\n\\tfunction _evaluateBy(address operator, uint256 target, uint256 desired) internal view returns (uint256) {\\n\\t\\t// read operator's permissions\\n\\t\\tuint256 p = getRole(operator);\\n\\n\\t\\t// taking into account operator's permissions,\\n\\t\\t// 1) enable the permissions desired on the `target`\\n\\t\\ttarget |= p & desired;\\n\\t\\t// 2) disable the permissions desired on the `target`\\n\\t\\ttarget &= FULL_PRIVILEGES_MASK ^ (p & (FULL_PRIVILEGES_MASK ^ desired));\\n\\n\\t\\t// return calculated result\\n\\t\\treturn target;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Checks if requested set of features is enabled globally on the contract\\n\\t *\\n\\t * @param required set of features to check against\\n\\t * @return true if all the features requested are enabled, false otherwise\\n\\t */\\n\\tfunction isFeatureEnabled(uint256 required) public view returns (bool) {\\n\\t\\t// delegate call to `__hasRole`, passing `features` property\\n\\t\\treturn __hasRole(features(), required);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Checks if transaction sender `msg.sender` has all the permissions required\\n\\t *\\n\\t * @dev Used in smart contracts only. Off-chain clients should use `isOperatorInRole`.\\n\\t *\\n\\t * @param required set of permissions (role) to check against\\n\\t * @return true if all the permissions requested are enabled, false otherwise\\n\\t */\\n\\tfunction isSenderInRole(uint256 required) public view returns (bool) {\\n\\t\\t// delegate call to `isOperatorInRole`, passing transaction sender\\n\\t\\treturn isOperatorInRole(msg.sender, required);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Checks if operator has all the permissions (role) required\\n\\t *\\n\\t * @param operator address of the user to check role for\\n\\t * @param required set of permissions (role) to check\\n\\t * @return true if all the permissions requested are enabled, false otherwise\\n\\t */\\n\\tfunction isOperatorInRole(address operator, uint256 required) public view returns (bool) {\\n\\t\\t// delegate call to `__hasRole`, passing operator's permissions (role)\\n\\t\\treturn __hasRole(getRole(operator), required);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Sets the `assignedRole` role to the operator, logs both `requestedRole` and `actualRole`\\n\\t *\\n\\t * @dev Unsafe:\\n\\t *      provides direct write access to `userRoles` mapping without any security checks,\\n\\t *      doesn't verify the executor (msg.sender) permissions,\\n\\t *      must be kept private at all times\\n\\t *\\n\\t * @param operator address of a user to alter permissions for,\\n\\t *       or self address to alter global features of the smart contract\\n\\t * @param requestedRole bitmask representing a set of permissions requested\\n\\t *      to be enabled/disabled for a user specified, used only to be logged into event\\n\\t * @param assignedRole bitmask representing a set of permissions to\\n\\t *      enable/disable for a user specified, used to update the mapping and to be logged into event\\n\\t */\\n\\tfunction __setRole(address operator, uint256 requestedRole, uint256 assignedRole) private {\\n\\t\\t// assign the role to the operator\\n\\t\\tuserRoles[operator] = assignedRole;\\n\\n\\t\\t// fire an event\\n\\t\\temit RoleUpdated(operator, requestedRole, assignedRole);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Checks if role `actual` contains all the permissions required `required`\\n\\t *\\n\\t * @param actual existent role\\n\\t * @param required required role\\n\\t * @return true if actual has required role (all permissions), false otherwise\\n\\t */\\n\\tfunction __hasRole(uint256 actual, uint256 required) private pure returns (bool) {\\n\\t\\t// check the bitmask for the role required and return the result\\n\\t\\treturn actual & required == required;\\n\\t}\\n}\\n\",\"keccak256\":\"0xe8e8ec0b08321029f31022d235c8bc687d68c2ef51f0557eec43619f1fdb86c1\",\"license\":\"MIT\"},\"contracts/utils/InitializableAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @title Initializable Role-based Access Control (RBAC) // ERC1967Proxy\\n *\\n * @notice Access control smart contract provides an API to check\\n *      if a specific operation is permitted globally and/or\\n *      if a particular user has a permission to execute it.\\n *\\n * @notice This contract is inherited by other contracts requiring the role-based access control (RBAC)\\n *      protection for the restricted access functions\\n *\\n * @notice It deals with two main entities: features and roles.\\n *\\n * @notice Features are designed to be used to enable/disable public functions\\n *      of the smart contract (used by a wide audience).\\n * @notice User roles are designed to control the access to restricted functions\\n *      of the smart contract (used by a limited set of maintainers).\\n *\\n * @notice Terms \\\"role\\\", \\\"permissions\\\" and \\\"set of permissions\\\" have equal meaning\\n *      in the documentation text and may be used interchangeably.\\n * @notice Terms \\\"permission\\\", \\\"single permission\\\" implies only one permission bit set.\\n *\\n * @notice Access manager is a special role which allows to grant/revoke other roles.\\n *      Access managers can only grant/revoke permissions which they have themselves.\\n *      As an example, access manager with no other roles set can only grant/revoke its own\\n *      access manager permission and nothing else.\\n *\\n * @notice Access manager permission should be treated carefully, as a super admin permission:\\n *      Access manager with even no other permission can interfere with another account by\\n *      granting own access manager permission to it and effectively creating more powerful\\n *      permission set than its own.\\n *\\n * @dev Both current and OpenZeppelin AccessControl implementations feature a similar API\\n *      to check/know \\\"who is allowed to do this thing\\\".\\n * @dev Zeppelin implementation is more flexible:\\n *      - it allows setting unlimited number of roles, while current is limited to 256 different roles\\n *      - it allows setting an admin for each role, while current allows having only one global admin\\n * @dev Current implementation is more lightweight:\\n *      - it uses only 1 bit per role, while Zeppelin uses 256 bits\\n *      - it allows setting up to 256 roles at once, in a single transaction, while Zeppelin allows\\n *        setting only one role in a single transaction\\n *\\n * @dev This smart contract is designed to be inherited by other\\n *      smart contracts which require access control management capabilities.\\n *\\n * @dev Access manager permission has a bit 255 set.\\n *      This bit must not be used by inheriting contracts for any other permissions/features.\\n *\\n * @dev This is an initializable version of the RBAC, based on Zeppelin implementation,\\n *      it can be used for ERC1967 proxies, as well as for EIP-1167 minimal proxies\\n *      see https://docs.openzeppelin.com/contracts/4.x/upgradeable\\n *      see https://docs.openzeppelin.com/contracts/4.x/api/proxy#UUPSUpgradeable\\n *      see https://forum.openzeppelin.com/t/uups-proxies-tutorial-solidity-javascript/7786\\n *      see https://eips.ethereum.org/EIPS/eip-1167\\n *      see https://docs.openzeppelin.com/contracts/4.x/api/proxy#Clones\\n *\\n * @author Basil Gorin\\n */\\nabstract contract InitializableAccessControl is Initializable {\\n\\t/**\\n\\t * @dev Privileged addresses with defined roles/permissions\\n\\t * @dev In the context of ERC20/ERC721 tokens these can be permissions to\\n\\t *      allow minting or burning tokens, transferring on behalf and so on\\n\\t *\\n\\t * @dev Maps user address to the permissions bitmask (role), where each bit\\n\\t *      represents a permission\\n\\t * @dev Bitmask 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n\\t *      represents all possible permissions\\n\\t * @dev 'This' address mapping represents global features of the smart contract\\n\\t *\\n\\t * @dev We keep the mapping private to prevent direct writes to it from the inheriting\\n\\t *      contracts, `getRole()` and `updateRole()` functions should be used instead\\n\\t */\\n\\tmapping(address => uint256) private userRoles;\\n\\n\\t/**\\n\\t * @dev Empty reserved space in storage. The size of the __gap array is calculated so that\\n\\t *      the amount of storage used by a contract always adds up to the 50.\\n\\t *      See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n\\t */\\n\\tuint256[49] private __gap;\\n\\n\\t/**\\n\\t * @notice Access manager is responsible for assigning the roles to users,\\n\\t *      enabling/disabling global features of the smart contract\\n\\t * @notice Access manager can add, remove and update user roles,\\n\\t *      remove and update global features\\n\\t *\\n\\t * @dev Role ROLE_ACCESS_MANAGER allows modifying user roles and global features\\n\\t * @dev Role ROLE_ACCESS_MANAGER has single bit at position 255 enabled\\n\\t */\\n\\tuint256 public constant ROLE_ACCESS_MANAGER = 0x8000000000000000000000000000000000000000000000000000000000000000;\\n\\n\\t/**\\n\\t * @notice Upgrade manager is responsible for smart contract upgrades,\\n\\t *      see https://docs.openzeppelin.com/contracts/4.x/api/proxy#UUPSUpgradeable\\n\\t *      see https://docs.openzeppelin.com/contracts/4.x/upgradeable\\n\\t *\\n\\t * @dev Role ROLE_UPGRADE_MANAGER allows passing the _authorizeUpgrade() check\\n\\t * @dev Role ROLE_UPGRADE_MANAGER has single bit at position 254 enabled\\n\\t */\\n\\tuint256 public constant ROLE_UPGRADE_MANAGER = 0x4000000000000000000000000000000000000000000000000000000000000000;\\n\\n\\t/**\\n\\t * @dev Bitmask representing all the possible permissions (super admin role)\\n\\t * @dev Has all the bits are enabled (2^256 - 1 value)\\n\\t */\\n\\tuint256 private constant FULL_PRIVILEGES_MASK = type(uint256).max; // before 0.8.0: uint256(-1) overflows to 0xFFFF...\\n\\n\\t/**\\n\\t * @dev Fired in updateRole() and updateFeatures()\\n\\t *\\n\\t * @param operator address which was granted/revoked permissions\\n\\t * @param requested permissions requested\\n\\t * @param assigned permissions effectively set\\n\\t */\\n\\tevent RoleUpdated(address indexed operator, uint256 requested, uint256 assigned);\\n\\n\\t/**\\n\\t * @notice Function modifier making a function defined as public behave as restricted\\n\\t *      (so that only a pre-configured set of accounts can execute it)\\n\\t *\\n\\t * @param role the role transaction executor is required to have;\\n\\t *      the function throws an \\\"access denied\\\" exception if this condition is not met\\n\\t */\\n\\tmodifier restrictedTo(uint256 role) {\\n\\t\\t// verify the access permission\\n\\t\\trequire(isSenderInRole(role), \\\"access denied\\\");\\n\\n\\t\\t// execute the rest of the function\\n\\t\\t_;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Creates/deploys the ACL implementation to be used in a proxy\\n\\t *\\n\\t * @dev Note:\\n\\t *      the implementation is already initialized and\\n\\t *      `_postConstruct` is not executable on the implementation\\n\\t *      `_postConstruct` is still available in the context of a proxy\\n\\t *      and should be executed on the proxy deployment (in the same tx)\\n\\t */\\n\\t // constructor() initializer {}\\n\\n\\t/**\\n\\t * @dev Contract initializer, sets the contract owner to have full privileges\\n\\t *\\n\\t * @dev Can be executed only once, reverts when executed second time\\n\\t *\\n\\t * @dev IMPORTANT:\\n\\t *      this function SHOULD be executed during proxy deployment (in the same transaction)\\n\\t *\\n\\t * @param _owner smart contract owner having full privileges\\n\\t */\\n\\tfunction _postConstruct(address _owner) internal virtual onlyInitializing {\\n\\t\\t// grant owner full privileges\\n\\t\\t__setRole(_owner, FULL_PRIVILEGES_MASK, FULL_PRIVILEGES_MASK);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Highest version that has been initialized.\\n\\t *      Non-zero value means contract was already initialized.\\n\\t * @dev see {Initializable}, {reinitializer}.\\n\\t *\\n\\t * @return highest version that has been initialized\\n\\t */\\n/*\\n\\tfunction getInitializedVersion() public view returns(uint64) {\\n\\t\\t// delegate to `_getInitializedVersion`\\n\\t\\treturn _getInitializedVersion();\\n\\t}\\n*/\\n\\n\\t/**\\n\\t * @notice Retrieves globally set of features enabled\\n\\t *\\n\\t * @dev Effectively reads userRoles role for the contract itself\\n\\t *\\n\\t * @return 256-bit bitmask of the features enabled\\n\\t */\\n\\tfunction features() public view returns (uint256) {\\n\\t\\t// features are stored in 'this' address mapping of `userRoles`\\n\\t\\treturn getRole(address(this));\\n\\t}\\n\\n\\t/**\\n\\t * @notice Updates set of the globally enabled features (`features`),\\n\\t *      taking into account sender's permissions\\n\\t *\\n\\t * @dev Requires transaction sender to have `ROLE_ACCESS_MANAGER` permission\\n\\t * @dev Function is left for backward compatibility with older versions\\n\\t *\\n\\t * @param _mask bitmask representing a set of features to enable/disable\\n\\t */\\n\\tfunction updateFeatures(uint256 _mask) public {\\n\\t\\t// delegate call to `updateRole`\\n\\t\\tupdateRole(address(this), _mask);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Reads the permissions (role) for a given user from the `userRoles` mapping\\n\\t *      (privileged addresses with defined roles/permissions)\\n\\t * @notice In the context of ERC20/ERC721 tokens these can be permissions to\\n\\t *      allow minting or burning tokens, transferring on behalf and so on\\n\\t *\\n\\t * @dev Having a simple getter instead of making the mapping public\\n\\t *      allows enforcing the encapsulation of the mapping and protects from\\n\\t *      writing to it directly in the inheriting smart contracts\\n\\t *\\n\\t * @param operator address of a user to read permissions for,\\n\\t *      or self address to read global features of the smart contract\\n\\t */\\n\\tfunction getRole(address operator) public view returns(uint256) {\\n\\t\\t// read the value from `userRoles` and return\\n\\t\\treturn userRoles[operator];\\n\\t}\\n\\n\\t/**\\n\\t * @notice Updates set of permissions (role) for a given user,\\n\\t *      taking into account sender's permissions.\\n\\t *\\n\\t * @dev Setting role to zero is equivalent to removing an all permissions\\n\\t * @dev Setting role to `FULL_PRIVILEGES_MASK` is equivalent to\\n\\t *      copying senders' permissions (role) to the user\\n\\t * @dev Requires transaction sender to have `ROLE_ACCESS_MANAGER` permission\\n\\t *\\n\\t * @param operator address of a user to alter permissions for,\\n\\t *       or self address to alter global features of the smart contract\\n\\t * @param role bitmask representing a set of permissions to\\n\\t *      enable/disable for a user specified\\n\\t */\\n\\tfunction updateRole(address operator, uint256 role) public {\\n\\t\\t// caller must have a permission to update user roles\\n\\t\\trequire(isSenderInRole(ROLE_ACCESS_MANAGER), \\\"access denied\\\");\\n\\n\\t\\t// evaluate the role and reassign it\\n\\t\\t__setRole(operator, role, _evaluateBy(msg.sender, getRole(operator), role));\\n\\t}\\n\\n\\t/**\\n\\t * @notice Determines the permission bitmask an operator can set on the\\n\\t *      target permission set\\n\\t * @notice Used to calculate the permission bitmask to be set when requested\\n\\t *     in `updateRole` and `updateFeatures` functions\\n\\t *\\n\\t * @dev Calculated based on:\\n\\t *      1) operator's own permission set read from userRoles[operator]\\n\\t *      2) target permission set - what is already set on the target\\n\\t *      3) desired permission set - what do we want set target to\\n\\t *\\n\\t * @dev Corner cases:\\n\\t *      1) Operator is super admin and its permission set is `FULL_PRIVILEGES_MASK`:\\n\\t *        `desired` bitset is returned regardless of the `target` permission set value\\n\\t *        (what operator sets is what they get)\\n\\t *      2) Operator with no permissions (zero bitset):\\n\\t *        `target` bitset is returned regardless of the `desired` value\\n\\t *        (operator has no authority and cannot modify anything)\\n\\t *\\n\\t * @dev Example:\\n\\t *      Consider an operator with the permissions bitmask     00001111\\n\\t *      is about to modify the target permission set          01010101\\n\\t *      Operator wants to set that permission set to          00110011\\n\\t *      Based on their role, an operator has the permissions\\n\\t *      to update only lowest 4 bits on the target, meaning that\\n\\t *      high 4 bits of the target set in this example is left\\n\\t *      unchanged and low 4 bits get changed as desired:      01010011\\n\\t *\\n\\t * @param operator address of the contract operator which is about to set the permissions\\n\\t * @param target input set of permissions to operator is going to modify\\n\\t * @param desired desired set of permissions operator would like to set\\n\\t * @return resulting set of permissions given operator will set\\n\\t */\\n\\tfunction _evaluateBy(address operator, uint256 target, uint256 desired) internal view returns (uint256) {\\n\\t\\t// read operator's permissions\\n\\t\\tuint256 p = getRole(operator);\\n\\n\\t\\t// taking into account operator's permissions,\\n\\t\\t// 1) enable the permissions desired on the `target`\\n\\t\\ttarget |= p & desired;\\n\\t\\t// 2) disable the permissions desired on the `target`\\n\\t\\ttarget &= FULL_PRIVILEGES_MASK ^ (p & (FULL_PRIVILEGES_MASK ^ desired));\\n\\n\\t\\t// return calculated result\\n\\t\\treturn target;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Checks if requested set of features is enabled globally on the contract\\n\\t *\\n\\t * @param required set of features to check against\\n\\t * @return true if all the features requested are enabled, false otherwise\\n\\t */\\n\\tfunction isFeatureEnabled(uint256 required) public view returns (bool) {\\n\\t\\t// delegate call to `__hasRole`, passing `features` property\\n\\t\\treturn __hasRole(features(), required);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Checks if transaction sender `msg.sender` has all the permissions required\\n\\t *\\n\\t * @dev Used in smart contracts only. Off-chain clients should use `isOperatorInRole`.\\n\\t *\\n\\t * @param required set of permissions (role) to check against\\n\\t * @return true if all the permissions requested are enabled, false otherwise\\n\\t */\\n\\tfunction isSenderInRole(uint256 required) public view returns (bool) {\\n\\t\\t// delegate call to `isOperatorInRole`, passing transaction sender\\n\\t\\treturn isOperatorInRole(msg.sender, required);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Checks if operator has all the permissions (role) required\\n\\t *\\n\\t * @param operator address of the user to check role for\\n\\t * @param required set of permissions (role) to check\\n\\t * @return true if all the permissions requested are enabled, false otherwise\\n\\t */\\n\\tfunction isOperatorInRole(address operator, uint256 required) public view returns (bool) {\\n\\t\\t// delegate call to `__hasRole`, passing operator's permissions (role)\\n\\t\\treturn __hasRole(getRole(operator), required);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Sets the `assignedRole` role to the operator, logs both `requestedRole` and `actualRole`\\n\\t *\\n\\t * @dev Unsafe:\\n\\t *      provides direct write access to `userRoles` mapping without any security checks,\\n\\t *      doesn't verify the executor (msg.sender) permissions,\\n\\t *      must be kept private at all times\\n\\t *\\n\\t * @param operator address of a user to alter permissions for,\\n\\t *       or self address to alter global features of the smart contract\\n\\t * @param requestedRole bitmask representing a set of permissions requested\\n\\t *      to be enabled/disabled for a user specified, used only to be logged into event\\n\\t * @param assignedRole bitmask representing a set of permissions to\\n\\t *      enable/disable for a user specified, used to update the mapping and to be logged into event\\n\\t */\\n\\tfunction __setRole(address operator, uint256 requestedRole, uint256 assignedRole) private {\\n\\t\\t// assign the role to the operator\\n\\t\\tuserRoles[operator] = assignedRole;\\n\\n\\t\\t// fire an event\\n\\t\\temit RoleUpdated(operator, requestedRole, assignedRole);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Checks if role `actual` contains all the permissions required `required`\\n\\t *\\n\\t * @param actual existent role\\n\\t * @param required required role\\n\\t * @return true if actual has required role (all permissions), false otherwise\\n\\t */\\n\\tfunction __hasRole(uint256 actual, uint256 required) private pure returns (bool) {\\n\\t\\t// check the bitmask for the role required and return the result\\n\\t\\treturn actual & required == required;\\n\\t}\\n}\\n\",\"keccak256\":\"0x4401ac10646baffe69521c6e6ae82ab76c2fbdfbe1c39bc0fb6028996a298284\",\"license\":\"MIT\"},\"contracts/utils/UpgradeableAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"./InitializableAccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\n\\n/**\\n * @title Upgradeable Role-based Access Control (RBAC) // ERC1967Proxy\\n *\\n * @notice Access control smart contract provides an API to check\\n *      if a specific operation is permitted globally and/or\\n *      if a particular user has a permission to execute it.\\n *\\n * @notice This contract is inherited by other contracts requiring the role-based access control (RBAC)\\n *      protection for the restricted access functions\\n *\\n * @notice It deals with two main entities: features and roles.\\n *\\n * @notice Features are designed to be used to enable/disable public functions\\n *      of the smart contract (used by a wide audience).\\n * @notice User roles are designed to control the access to restricted functions\\n *      of the smart contract (used by a limited set of maintainers).\\n *\\n * @notice Terms \\\"role\\\", \\\"permissions\\\" and \\\"set of permissions\\\" have equal meaning\\n *      in the documentation text and may be used interchangeably.\\n * @notice Terms \\\"permission\\\", \\\"single permission\\\" implies only one permission bit set.\\n *\\n * @notice Access manager is a special role which allows to grant/revoke other roles.\\n *      Access managers can only grant/revoke permissions which they have themselves.\\n *      As an example, access manager with no other roles set can only grant/revoke its own\\n *      access manager permission and nothing else.\\n *\\n * @notice Access manager permission should be treated carefully, as a super admin permission:\\n *      Access manager with even no other permission can interfere with another account by\\n *      granting own access manager permission to it and effectively creating more powerful\\n *      permission set than its own.\\n *\\n * @dev Both current and OpenZeppelin AccessControl implementations feature a similar API\\n *      to check/know \\\"who is allowed to do this thing\\\".\\n * @dev Zeppelin implementation is more flexible:\\n *      - it allows setting unlimited number of roles, while current is limited to 256 different roles\\n *      - it allows setting an admin for each role, while current allows having only one global admin\\n * @dev Current implementation is more lightweight:\\n *      - it uses only 1 bit per role, while Zeppelin uses 256 bits\\n *      - it allows setting up to 256 roles at once, in a single transaction, while Zeppelin allows\\n *        setting only one role in a single transaction\\n *\\n * @dev This smart contract is designed to be inherited by other\\n *      smart contracts which require access control management capabilities.\\n *\\n * @dev Access manager permission has a bit 255 set.\\n *      This bit must not be used by inheriting contracts for any other permissions/features.\\n *\\n * @dev This is an upgradeable version of the ACL, based on Zeppelin implementation for ERC1967,\\n *      see https://docs.openzeppelin.com/contracts/4.x/upgradeable\\n *      see https://docs.openzeppelin.com/contracts/4.x/api/proxy#UUPSUpgradeable\\n *      see https://forum.openzeppelin.com/t/uups-proxies-tutorial-solidity-javascript/7786\\n *\\n * @author Basil Gorin\\n */\\nabstract contract UpgradeableAccessControl is InitializableAccessControl, UUPSUpgradeable {\\n\\t/**\\n\\t * @dev Creates/deploys the ACL implementation to be used in a proxy\\n\\t *\\n\\t * @dev Note:\\n\\t *      the implementation is already initialized and\\n\\t *      `_postConstruct` is not executable on the implementation\\n\\t *      `_postConstruct` is still available in the context of a proxy\\n\\t *      and should be executed on the proxy deployment (in the same tx)\\n\\t */\\n\\tconstructor() initializer {}\\n\\n\\t/**\\n\\t * @notice Returns an address of the implementation smart contract,\\n\\t *      see ERC1967Upgrade._getImplementation()\\n\\t *\\n\\t * @return the current implementation address\\n\\t */\\n\\tfunction getImplementation() public view virtual returns (address) {\\n\\t\\t// delegate to `ERC1967Upgrade._getImplementation()`\\n\\t\\treturn _getImplementation();\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc UUPSUpgradeable\\n\\t */\\n\\tfunction _authorizeUpgrade(address) internal virtual override {\\n\\t\\t// caller must have a permission to upgrade the contract\\n\\t\\trequire(isSenderInRole(ROLE_UPGRADE_MANAGER), \\\"access denied\\\");\\n\\t}\\n}\\n\",\"keccak256\":\"0x6108509c98214452c4eadf7aa322e09ed3a53c97298dca0935c9d8cc9ac9f846\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040526004361061031a5760003560e01c8063a472d0b6116101ab578063c688d693116100f7578063e068c12711610095578063f9bf90171161006f578063f9bf9017146109d8578063fa4c9ab414610a19578063fc999d0414610a2e578063fcc2c07814610a4e57600080fd5b8063e068c12714610978578063e480d61214610998578063f5a5ad11146109b857600080fd5b8063cd7e176d116100d1578063cd7e176d146108d9578063d26ef1ca14610908578063d5bb7f6714610938578063e023fd421461095857600080fd5b8063c688d69314610884578063c69f89fa146108a4578063caa4d8fe146108c457600080fd5b8063ae682e2e11610164578063bbd509241161013e578063bbd50924146107f7578063bea55b0414610817578063beb1aec01461084d578063c6179e581461086457600080fd5b8063ae682e2e146107aa578063af830362146107c2578063b00e97a0146107e257600080fd5b8063a472d0b6146106fa578063a580a7951461071a578063aa6699f214610748578063aaf10f421461075d578063ae5b102e14610772578063ae60bda41461079257600080fd5b8063442767331161026a578063725f36261161022357806380c6ddfa116101fd57806380c6ddfa1461066057806385335d191461068d5780639367b400146106ba5780639a1d7ce4146106da57600080fd5b8063725f36261461061457806375853002146106345780637efbf5b11461064957600080fd5b8063442767331461055e5780634db04542146105945780634e1aee8c146105b45780634f1ef286146105d457806359549dbb146105e7578063612f5cbb146105fe57600080fd5b80631c94a774116102d75780632d0335ab116102b15780632d0335ab146104c85780633659cfe6146104fe578063396ab56f1461051e5780633f562fcc1461053e57600080fd5b80631c94a774146104505780632176b89e146104705780632b5214161461049c57600080fd5b806308f7e9dc1461031f5780630dc3d2841461035c5780630e3163bc1461037c578063114247b8146103bc5780631604b2c6146103fb57806319a756271461042e575b600080fd5b34801561032b57600080fd5b5060cd5461033f906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561036857600080fd5b5060cc5461033f906001600160a01b031681565b34801561038857600080fd5b506103ac610397366004613a2e565b600090815260d0602052604090205460ff1690565b6040519015158152602001610353565b3480156103c857600080fd5b506103dc6103d7366004613a5e565b610a6e565b604080516001600160a01b039093168352602083019190915201610353565b34801561040757600080fd5b5061041b610416366004613b1f565b610ac2565b60405161ffff9091168152602001610353565b34801561043a57600080fd5b5061044e610449366004613bca565b610aee565b005b34801561045c57600080fd5b5061044e61046b366004613c41565b610b24565b34801561047c57600080fd5b506104876208000081565b60405163ffffffff9091168152602001610353565b3480156104a857600080fd5b50306000908152600160205260409020545b604051908152602001610353565b3480156104d457600080fd5b506104ba6104e3366004613c6d565b6001600160a01b0316600090815260cf602052604090205490565b34801561050a57600080fd5b5061044e610519366004613c6d565b610c34565b34801561052a57600080fd5b5061044e610539366004613c8a565b610cfc565b34801561054a57600080fd5b506103ac610559366004613c8a565b610d06565b34801561056a57600080fd5b506104ba610579366004613c6d565b6001600160a01b031660009081526001602052604090205490565b3480156105a057600080fd5b5061044e6105af366004613c8a565b610d3f565b3480156105c057600080fd5b5061044e6105cf366004613ca6565b6111c8565b61044e6105e2366004613cea565b6116bd565b3480156105f357600080fd5b506104876202000081565b34801561060a57600080fd5b506104ba60d95481565b34801561062057600080fd5b506103ac61062f366004613a2e565b611776565b34801561064057600080fd5b50610487600181565b34801561065557600080fd5b506104876204000081565b34801561066c57600080fd5b5061068061067b366004613d4e565b611798565b6040516103539190613dc1565b34801561069957600080fd5b506106ad6106a8366004613a2e565b61183f565b6040516103539190613dd4565b3480156106c657600080fd5b5061044e6106d5366004613df4565b6118cb565b3480156106e657600080fd5b5061044e6106f5366004613e40565b611a4f565b34801561070657600080fd5b5061044e610715366004613e82565b611b4e565b34801561072657600080fd5b5061073a610735366004613a2e565b611c63565b604051610353929190613ef7565b34801561075457600080fd5b50610487600481565b34801561076957600080fd5b5061033f611d28565b34801561077e57600080fd5b5061044e61078d366004613c41565b611d32565b34801561079e57600080fd5b506104ba600160fe1b81565b3480156107b657600080fd5b506104ba600160ff1b81565b3480156107ce57600080fd5b5061044e6107dd366004613e82565b611db4565b3480156107ee57600080fd5b506104ba611eca565b34801561080357600080fd5b5061044e610812366004613f21565b611edc565b34801561082357600080fd5b5061033f610832366004613a2e565b600090815260d260205260409020546001600160a01b031690565b34801561085957600080fd5b506104876201000081565b34801561087057600080fd5b5060cb5461033f906001600160a01b031681565b34801561089057600080fd5b506103ac61089f366004613c41565b611ff0565b3480156108b057600080fd5b5061044e6108bf366004613f51565b612019565b3480156108d057600080fd5b506104ba6121dd565b3480156108e557600080fd5b506108f96108f4366004613c8a565b6121ef565b60405161035393929190613fa8565b34801561091457600080fd5b50610928610923366004613d4e565b61234e565b6040516103539493929190613fc7565b34801561094457600080fd5b5061044e610953366004613a2e565b612569565b34801561096457600080fd5b5061044e610973366004614017565b612573565b34801561098457600080fd5b506103ac610993366004613c8a565b6127bb565b3480156109a457600080fd5b5061044e6109b3366004613df4565b6127ea565b3480156109c457600080fd5b506104ba6109d3366004613d4e565b612b58565b3480156109e457600080fd5b506104ba6109f3366004614057565b61ffff918216600090815260d76020908152604080832093909416825291909152205490565b348015610a2557600080fd5b50610487600281565b348015610a3a57600080fd5b506104ba610a49366004613a2e565b612bb3565b348015610a5a57600080fd5b506103ac610a69366004613a2e565b612be7565b60d76020528260005260406000206020528160005260406000208181548110610a9657600080fd5b6000918252602090912060029091020180546001909101546001600160a01b0390911693509150839050565b600060d682604051610ad4919061408a565b9081526040519081900360200190205461ffff1692915050565b610b1e848460d68585604051610b059291906140a6565b9081526040519081900360200190205461ffff166111c8565b50505050565b610b3062010000612be7565b610b555760405162461bcd60e51b8152600401610b4c906140b6565b60405180910390fd5b6001600160a01b038216600090815260cf60205260409020548111610bd25760405162461bcd60e51b815260206004820152602d60248201527f6e6577206e6f6e6365206d75737420626520626967676572207468616e20746860448201526c652063757272656e74206f6e6560981b6064820152608401610b4c565b6001600160a01b038216600081815260cf602052604090208290557f2af71f10069c28afc67c3752e87e0e4616a97948d33c8f404a856c0c334b3e01610c196001846140f3565b6040519081526020015b60405180910390a25050565b905090565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610c7c5760405162461bcd60e51b8152600401610b4c9061410a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610cae612bf9565b6001600160a01b031614610cd45760405162461bcd60e51b8152600401610b4c90614156565b610cdd81612c27565b60408051600080825260208201909252610cf991839190612c50565b50565b610cf98133612d9b565b600080610d23610d196020850185613c6d565b8460200135612ec6565b600090815260d8602052604090205461ffff1615159392505050565b610d496004611776565b610d955760405162461bcd60e51b815260206004820152601b60248201527f617373657420756e6c696e6b696e672069732064697361626c656400000000006044820152606401610b4c565b6000610db1610da76020840184613c6d565b8360200135612ec6565b600081815260d8602052604081205491925061ffff9091169003610e085760405162461bcd60e51b815260206004820152600e60248201526d1d5b9b1a5b9ad95908185cdcd95d60921b6044820152606401610b4c565b33610e166020840184613c6d565b6040516331a9108f60e11b8152602085013560048201526001600160a01b039190911690636352211e90602401602060405180830381865afa158015610e60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e8491906141a2565b6001600160a01b03161480610ef2575060cb546001600160a01b0316610ead6020840184613c6d565b6001600160a01b0316148015610ef25750610ed5610ed0368490038401846141bf565b612f04565b80610ef25750610ef2610eed368490038401846141bf565b61306c565b610f0e5760405162461bcd60e51b8152600401610b4c90614217565b600081815260d8602090815260408083208151606081018352905461ffff80821680845262010000830482168487019081526401000000009093046001600160e01b031684860152865260d7855283862091511685529092529091205460018111156110bf57815161ffff908116600090815260d760209081526040808320828701519094168352929052908120610fa76001846140f3565b81548110610fb757610fb761423f565b600091825260208083206040805180820190915260029093020180546001600160a01b0316808452600190910154918301829052919350610ff89190612ec6565b90508160d76000866000015161ffff1681526020019081526020016000206000866020015161ffff1661ffff16815260200190815260200160002085604001516001600160e01b0316815481106110515761105161423f565b60009182526020808320845160029093020180546001600160a01b039093166001600160a01b03199093169290921782559283015160019091015560408087015193825260d89092522080546001600160e01b039092166401000000000263ffffffff909216919091179055505b815161ffff908116600090815260d760209081526040808320828701519094168352929052208054806110f4576110f4614255565b6000828152602080822060026000199094019384020180546001600160a01b03191681556001018290559190925584825260d890526040812081905560d980549161113e8361426b565b9091555050815161ffff166020850180359061115a9087613c6d565b6001600160a01b03167ff85cbeffd83133831e57542e44c43d60c6afb97812c8775480ed300f62e369ec338660200151426040516111ba939291906001600160a01b0393909316835261ffff919091166020830152604082015260600190565b60405180910390a450505050565b6111d26002611776565b61121e5760405162461bcd60e51b815260206004820152601960248201527f6173736574206c696e6b696e672069732064697361626c6564000000000000006044820152606401610b4c565b3361122c6020850185613c6d565b6040516331a9108f60e11b8152602086013560048201526001600160a01b039190911690636352211e90602401602060405180830381865afa158015611276573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061129a91906141a2565b6001600160a01b031614806112fe575060cb546001600160a01b03166112c36020850185613c6d565b6001600160a01b03161480156112fe57506112e6610ed0368590038501856141bf565b806112fe57506112fe610eed368590038501856141bf565b61131a5760405162461bcd60e51b8152600401610b4c90614217565b60008261ffff161161133e5760405162461bcd60e51b8152600401610b4c90614282565b60008161ffff16118015611357575060d55461ffff8216105b6113965760405162461bcd60e51b815260206004820152601060248201526f696e76616c69642063617465676f727960801b6044820152606401610b4c565b60006001600160a01b031660d58261ffff16815481106113b8576113b861423f565b60009182526020909120600160029092020101546001600160a01b0316148061142857506113e96020840184613c6d565b6001600160a01b031660d58261ffff16815481106114095761140961423f565b60009182526020909120600160029092020101546001600160a01b0316145b61148b5760405162461bcd60e51b815260206004820152602e60248201527f6173736574206c696e6b696e67207265737472696374656420666f722073757060448201526d706c6965642063617465676f727960901b6064820152608401610b4c565b60006114a761149d6020860186613c6d565b8560200135612ec6565b600081815260d8602052604090205490915061ffff16156115015760405162461bcd60e51b8152602060048201526014602482015273185cdcd95d08185b1c9958591e481b1a5b9ad95960621b6044820152606401610b4c565b600081815260d360205260409020541561155d5760405162461bcd60e51b815260206004820152601d60248201527f6173736574206973206173736f636961746564207769746820686976650000006044820152606401610b4c565b60d9805490600061156d836142aa565b909155505061ffff808416600090815260d760209081526040808320938616835292815291812080546001810182559082529190208591600202016115b282826142c3565b50506040805160608101825261ffff8086168083529085166020808401829052600092835260d78152848320918352528290205490918201906115f7906001906140f3565b61ffff908116909152600083815260d86020908152604091829020845181548684015196909401516001600160e01b03166401000000000263ffffffff968616620100000263ffffffff1990951691861691909117939093179490941691909117909255841690850180359061166d9087613c6d565b6040805133815261ffff8716602082015242918101919091526001600160a01b0391909116907f5cd1a97d0d6373d1385940f3fa8fdbc61a4904736046f736bdd405d95309549b906060016111ba565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036117055760405162461bcd60e51b8152600401610b4c9061410a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611737612bf9565b6001600160a01b03161461175d5760405162461bcd60e51b8152600401610b4c90614156565b61176682612c27565b61177282826001612c50565b5050565b30600090815260016020526040812054611792905b8316831490565b92915050565b61ffff8116600090815260d4602052604090208054606091906117ba906142f9565b80601f01602080910402602001604051908101604052809291908181526020018280546117e6906142f9565b80156118335780601f1061180857610100808354040283529160200191611833565b820191906000526020600020905b81548152906001019060200180831161181657829003601f168201915b50505050509050919050565b60408051808201909152600080825260208201528115801590611863575060d15482105b61187f5760405162461bcd60e51b8152600401610b4c90614282565b60d182815481106118925761189261423f565b60009182526020918290206040805180820190915260029092020180546001600160a01b03168252600101549181019190915292915050565b6000831180156118dc575060d15483105b6118f85760405162461bcd60e51b8152600401610b4c90614282565b600060d1848154811061190d5761190d61423f565b600091825260209182902060408051808201825260029390930290910180546001600160a01b031680845260019091015493830184905290516331a9108f60e11b815260048101939093529092503391636352211e90602401602060405180830381865afa158015611983573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119a791906141a2565b6001600160a01b031614806119c057506119c081612f04565b806119cf57506119cf8161306c565b6119eb5760405162461bcd60e51b8152600401610b4c90614217565b600084815260d460205260409020611a0483858361437c565b5083336001600160a01b03167f1562a4ab7dcb478e782dcea2771f85cd6ec0b70a342cf27b9bf9b1f9f37c7a478585604051611a41929190614465565b60405180910390a350505050565b4283606001351115611a935760405162461bcd60e51b815260206004820152600d60248201526c1b9bdd081e595d081d985b1a59609a1b6044820152606401610b4c565b42836080013511611ad05760405162461bcd60e51b8152602060048201526007602482015266195e1c1a5c995960ca1b6044820152606401610b4c565b611aed611ae36060850160408601613c6d565b8460a0013561319c565b6000611b4283838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611b3c9250611b379150889050613240565b6132e9565b906132fc565b9050610b1e8482612d9b565b611b5a62020000612be7565b611b765760405162461bcd60e51b8152600401610b4c906140b6565b8060005b81811015610b1e5760d06000858584818110611b9857611b9861423f565b602090810292909201358352508101919091526040016000205460ff161515600103611c5157600060d06000868685818110611bd657611bd661423f565b60209081029290920135835250810191909152604001600020805460ff1916911515919091179055337fa1f2829f3a396e903b6cc2fc4fe84307770e49acb1b78d70e2ae3c798d0faaa8858584818110611c3257611c3261423f565b90506020020135604051611c4891815260200190565b60405180910390a25b80611c5b816142aa565b915050611b7a565b60d58181548110611c7357600080fd5b9060005260206000209060020201600091509050806000018054611c96906142f9565b80601f0160208091040260200160405190810160405280929190818152602001828054611cc2906142f9565b8015611d0f5780601f10611ce457610100808354040283529160200191611d0f565b820191906000526020600020905b815481529060010190602001808311611cf257829003601f168201915b505050600190930154919250506001600160a01b031682565b6000610c2f612bf9565b611d3f600160ff1b612be7565b611d5b5760405162461bcd60e51b8152600401610b4c906140b6565b6117728282611daf33611d83876001600160a01b031660009081526001602052604090205490565b866001600160a01b03929092166000908152600160205260409020546000198084188216189216171690565b613320565b611dc062020000612be7565b611ddc5760405162461bcd60e51b8152600401610b4c906140b6565b8060005b81811015610b1e5760d06000858584818110611dfe57611dfe61423f565b6020908102929092013583525081019190915260400160009081205460ff1615159003611eb857600160d06000868685818110611e3d57611e3d61423f565b60209081029290920135835250810191909152604001600020805460ff1916911515919091179055337fed8f87b92acaa1c71b4bb41b245ded24f3d91c6b5e8981b8f433c1227aaf271c858584818110611e9957611e9961423f565b90506020020135604051611eaf91815260200190565b60405180910390a25b80611ec2816142aa565b915050611de0565b60d154600090610c2f906001906140f3565b611ee862080000612be7565b611f045760405162461bcd60e51b8152600401610b4c906140b6565b600082118015611f15575060d15482105b611f315760405162461bcd60e51b8152600401610b4c90614282565b600082815260d260205260409020546001600160a01b031615611f965760405162461bcd60e51b815260206004820152601c60248201527f746f6b656e206164647265737320697320616c726561647920736574000000006044820152606401610b4c565b600082815260d2602052604080822080546001600160a01b0319166001600160a01b03851690811790915590519091849133917f1a71eb38149f118f9bf5c8a230e584f239a0871b967426bfe661075157ac582f91a45050565b6001600160a01b0382166000908152600160205260408120546120129061178b565b9392505050565b61202562040000612be7565b6120415760405162461bcd60e51b8152600401610b4c906140b6565b60d683836040516120539291906140a6565b9081526040519081900360200190205461ffff16156120a75760405162461bcd60e51b815260206004820152601060248201526f63617465676f7279206578697374732160801b6044820152606401610b4c565b6040805160606020601f86018190040282018101835291810184815260d592829190879087908190850183828082843760009201829052509385525050506001600160a01b03851660209283015283546001810185559381522081519192600202019081906121169082614479565b5060209190910151600191820180546001600160a01b0319166001600160a01b0390921691909117905560d55461214d91906140f3565b60d6848460405161215f9291906140a6565b908152604051908190036020019020805461ffff9290921661ffff1990921691909117905560d554612193906001906140f3565b336001600160a01b03167f8cc81f63b754cb6c484a79c331df3d99927fa4b7c2bdd2b1737bd9e606fd58218585856040516121d093929190614539565b60405180910390a3505050565b60d554600090610c2f906001906140f3565b60008060608161220f6122056020870187613c6d565b8660200135612ec6565b600081815260d8602052604081205491925061ffff90911690036122625760405162461bcd60e51b815260206004820152600a6024820152691b9bdd081b1a5b9ad95960b21b6044820152606401610b4c565b600081815260d8602052604090205460d5805461ffff80841693620100009004169190829081106122955761229561423f565b90600052602060002090600202016000018261ffff1692508161ffff1691508080546122c0906142f9565b80601f01602080910402602001604051908101604052809291908181526020018280546122ec906142f9565b80156123395780601f1061230e57610100808354040283529160200191612339565b820191906000526020600020905b81548152906001019060200180831161231c57829003601f168201915b50505050509050935093509350509193909250565b6040805180820190915260008082526020820152600080606061ffff85161580159061237f575060d15461ffff8616105b61239b5760405162461bcd60e51b8152600401610b4c90614282565b60d18561ffff16815481106123b2576123b261423f565b906000526020600020906002020160d18661ffff16815481106123d7576123d761423f565b600091825260209091206002909102015460d180546001600160a01b0390921691636352211e919061ffff8a169081106124135761241361423f565b9060005260206000209060020201600101546040518263ffffffff1660e01b815260040161244391815260200190565b602060405180830381865afa158015612460573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061248491906141a2565b61ffff8716600090815260d2602090815260408083205460d4835292819020815180830190925285546001600160a01b03908116835260019096015492820192909252815490949092169181906124da906142f9565b80601f0160208091040260200160405190810160405280929190818152602001828054612506906142f9565b80156125535780601f1061252857610100808354040283529160200191612553565b820191906000526020600020905b81548152906001019060200180831161253657829003601f168201915b5050505050905093509350935093509193509193565b610cf93082611d32565b600054610100900460ff1661258e5760005460ff1615612592565b303b155b6125f55760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610b4c565b600054610100900460ff16158015612617576000805461ffff19166101011790555b61265e6040518060400160405280600c81526020016b48697665526567697374727960a01b815250604051806040016040528060018152602001603160f81b81525061337a565b612667336133bb565b60cc80546001600160a01b038086166001600160a01b03199283161790925560cd805485841690831617905560cb8054928716929091168217905560d18054600190810190915560d580546040805160808101825260109181019182526f125b9d195b1b1a59d95b98d957d413d160821b606082015290815260208101949094526002818101835560009290925283519201027f51858de9989bf7441865ebdadbf7382c8838edbf830f5d86a9a51ac773676dd6019081906127299082614479565b5060209190910151600191820180546001600160a01b0319166001600160a01b0390921691909117905560d55461276091906140f3565b6040516f125b9d195b1b1a59d95b98d957d413d160821b815260d690601001908152604051908190036020019020805461ffff9290921661ffff199092169190911790558015610b1e576000805461ff001916905550505050565b600060ce816127d061149d6020860186613c6d565b815260208101919091526040016000205460ff1692915050565b6127f46001611776565b6128395760405162461bcd60e51b81526020600482015260166024820152751a1a5d994818dc99585d1a5bdb88191a5cd8589b195960521b6044820152606401610b4c565b60cb546001600160a01b0316158015906128615750600083815260d0602052604090205460ff165b61289b5760405162461bcd60e51b815260206004820152600b60248201526a1b9bdd08185b1b1bddd95960aa1b6044820152606401610b4c565b60408051808201825260cb546001600160a01b03168082526020820186905291516331a9108f60e11b81526004810186905290913391636352211e90602401602060405180830381865afa1580156128f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061291b91906141a2565b6001600160a01b03161480612934575061293481612f04565b8061294357506129438161306c565b61295f5760405162461bcd60e51b8152600401610b4c90614217565b60cb54600090612978906001600160a01b031686612ec6565b600081815260d36020526040902054909150156129c85760405162461bcd60e51b815260206004820152600e60248201526d616c72656164792065786973747360901b6044820152606401610b4c565b600081815260d8602052604090205461ffff1615612a215760405162461bcd60e51b81526020600482015260166024820152751c1bd9081b1a5b9ad95908185cc8185b88185cdcd95d60521b6044820152606401610b4c565b60d1805460018082018355600083905284517f695fb3134ad82c3b8022bc5464edd0bcc9424ef672b52245dcb6ab2374327ce3600290930292830180546001600160a01b0319166001600160a01b0390921691909117905560208501517f695fb3134ad82c3b8022bc5464edd0bcc9424ef672b52245dcb6ab2374327ce4909201919091559054612ab291906140f3565b600082815260d3602052604081209190915560d1548591859160d49190612adb906001906140f3565b81526020019081526020016000209182612af692919061437c565b50602082015160d154612b0b906001906140f3565b8351604080516001600160a01b03909216825242602083015233917fa225649255552ba8a1655788ccea23e48356815f70ad3815e71146239528328b910160405180910390a45050505050565b60d55460009060015b818161ffff161015612bac5761ffff808516600090815260d76020908152604080832093851683529290522054612b989084614565565b925080612ba48161457d565b915050612b61565b5050919050565b60cb5460009060d3908290612bd1906001600160a01b031685612ec6565b8152602001908152602001600020549050919050565b60006117923383611ff0565b3b151590565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b612c34600160fe1b612be7565b610cf95760405162461bcd60e51b8152600401610b4c906140b6565b6000612c5a612bf9565b9050612c65846133ef565b600083511180612c725750815b15612c8357612c818484613494565b505b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143805460ff16612d9457805460ff191660011781556040516001600160a01b0383166024820152612d0290869060440160408051601f198184030181529190526020810180516001600160e01b0316631b2ce7f360e11b179052613494565b50805460ff19168155612d13612bf9565b6001600160a01b0316826001600160a01b031614612d8b5760405162461bcd60e51b815260206004820152602f60248201527f45524331393637557067726164653a207570677261646520627265616b73206660448201526e75727468657220757067726164657360881b6064820152608401610b4c565b612d9485613576565b5050505050565b612da762010000612be7565b80612dba5750612dba8162010000611ff0565b612dd65760405162461bcd60e51b8152600401610b4c90614217565b6000612de8610d196020850185613c6d565b600081815260ce602052604090205490915060ff1615612e4a5760405162461bcd60e51b815260206004820152601a60248201527f44505420697320616c72656164792072656769737465726564210000000000006044820152606401610b4c565b600081815260ce60209081526040909120805460ff191660011790558301803590612e759085613c6d565b6001600160a01b0316836001600160a01b03167f84264386e44281cb64e14cb2be504e981e7d28709c283c4bc37cb4589cdf685d42604051612eb991815260200190565b60405180910390a4505050565b604080516001600160a01b03841660208201529081018290526000906060015b60405160208183030381529060405280519060200120905092915050565b60cd546000906001600160a01b0316612f1f57506000919050565b60cd546020830151604051633a90b56960e01b815263ffffffff90911660048201526000916001600160a01b031690633a90b56990602401602060405180830381865afa158015612f74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f98919061459e565b905080600003612fab5750600092915050565b60cd54602084015160009182916001600160a01b039091169063db6d98df90612fd56001876140f3565b6040516001600160e01b031960e085901b16815263ffffffff9290921660048301526024820152604401606060405180830381865afa15801561301c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061304091906145cb565b92505091508063ffffffff16600014801561306357506001600160a01b03821633145b95945050505050565b60cc546000906001600160a01b031661308757506000919050565b60cc5482516020840151604051637aa87ad160e01b81526000936001600160a01b031692637aa87ad1926130d1926004016001600160a01b03929092168252602082015260400190565b602060405180830381865afa1580156130ee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613112919061459e565b90508015801590612012575060cc546040516331a9108f60e11b81526004810183905233916001600160a01b031690636352211e90602401602060405180830381865afa158015613167573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061318b91906141a2565b6001600160a01b0316149392505050565b6001600160a01b038216600090815260cf60205260408120805483929091906131c4836142aa565b91905055146132055760405162461bcd60e51b815260206004820152600d60248201526c696e76616c6964206e6f6e636560981b6044820152606401610b4c565b816001600160a01b03167f2af71f10069c28afc67c3752e87e0e4616a97948d33c8f404a856c0c334b3e0182604051610c2391815260200190565b60007f5e5980812e14d500287e9b3d75ae309eac0fb0d30f0d40d19ea443de698eef0061326c836135b6565b61327c6060850160408601613c6d565b846060013585608001358660a001356040516020016132cc9695949392919095865260208601949094526001600160a01b039290921660408501526060840152608083015260a082015260c00190565b604051602081830303815290604052805190602001209050919050565b60006117926132f6613613565b8361368e565b600080600061330b85856136b5565b9150915061331881613723565b509392505050565b6001600160a01b03831660008181526001602090815260409182902084905581518581529081018490527fe9be537308880e0f56b7d7cfd7abf85f14c4934486d138f848b92a0cbaf659b4910160405180910390a2505050565b600054610100900460ff166133a15760405162461bcd60e51b8152600401610b4c90614607565b815160209283012081519190920120609791909155609855565b600054610100900460ff166133e25760405162461bcd60e51b8152600401610b4c90614607565b610cf98160001980613320565b803b6134535760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610b4c565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b6060823b6134f35760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610b4c565b600080846001600160a01b03168460405161350e919061408a565b600060405180830381855af49150503d8060008114613549576040519150601f19603f3d011682016040523d82523d6000602084013e61354e565b606091505b50915091506130638282604051806060016040528060278152602001614669602791396138d9565b61357f816133ef565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60007f685dd8e2693cf377e50b3e95f06b61dff4c1705fa19df1071074d64f4e1469eb6135e66020840184613c6d565b604080516020818101949094526001600160a01b03909216908201529083013560608201526080016132cc565b6000610c2f7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f61364260975490565b6098546040805160208101859052908101839052606081018290524660808201523060a082015260009060c0016040516020818303038152906040528051906020012090509392505050565b60405161190160f01b60208201526022810183905260428101829052600090606201612ee6565b60008082516041036136eb5760208301516040840151606085015160001a6136df87828585613912565b9450945050505061371c565b825160400361371457602083015160408401516137098683836139ff565b93509350505061371c565b506000905060025b9250929050565b600081600481111561373757613737614652565b0361373f5750565b600181600481111561375357613753614652565b036137a05760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610b4c565b60028160048111156137b4576137b4614652565b036138015760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610b4c565b600381600481111561381557613815614652565b0361386d5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610b4c565b600481600481111561388157613881614652565b03610cf95760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610b4c565b606083156138e8575081612012565b8251156138f85782518084602001fd5b8160405162461bcd60e51b8152600401610b4c9190613dc1565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561394957506000905060036139f6565b8460ff16601b1415801561396157508460ff16601c14155b1561397257506000905060046139f6565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156139c6573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166139ef576000600192509250506139f6565b9150600090505b94509492505050565b6000806001600160ff1b03831660ff84901c601b01613a2087828885613912565b935093505050935093915050565b600060208284031215613a4057600080fd5b5035919050565b803561ffff81168114613a5957600080fd5b919050565b600080600060608486031215613a7357600080fd5b83359250613a8360208501613a47565b9150604084013590509250925092565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115613ac457613ac4613a93565b604051601f8501601f19908116603f01168101908282118183101715613aec57613aec613a93565b81604052809350858152868686011115613b0557600080fd5b858560208301376000602087830101525050509392505050565b600060208284031215613b3157600080fd5b813567ffffffffffffffff811115613b4857600080fd5b8201601f81018413613b5957600080fd5b613b6884823560208401613aa9565b949350505050565b600060408284031215613b8257600080fd5b50919050565b60008083601f840112613b9a57600080fd5b50813567ffffffffffffffff811115613bb257600080fd5b60208301915083602082850101111561371c57600080fd5b60008060008060808587031215613be057600080fd5b613bea8686613b70565b9350613bf860408601613a47565b9250606085013567ffffffffffffffff811115613c1457600080fd5b613c2087828801613b88565b95989497509550505050565b6001600160a01b0381168114610cf957600080fd5b60008060408385031215613c5457600080fd5b8235613c5f81613c2c565b946020939093013593505050565b600060208284031215613c7f57600080fd5b813561201281613c2c565b600060408284031215613c9c57600080fd5b6120128383613b70565b600080600060808486031215613cbb57600080fd5b613cc58585613b70565b9250613cd360408501613a47565b9150613ce160608501613a47565b90509250925092565b60008060408385031215613cfd57600080fd5b8235613d0881613c2c565b9150602083013567ffffffffffffffff811115613d2457600080fd5b8301601f81018513613d3557600080fd5b613d4485823560208401613aa9565b9150509250929050565b600060208284031215613d6057600080fd5b61201282613a47565b60005b83811015613d84578181015183820152602001613d6c565b83811115610b1e5750506000910152565b60008151808452613dad816020860160208601613d69565b601f01601f19169290920160200192915050565b6020815260006120126020830184613d95565b81516001600160a01b031681526020808301519082015260408101611792565b600080600060408486031215613e0957600080fd5b83359250602084013567ffffffffffffffff811115613e2757600080fd5b613e3386828701613b88565b9497909650939450505050565b600080600083850360e0811215613e5657600080fd5b60c0811215613e6457600080fd5b5083925060c084013567ffffffffffffffff811115613e2757600080fd5b60008060208385031215613e9557600080fd5b823567ffffffffffffffff80821115613ead57600080fd5b818501915085601f830112613ec157600080fd5b813581811115613ed057600080fd5b8660208260051b8501011115613ee557600080fd5b60209290920196919550909350505050565b604081526000613f0a6040830185613d95565b905060018060a01b03831660208301529392505050565b60008060408385031215613f3457600080fd5b823591506020830135613f4681613c2c565b809150509250929050565b600080600060408486031215613f6657600080fd5b833567ffffffffffffffff811115613f7d57600080fd5b613f8986828701613b88565b9094509250506020840135613f9d81613c2c565b809150509250925092565b8381528260208201526060604082015260006130636060830184613d95565b84516001600160a01b03168152602080860151908201526001600160a01b0384811660408301528316606082015260a06080820181905260009061400d90830184613d95565b9695505050505050565b60008060006060848603121561402c57600080fd5b833561403781613c2c565b9250602084013561404781613c2c565b91506040840135613f9d81613c2c565b6000806040838503121561406a57600080fd5b61407383613a47565b915061408160208401613a47565b90509250929050565b6000825161409c818460208701613d69565b9190910192915050565b8183823760009101908152919050565b6020808252600d908201526c1858d8d95cdcc819195b9a5959609a1b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600082821015614105576141056140dd565b500390565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6000602082840312156141b457600080fd5b815161201281613c2c565b6000604082840312156141d157600080fd5b6040516040810181811067ffffffffffffffff821117156141f4576141f4613a93565b604052823561420281613c2c565b81526020928301359281019290925250919050565b6020808252600e908201526d1b9bdd08185d5d1a1bdc9a5e995960921b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b60008161427a5761427a6140dd565b506000190190565b6020808252600e908201526d1a5b9d985b1a59081a1a5d99525960921b604082015260600190565b6000600182016142bc576142bc6140dd565b5060010190565b81356142ce81613c2c565b81546001600160a01b0319166001600160a01b03919091161781556020919091013560019190910155565b600181811c9082168061430d57607f821691505b602082108103613b8257634e487b7160e01b600052602260045260246000fd5b601f82111561437757600081815260208120601f850160051c810160208610156143545750805b601f850160051c820191505b8181101561437357828155600101614360565b5050505b505050565b67ffffffffffffffff83111561439457614394613a93565b6143a8836143a283546142f9565b8361432d565b6000601f8411600181146143dc57600085156143c45750838201355b600019600387901b1c1916600186901b178355612d94565b600083815260209020601f19861690835b8281101561440d57868501358255602094850194600190920191016143ed565b508682101561442a5760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b602081526000613b6860208301848661443c565b815167ffffffffffffffff81111561449357614493613a93565b6144a7816144a184546142f9565b8461432d565b602080601f8311600181146144dc57600084156144c45750858301515b600019600386901b1c1916600185901b178555614373565b600085815260208120601f198616915b8281101561450b578886015182559484019460019091019084016144ec565b50858210156145295787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60408152600061454d60408301858761443c565b905060018060a01b0383166020830152949350505050565b60008219821115614578576145786140dd565b500190565b600061ffff808316818103614594576145946140dd565b6001019392505050565b6000602082840312156145b057600080fd5b5051919050565b805163ffffffff81168114613a5957600080fd5b6000806000606084860312156145e057600080fd5b83516145eb81613c2c565b92506145f9602085016145b7565b9150613ce1604085016145b7565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b634e487b7160e01b600052602160045260246000fdfe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122048d413f4fc167f066b7e5a15857cdedb28be6d205589b8c2ea5d530d0a57d81f64736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addCategory(string,address)": {
        "params": {
          "allowedCollection": "nft collection linking permitted within specific category.      If allowedCollection is ZERO_ADDRESS, any NFT collection may      link within that category.",
          "categoryName": "category name"
        }
      },
      "createHive(uint256,string)": {
        "params": {
          "hiveURI": "hive URI pointing to some off-chain resource",
          "podId": "Level 5 AI PodId"
        }
      },
      "delistPods(uint256[])": {
        "params": {
          "podIds": "array of AI Pod IDs do delist"
        }
      },
      "eip712RegisterAsDPT(((address,uint256),address,uint256,uint256,uint256),bytes)": {
        "params": {
          "req": "The RegisterAssetRequest struct containing request details.",
          "signature": "The signature of the request."
        }
      },
      "fastForwardTheNonce(address,uint256)": {
        "details": "Implementation must not allow to decrease the nonce, only increasing (rewinding)      must be possible",
        "params": {
          "_issuer": "the issuer address to rewind the nonce for",
          "_nonce": "the nonce value to rewind to"
        }
      },
      "features()": {
        "details": "Effectively reads userRoles role for the contract itself",
        "returns": {
          "_0": "256-bit bitmask of the features enabled"
        }
      },
      "getCategoryIndex(string)": {
        "params": {
          "categoryName": "category name"
        },
        "returns": {
          "categoryId": "category ID (index)"
        }
      },
      "getHiveCreatorPod(uint256)": {
        "params": {
          "hiveId": "ID of the Hive to query for"
        },
        "returns": {
          "pod": "AI-pod (ERC721 address, ERC721 ID)"
        }
      },
      "getHiveDetails(uint16)": {
        "params": {
          "hiveId": "ID of the Hive to query for"
        },
        "returns": {
          "hiveOwner": "owner of AI-Pod cum hive",
          "hiveTokenAddr": "address of the ERC20 token representing the economy of the Hive",
          "hiveUri": "Hive metadata URL",
          "pod": "AI-Pod details asossiated with hive"
        }
      },
      "getHiveId(uint256)": {
        "params": {
          "podId": "AI Pod ID"
        },
        "returns": {
          "hiveId": "Hive ID"
        }
      },
      "getHiveToken(uint256)": {
        "params": {
          "hiveId": "ID of the Hive to query for"
        },
        "returns": {
          "tokenAddr": "address of the ERC20 token representing the economy of the Hive"
        }
      },
      "getHiveURI(uint16)": {
        "params": {
          "hiveId": "ID of the Hive to query for"
        },
        "returns": {
          "hiveUri": "Hive URL"
        }
      },
      "getImplementation()": {
        "returns": {
          "_0": "the current implementation address"
        }
      },
      "getLinkedAssetDetails((address,uint256))": {
        "details": "Zero return values indicate the asset is not linked",
        "params": {
          "asset": "an NFT (ERC721 address, ERC721 ID)"
        },
        "returns": {
          "category": "category where the asset is registered within a Hive in string value",
          "categoryId": "category ID where the asset is registered within a Hive, or zero if not linked",
          "hiveId": "Hive ID where asset is linked to, zero if it is not linked"
        }
      },
      "getNonce(address)": {
        "params": {
          "client": "the client address to get the nonce for"
        },
        "returns": {
          "nonce": "current (unused) nonce; incremented by one after      each successful execution of the `registerDPTRequest` function"
        }
      },
      "getNumOfAssetsLinkedWithHive(uint16)": {
        "params": {
          "hiveId": "Hive ID to query"
        },
        "returns": {
          "numOfAssets": "number of assets linked with the Hive"
        }
      },
      "getNumOfAssetsLinkedWithHive(uint16,uint16)": {
        "params": {
          "categoryId": "category ID (index)",
          "hiveId": "Hive ID to query"
        },
        "returns": {
          "numOfAssets": "number of assets linked with the Hive"
        }
      },
      "getNumOfGlobalCategories()": {
        "returns": {
          "noOfCategories": "Total number of categories"
        }
      },
      "getNumOfHives()": {
        "returns": {
          "noOfHives": "Total number of Hives"
        }
      },
      "getRole(address)": {
        "details": "Having a simple getter instead of making the mapping public      allows enforcing the encapsulation of the mapping and protects from      writing to it directly in the inheriting smart contracts",
        "params": {
          "operator": "address of a user to read permissions for,      or self address to read global features of the smart contract"
        }
      },
      "isAssetLinked((address,uint256))": {
        "params": {
          "asset": "an NFT (ERC721 address, ERC721 ID)"
        },
        "returns": {
          "status": "true if asset is linked, false otherwise"
        }
      },
      "isDPTRegistered((address,uint256))": {
        "params": {
          "_dpt": "The TradeableShares.SharesSubject struct representing the DPT."
        },
        "returns": {
          "status": "True if the DPT is registered, false otherwise."
        }
      },
      "isFeatureEnabled(uint256)": {
        "params": {
          "required": "set of features to check against"
        },
        "returns": {
          "_0": "true if all the features requested are enabled, false otherwise"
        }
      },
      "isOperatorInRole(address,uint256)": {
        "params": {
          "operator": "address of the user to check role for",
          "required": "set of permissions (role) to check"
        },
        "returns": {
          "_0": "true if all the permissions requested are enabled, false otherwise"
        }
      },
      "isPodWhitelisted(uint256)": {
        "params": {
          "podId": "AI Pod ID to query"
        }
      },
      "isSenderInRole(uint256)": {
        "details": "Used in smart contracts only. Off-chain clients should use `isOperatorInRole`.",
        "params": {
          "required": "set of permissions (role) to check against"
        },
        "returns": {
          "_0": "true if all the permissions requested are enabled, false otherwise"
        }
      },
      "linkAsset((address,uint256),uint16,string)": {
        "params": {
          "asset": "an NFT (ERC721 address, ERC721 ID)",
          "categoryName": "asset category name within the Hive",
          "hiveId": "ID of the hive to join"
        }
      },
      "linkAsset((address,uint256),uint16,uint16)": {
        "params": {
          "asset": "an NFT (ERC721 address, ERC721 ID)",
          "categoryId": "asset category ID within the Hive",
          "hiveId": "ID of the hive to join"
        }
      },
      "postConstruct(address,address,address)": {
        "details": "\"Constructor replacement\" for upgradeable, must be execute immediately after proxy deployment      see https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable#initializers"
      },
      "registerAsDPT((address,uint256))": {
        "params": {
          "_dpt": "The TradeableShares.SharesSubject struct representing the DPT."
        }
      },
      "setHiveTokenAddress(uint256,address)": {
        "params": {
          "hiveId": "Hive ID",
          "tokenAddress": "ERC20 token address to set"
        }
      },
      "unlinkAsset((address,uint256))": {
        "params": {
          "asset": "an NFT (ERC721 address, ERC721 ID)"
        }
      },
      "updateFeatures(uint256)": {
        "details": "Requires transaction sender to have `ROLE_ACCESS_MANAGER` permissionFunction is left for backward compatibility with older versions",
        "params": {
          "_mask": "bitmask representing a set of features to enable/disable"
        }
      },
      "updateHiveURI(uint256,string)": {
        "params": {
          "hiveId": "Hive ID",
          "hiveURI": "Hive URI"
        }
      },
      "updateRole(address,uint256)": {
        "details": "Setting role to zero is equivalent to removing an all permissionsSetting role to `FULL_PRIVILEGES_MASK` is equivalent to      copying senders' permissions (role) to the userRequires transaction sender to have `ROLE_ACCESS_MANAGER` permission",
        "params": {
          "operator": "address of a user to alter permissions for,       or self address to alter global features of the smart contract",
          "role": "bitmask representing a set of permissions to      enable/disable for a user specified"
        }
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "whitelistPods(uint256[])": {
        "params": {
          "podIds": "array of level 5 AI Pod IDs"
        }
      }
    },
    "stateVariables": {
      "FEATURE_ALLOW_ASSET_LINKING": {
        "details": "Feature FEATURE_ALLOW_ASSET_LINKING must be enabled      as a prerequisite for `linkAsset()` function to succeed"
      },
      "FEATURE_ALLOW_ASSET_UNLINKING": {
        "details": "Feature FEATURE_ALLOW_ASSET_UNLINKING must be enabled      as a prerequisite for `unlinkAsset()` function to succeed"
      },
      "FEATURE_ALLOW_HIVE_CREATION": {
        "details": "Feature FEATURE_ALLOW_HIVE_CREATION must be enabled      as a prerequisite for `launchHive()` function to succeed"
      },
      "ROLE_CATEGORY_MANAGER": {
        "details": "Role ROLE_CATEGORY_MANAGER is required to execute `addCategory` functions"
      },
      "ROLE_DPT_REGISTRAR": {
        "details": "Role ROLE_SHARES_REGISTRAR is required to execute `registerDPTRequest` functions"
      },
      "ROLE_HIVE_TOKEN_MANAGER": {
        "details": "Role ROLE_HIVE_TOKEN_MANAGER is required to execute `updateHiveToken` functions"
      },
      "ROLE_POD_WHITELIST_MANAGER": {
        "details": "Role ROLE_POD_WHITELIST_MANAGER is required to execute `whitelistPods` & 'delistPods' functions"
      },
      "assetCatalogue": {
        "details": "Keeps track of the bound assets to the Hive as a categories catalog      Maps Hive ID => Category ID => Enumerable of the linked assets"
      },
      "categoryIndex": {
        "details": "Keeps track of the linked assets categories      Maps Category Name => category ID / Index"
      },
      "dptLinkStatus": {
        "details": "Mapping to store the linking status of DPTs identified by their bytes32 representation."
      },
      "globalCategories": {
        "details": "Enumerable of all categories. Category index in the array is a Category ID"
      },
      "hiveIndex": {
        "details": "Keeps track of which AI Pods created which Hives      Maps keccak256(AI Pod address, ID) => Hive ID"
      },
      "hiveToken": {
        "details": "Keeps track of the Hives' ERC20 economy tokens      Maps Hive ID => Hive economy ERC20 token address"
      },
      "hiveURI": {
        "details": "Keeps track of the Hive URIs      Maps Hive ID => Hive URI"
      },
      "hives": {
        "details": "Enumerable of all the Hives. Hive index in the array is a Hive ID."
      },
      "iNftContract": {
        "details": "iNFT Linker contract defined by `iNftContract` (effectively immutable)"
      },
      "linkedAssets": {
        "details": "Keeps track of the assets linked to the Hive      Maps an asset keccak256(ERC721 address, ID) => (Hive ID, Category ID, asset Index in `assetBindings`)"
      },
      "nonces": {
        "details": "Keeps track of the used nonces for every possible issuer      Maps address => number of used nonces"
      },
      "personalityContract": {
        "details": "AI Personality contract defined by `personalityContract` (effectively immutable)"
      },
      "podStakingContract": {
        "details": "AI Personality staking contract defined by `podStakingContract` (effectively immutable)"
      },
      "whitelistedPods": {
        "details": "Keeps track of Level 5 AI Pods      maps AI Pod ID => is Level 5?"
      }
    },
    "title": "Hive Registry (Implementation, V1)",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "FEATURE_ALLOW_ASSET_LINKING()": {
        "notice": "Enables asset linking with hives"
      },
      "FEATURE_ALLOW_ASSET_UNLINKING()": {
        "notice": "Enables asset unlink from hives"
      },
      "FEATURE_ALLOW_HIVE_CREATION()": {
        "notice": "Enables hive creation"
      },
      "ROLE_ACCESS_MANAGER()": {
        "notice": "Access manager is responsible for assigning the roles to users,      enabling/disabling global features of the smart contractAccess manager can add, remove and update user roles,      remove and update global features"
      },
      "ROLE_CATEGORY_MANAGER()": {
        "notice": "allows to add new asset global category to hive registry"
      },
      "ROLE_DPT_REGISTRAR()": {
        "notice": "registers DPTs with Hive registry on other behalf using meta-tx"
      },
      "ROLE_HIVE_TOKEN_MANAGER()": {
        "notice": "allows to set ERC20 token address associated with particular hive"
      },
      "ROLE_POD_WHITELIST_MANAGER()": {
        "notice": "allows to update pods of whitelisted list which are allowed to create hive"
      },
      "ROLE_UPGRADE_MANAGER()": {
        "notice": "Upgrade manager is responsible for smart contract upgrades,      see https://docs.openzeppelin.com/contracts/4.x/api/proxy#UUPSUpgradeable      see https://docs.openzeppelin.com/contracts/4.x/upgradeable"
      },
      "addCategory(string,address)": {
        "notice": "Add global category and assign it an index"
      },
      "createHive(uint256,string)": {
        "notice": "Creates a Hive. Available only for level 5 AI Pods"
      },
      "delistPods(uint256[])": {
        "notice": "Blacklists the AI Pods"
      },
      "eip712RegisterAsDPT(((address,uint256),address,uint256,uint256,uint256),bytes)": {
        "notice": "Registers an NFT as DPT by the request with a valid signature."
      },
      "fastForwardTheNonce(address,uint256)": {
        "notice": "Fast forward the nonce for the issuer specified, used to      discard one or more signed requests to `registerDPTRequest`"
      },
      "features()": {
        "notice": "Retrieves globally set of features enabled"
      },
      "getCategoryIndex(string)": {
        "notice": "Resolve category ID (index) by its name"
      },
      "getHiveCreatorPod(uint256)": {
        "notice": "Finds which AI Pod created the Hive"
      },
      "getHiveDetails(uint16)": {
        "notice": "Finds the all details associated with Hive"
      },
      "getHiveId(uint256)": {
        "notice": "Resolve Hive ID where the given asset is linked; an asset can also be an AI Pod      which created the Hive"
      },
      "getHiveToken(uint256)": {
        "notice": "Finds the economy ERC20 token address assigned to the Hive"
      },
      "getHiveURI(uint16)": {
        "notice": "Finds the URI of the given Hive"
      },
      "getImplementation()": {
        "notice": "Returns an address of the implementation smart contract,      see ERC1967Upgrade._getImplementation()"
      },
      "getLinkedAssetDetails((address,uint256))": {
        "notice": "Gets the info of the linked asset, the hiveID and categoryId where it is linked to"
      },
      "getNonce(address)": {
        "notice": "Gets current (unused) nonce for the given client address;      unused nonce is required to build the RegisterDPTRequest and sign it      nonces increment by one after each use"
      },
      "getNumOfAssetsLinkedWithHive(uint16)": {
        "notice": "How many assets are linked with the given Hive"
      },
      "getNumOfAssetsLinkedWithHive(uint16,uint16)": {
        "notice": "How many assets are linked with the given Hive in the give category"
      },
      "getNumOfGlobalCategories()": {
        "notice": "Total number of asset categories known to the Hives"
      },
      "getNumOfHives()": {
        "notice": "Total number of Hives registered within the registry"
      },
      "getRole(address)": {
        "notice": "Reads the permissions (role) for a given user from the `userRoles` mapping      (privileged addresses with defined roles/permissions)In the context of ERC20/ERC721 tokens these can be permissions to      allow minting or burning tokens, transferring on behalf and so on"
      },
      "isAssetLinked((address,uint256))": {
        "notice": "Checks whether asset is linked to any Hive"
      },
      "isDPTRegistered((address,uint256))": {
        "notice": "Checks whether a DPT is already registered."
      },
      "isFeatureEnabled(uint256)": {
        "notice": "Checks if requested set of features is enabled globally on the contract"
      },
      "isOperatorInRole(address,uint256)": {
        "notice": "Checks if operator has all the permissions (role) required"
      },
      "isPodWhitelisted(uint256)": {
        "notice": "Checks whether the give AI Pod is whitelisted, that is a Level 5      pod capable of creating a Hive (or already having a Hive)"
      },
      "isSenderInRole(uint256)": {
        "notice": "Checks if transaction sender `msg.sender` has all the permissions required"
      },
      "linkAsset((address,uint256),uint16,string)": {
        "notice": "Links an asset (NFT) to the Hive under certain category"
      },
      "linkAsset((address,uint256),uint16,uint16)": {
        "notice": "Links an asset (NFT) to the Hive under certain category"
      },
      "registerAsDPT((address,uint256))": {
        "notice": "Registers an NFT as DPT directly by the authorizer."
      },
      "setHiveTokenAddress(uint256,address)": {
        "notice": "Sets ERC20 Hive economy token address; can be done only once"
      },
      "totalNumOfAssetsLinked()": {
        "notice": "Total number of assets linked (counter)"
      },
      "unlinkAsset((address,uint256))": {
        "notice": "Unlinks an asset (NFT) from the Hive"
      },
      "updateFeatures(uint256)": {
        "notice": "Updates set of the globally enabled features (`features`),      taking into account sender's permissions"
      },
      "updateHiveURI(uint256,string)": {
        "notice": "Updates Hive URI"
      },
      "updateRole(address,uint256)": {
        "notice": "Updates set of permissions (role) for a given user,      taking into account sender's permissions."
      },
      "whitelistPods(uint256[])": {
        "notice": "Whitelists the AI Pods, that is marks podIds as level 5 pods,      meaning these pods become capable of launching Hives"
      }
    },
    "notice": "see HiveRegistry",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2096,
        "contract": "contracts/bonding_curves/HiveRegistryV1.sol:HiveRegistryV1",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2099,
        "contract": "contracts/bonding_curves/HiveRegistryV1.sol:HiveRegistryV1",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 37174,
        "contract": "contracts/bonding_curves/HiveRegistryV1.sol:HiveRegistryV1",
        "label": "userRoles",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 37179,
        "contract": "contracts/bonding_curves/HiveRegistryV1.sol:HiveRegistryV1",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2078,
        "contract": "contracts/bonding_curves/HiveRegistryV1.sol:HiveRegistryV1",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2273,
        "contract": "contracts/bonding_curves/HiveRegistryV1.sol:HiveRegistryV1",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3225,
        "contract": "contracts/bonding_curves/HiveRegistryV1.sol:HiveRegistryV1",
        "label": "_HASHED_NAME",
        "offset": 0,
        "slot": "151",
        "type": "t_bytes32"
      },
      {
        "astId": 3227,
        "contract": "contracts/bonding_curves/HiveRegistryV1.sol:HiveRegistryV1",
        "label": "_HASHED_VERSION",
        "offset": 0,
        "slot": "152",
        "type": "t_bytes32"
      },
      {
        "astId": 3364,
        "contract": "contracts/bonding_curves/HiveRegistryV1.sol:HiveRegistryV1",
        "label": "__gap",
        "offset": 0,
        "slot": "153",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 9596,
        "contract": "contracts/bonding_curves/HiveRegistryV1.sol:HiveRegistryV1",
        "label": "personalityContract",
        "offset": 0,
        "slot": "203",
        "type": "t_address"
      },
      {
        "astId": 9599,
        "contract": "contracts/bonding_curves/HiveRegistryV1.sol:HiveRegistryV1",
        "label": "iNftContract",
        "offset": 0,
        "slot": "204",
        "type": "t_address"
      },
      {
        "astId": 9602,
        "contract": "contracts/bonding_curves/HiveRegistryV1.sol:HiveRegistryV1",
        "label": "podStakingContract",
        "offset": 0,
        "slot": "205",
        "type": "t_address"
      },
      {
        "astId": 9607,
        "contract": "contracts/bonding_curves/HiveRegistryV1.sol:HiveRegistryV1",
        "label": "dptLinkStatus",
        "offset": 0,
        "slot": "206",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 9612,
        "contract": "contracts/bonding_curves/HiveRegistryV1.sol:HiveRegistryV1",
        "label": "nonces",
        "offset": 0,
        "slot": "207",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 9617,
        "contract": "contracts/bonding_curves/HiveRegistryV1.sol:HiveRegistryV1",
        "label": "whitelistedPods",
        "offset": 0,
        "slot": "208",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 9622,
        "contract": "contracts/bonding_curves/HiveRegistryV1.sol:HiveRegistryV1",
        "label": "hives",
        "offset": 0,
        "slot": "209",
        "type": "t_array(t_struct(SharesSubject)14778_storage)dyn_storage"
      },
      {
        "astId": 9627,
        "contract": "contracts/bonding_curves/HiveRegistryV1.sol:HiveRegistryV1",
        "label": "hiveToken",
        "offset": 0,
        "slot": "210",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 9632,
        "contract": "contracts/bonding_curves/HiveRegistryV1.sol:HiveRegistryV1",
        "label": "hiveIndex",
        "offset": 0,
        "slot": "211",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 9637,
        "contract": "contracts/bonding_curves/HiveRegistryV1.sol:HiveRegistryV1",
        "label": "hiveURI",
        "offset": 0,
        "slot": "212",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 9642,
        "contract": "contracts/bonding_curves/HiveRegistryV1.sol:HiveRegistryV1",
        "label": "globalCategories",
        "offset": 0,
        "slot": "213",
        "type": "t_array(t_struct(CategoryInfo)9232_storage)dyn_storage"
      },
      {
        "astId": 9647,
        "contract": "contracts/bonding_curves/HiveRegistryV1.sol:HiveRegistryV1",
        "label": "categoryIndex",
        "offset": 0,
        "slot": "214",
        "type": "t_mapping(t_string_memory_ptr,t_uint16)"
      },
      {
        "astId": 9656,
        "contract": "contracts/bonding_curves/HiveRegistryV1.sol:HiveRegistryV1",
        "label": "assetCatalogue",
        "offset": 0,
        "slot": "215",
        "type": "t_mapping(t_uint256,t_mapping(t_uint16,t_array(t_struct(SharesSubject)14778_storage)dyn_storage))"
      },
      {
        "astId": 9662,
        "contract": "contracts/bonding_curves/HiveRegistryV1.sol:HiveRegistryV1",
        "label": "linkedAssets",
        "offset": 0,
        "slot": "216",
        "type": "t_mapping(t_bytes32,t_struct(AssetLinkDetails)9225_storage)"
      },
      {
        "astId": 9665,
        "contract": "contracts/bonding_curves/HiveRegistryV1.sol:HiveRegistryV1",
        "label": "totalNumOfAssetsLinked",
        "offset": 0,
        "slot": "217",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(CategoryInfo)9232_storage)dyn_storage": {
        "base": "t_struct(CategoryInfo)9232_storage",
        "encoding": "dynamic_array",
        "label": "struct HiveRegistry.CategoryInfo[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(SharesSubject)14778_storage)dyn_storage": {
        "base": "t_struct(SharesSubject)14778_storage",
        "encoding": "dynamic_array",
        "label": "struct TradeableShares.SharesSubject[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(AssetLinkDetails)9225_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct HiveRegistry.AssetLinkDetails)",
        "numberOfBytes": "32",
        "value": "t_struct(AssetLinkDetails)9225_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_string_memory_ptr,t_uint16)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => uint16)",
        "numberOfBytes": "32",
        "value": "t_uint16"
      },
      "t_mapping(t_uint16,t_array(t_struct(SharesSubject)14778_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => struct TradeableShares.SharesSubject[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(SharesSubject)14778_storage)dyn_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_uint16,t_array(t_struct(SharesSubject)14778_storage)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint16 => struct TradeableShares.SharesSubject[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint16,t_array(t_struct(SharesSubject)14778_storage)dyn_storage)"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AssetLinkDetails)9225_storage": {
        "encoding": "inplace",
        "label": "struct HiveRegistry.AssetLinkDetails",
        "members": [
          {
            "astId": 9218,
            "contract": "contracts/bonding_curves/HiveRegistryV1.sol:HiveRegistryV1",
            "label": "hiveId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 9221,
            "contract": "contracts/bonding_curves/HiveRegistryV1.sol:HiveRegistryV1",
            "label": "categoryId",
            "offset": 2,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 9224,
            "contract": "contracts/bonding_curves/HiveRegistryV1.sol:HiveRegistryV1",
            "label": "assetIndex",
            "offset": 4,
            "slot": "0",
            "type": "t_uint224"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(CategoryInfo)9232_storage": {
        "encoding": "inplace",
        "label": "struct HiveRegistry.CategoryInfo",
        "members": [
          {
            "astId": 9228,
            "contract": "contracts/bonding_curves/HiveRegistryV1.sol:HiveRegistryV1",
            "label": "category",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 9231,
            "contract": "contracts/bonding_curves/HiveRegistryV1.sol:HiveRegistryV1",
            "label": "allowedCollection",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(SharesSubject)14778_storage": {
        "encoding": "inplace",
        "label": "struct TradeableShares.SharesSubject",
        "members": [
          {
            "astId": 14774,
            "contract": "contracts/bonding_curves/HiveRegistryV1.sol:HiveRegistryV1",
            "label": "tokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 14777,
            "contract": "contracts/bonding_curves/HiveRegistryV1.sol:HiveRegistryV1",
            "label": "tokenId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint224": {
        "encoding": "inplace",
        "label": "uint224",
        "numberOfBytes": "28"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}